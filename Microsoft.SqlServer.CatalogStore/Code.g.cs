//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.SqlServer.CatalogStore
{
    using System;
    using System.Data.SqlClient;
    using Microsoft.Data.Sqlite;
    using Microsoft.EntityFrameworkCore;
    
    
    public partial class DatabaseCatalogContext : Microsoft.EntityFrameworkCore.DbContext, System.IDisposable
    {
        
        private string _connectionId = System.Guid.NewGuid().ToString("N");
        
        private string _connectionString;
        
        private Microsoft.Data.Sqlite.SqliteConnection _sqliteConnection;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAllColumnCatalog> _sysAllColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAllObjectCatalog> _sysAllObjects;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAllViewCatalog> _sysAllViews;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAssemblyCatalog> _sysAssemblies;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAssemblyFileCatalog> _sysAssemblyFiles;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAssemblyModuleCatalog> _sysAssemblyModules;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAssemblyTypeCatalog> _sysAssemblyTypes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysAsymmetricKeyCatalog> _sysAsymmetricKeys;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysCertificateCatalog> _sysCertificates;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysChangeTrackingDatabaseCatalog> _sysChangeTrackingDatabases;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysChangeTrackingTableCatalog> _sysChangeTrackingTables;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysCheckConstraintCatalog> _sysCheckConstraints;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysColumnEncryptionKeyValueCatalog> _sysColumnEncryptionKeyValues;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysColumnEncryptionKeyCatalog> _sysColumnEncryptionKeys;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysColumnCatalog> _sysColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysComputedColumnCatalog> _sysComputedColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysConversationPriorityCatalog> _sysConversationPriorities;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysCryptPropertyCatalog> _sysCryptProperties;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatumSpaceCatalog> _sysDataSpaces;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseFileCatalog> _sysDatabaseFiles;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseFilestreamOptionCatalog> _sysDatabaseFilestreamOptions;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabasePrincipalCatalog> _sysDatabasePrincipals;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseQueryStoreOptionCatalog> _sysDatabaseQueryStoreOptions;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseRoleMemberCatalog> _sysDatabaseRoleMembers;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseScopedConfigurationCatalog> _sysDatabaseScopedConfigurations;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseScopedCredentialCatalog> _sysDatabaseScopedCredentials;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDatabaseCatalog> _sysDatabases;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDefaultConstraintCatalog> _sysDefaultConstraints;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysDestinationDatumSpaceCatalog> _sysDestinationDataSpaces;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysEventNotificationCatalog> _sysEventNotifications;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysEventCatalog> _sysEvents;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysExtendedPropertyCatalog> _sysExtendedProperties;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysExternalDatumSourceCatalog> _sysExternalDataSources;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysExternalTableCatalog> _sysExternalTables;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFilegroupCatalog> _sysFilegroups;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFiletableSystemDefinedObjectCatalog> _sysFiletableSystemDefinedObjects;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFiletableCatalog> _sysFiletables;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysForeignKeyColumnCatalog> _sysForeignKeyColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysForeignKeyCatalog> _sysForeignKeys;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFulltextCatalogCatalog> _sysFulltextCatalogs;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFulltextIndexColumnCatalog> _sysFulltextIndexColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFulltextIndexCatalog> _sysFulltextIndexes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFulltextStoplistCatalog> _sysFulltextStoplists;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysFunctionOrderColumnCatalog> _sysFunctionOrderColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysHashIndexCatalog> _sysHashIndexes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysIdentityColumnCatalog> _sysIdentityColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysIndexColumnCatalog> _sysIndexColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysIndexCatalog> _sysIndexes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysInternalTableCatalog> _sysInternalTables;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysKeyConstraintCatalog> _sysKeyConstraints;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysKeyEncryptionCatalog> _sysKeyEncryptions;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysMaskedColumnCatalog> _sysMaskedColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysNumberedProcedureParameterCatalog> _sysNumberedProcedureParameters;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysNumberedProcedureCatalog> _sysNumberedProcedures;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysObjectCatalog> _sysObjects;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysParameterCatalog> _sysParameters;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPartitionFunctionCatalog> _sysPartitionFunctions;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPartitionParameterCatalog> _sysPartitionParameters;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPartitionRangeValueCatalog> _sysPartitionRangeValues;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPartitionSchemeCatalog> _sysPartitionSchemes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPartitionCatalog> _sysPartitions;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysPeriodCatalog> _sysPeriods;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysProcedureCatalog> _sysProcedures;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysRegisteredSearchPropertyCatalog> _sysRegisteredSearchProperties;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysRegisteredSearchPropertyListCatalog> _sysRegisteredSearchPropertyLists;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysRemoteServiceBindingCatalog> _sysRemoteServiceBindings;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysRouteCatalog> _sysRoutes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSchemaCatalog> _sysSchemas;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSecurityPolicyCatalog> _sysSecurityPolicies;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSecurityPredicateCatalog> _sysSecurityPredicates;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSelectiveXmlIndexNamespaceCatalog> _sysSelectiveXmlIndexNamespaces;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSelectiveXmlIndexPathCatalog> _sysSelectiveXmlIndexPaths;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSequenceCatalog> _sysSequences;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceContractMessageUsageCatalog> _sysServiceContractMessageUsages;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceContractUsageCatalog> _sysServiceContractUsages;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceContractCatalog> _sysServiceContracts;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceMessageTypeCatalog> _sysServiceMessageTypes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceQueueCatalog> _sysServiceQueues;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysServiceCatalog> _sysServices;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSpatialIndexTessellationCatalog> _sysSpatialIndexTessellations;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSpatialIndexCatalog> _sysSpatialIndexes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSqlModuleCatalog> _sysSqlModules;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysStatCatalog> _sysStats;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysStatColumnCatalog> _sysStatsColumns;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSymmetricKeyCatalog> _sysSymmetricKeys;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysSynonymCatalog> _sysSynonyms;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysTableTypeCatalog> _sysTableTypes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysTableCatalog> _sysTables;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysTriggerEventCatalog> _sysTriggerEvents;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysTriggerCatalog> _sysTriggers;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysTypeCatalog> _sysTypes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysViewCatalog> _sysViews;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysXmlIndexCatalog> _sysXmlIndexes;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysXmlSchemaCollectionCatalog> _sysXmlSchemaCollections;
        
        private Microsoft.EntityFrameworkCore.DbSet<SysColumnMasterKeyDefinitionCatalog> _sysColumnMasterKeyDefinitions;
        
        partial void SetupSqliteFunctions();
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAllColumnCatalog> SysAllColumns
        {
            get
            {
                return this._sysAllColumns;
            }
            set
            {
                this._sysAllColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAllObjectCatalog> SysAllObjects
        {
            get
            {
                return this._sysAllObjects;
            }
            set
            {
                this._sysAllObjects = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAllViewCatalog> SysAllViews
        {
            get
            {
                return this._sysAllViews;
            }
            set
            {
                this._sysAllViews = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAssemblyCatalog> SysAssemblies
        {
            get
            {
                return this._sysAssemblies;
            }
            set
            {
                this._sysAssemblies = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAssemblyFileCatalog> SysAssemblyFiles
        {
            get
            {
                return this._sysAssemblyFiles;
            }
            set
            {
                this._sysAssemblyFiles = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAssemblyModuleCatalog> SysAssemblyModules
        {
            get
            {
                return this._sysAssemblyModules;
            }
            set
            {
                this._sysAssemblyModules = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAssemblyTypeCatalog> SysAssemblyTypes
        {
            get
            {
                return this._sysAssemblyTypes;
            }
            set
            {
                this._sysAssemblyTypes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysAsymmetricKeyCatalog> SysAsymmetricKeys
        {
            get
            {
                return this._sysAsymmetricKeys;
            }
            set
            {
                this._sysAsymmetricKeys = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysCertificateCatalog> SysCertificates
        {
            get
            {
                return this._sysCertificates;
            }
            set
            {
                this._sysCertificates = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysChangeTrackingDatabaseCatalog> SysChangeTrackingDatabases
        {
            get
            {
                return this._sysChangeTrackingDatabases;
            }
            set
            {
                this._sysChangeTrackingDatabases = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysChangeTrackingTableCatalog> SysChangeTrackingTables
        {
            get
            {
                return this._sysChangeTrackingTables;
            }
            set
            {
                this._sysChangeTrackingTables = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysCheckConstraintCatalog> SysCheckConstraints
        {
            get
            {
                return this._sysCheckConstraints;
            }
            set
            {
                this._sysCheckConstraints = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysColumnEncryptionKeyValueCatalog> SysColumnEncryptionKeyValues
        {
            get
            {
                return this._sysColumnEncryptionKeyValues;
            }
            set
            {
                this._sysColumnEncryptionKeyValues = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysColumnEncryptionKeyCatalog> SysColumnEncryptionKeys
        {
            get
            {
                return this._sysColumnEncryptionKeys;
            }
            set
            {
                this._sysColumnEncryptionKeys = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysColumnCatalog> SysColumns
        {
            get
            {
                return this._sysColumns;
            }
            set
            {
                this._sysColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysComputedColumnCatalog> SysComputedColumns
        {
            get
            {
                return this._sysComputedColumns;
            }
            set
            {
                this._sysComputedColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysConversationPriorityCatalog> SysConversationPriorities
        {
            get
            {
                return this._sysConversationPriorities;
            }
            set
            {
                this._sysConversationPriorities = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysCryptPropertyCatalog> SysCryptProperties
        {
            get
            {
                return this._sysCryptProperties;
            }
            set
            {
                this._sysCryptProperties = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatumSpaceCatalog> SysDataSpaces
        {
            get
            {
                return this._sysDataSpaces;
            }
            set
            {
                this._sysDataSpaces = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseFileCatalog> SysDatabaseFiles
        {
            get
            {
                return this._sysDatabaseFiles;
            }
            set
            {
                this._sysDatabaseFiles = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseFilestreamOptionCatalog> SysDatabaseFilestreamOptions
        {
            get
            {
                return this._sysDatabaseFilestreamOptions;
            }
            set
            {
                this._sysDatabaseFilestreamOptions = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabasePrincipalCatalog> SysDatabasePrincipals
        {
            get
            {
                return this._sysDatabasePrincipals;
            }
            set
            {
                this._sysDatabasePrincipals = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseQueryStoreOptionCatalog> SysDatabaseQueryStoreOptions
        {
            get
            {
                return this._sysDatabaseQueryStoreOptions;
            }
            set
            {
                this._sysDatabaseQueryStoreOptions = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseRoleMemberCatalog> SysDatabaseRoleMembers
        {
            get
            {
                return this._sysDatabaseRoleMembers;
            }
            set
            {
                this._sysDatabaseRoleMembers = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseScopedConfigurationCatalog> SysDatabaseScopedConfigurations
        {
            get
            {
                return this._sysDatabaseScopedConfigurations;
            }
            set
            {
                this._sysDatabaseScopedConfigurations = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseScopedCredentialCatalog> SysDatabaseScopedCredentials
        {
            get
            {
                return this._sysDatabaseScopedCredentials;
            }
            set
            {
                this._sysDatabaseScopedCredentials = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDatabaseCatalog> SysDatabases
        {
            get
            {
                return this._sysDatabases;
            }
            set
            {
                this._sysDatabases = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDefaultConstraintCatalog> SysDefaultConstraints
        {
            get
            {
                return this._sysDefaultConstraints;
            }
            set
            {
                this._sysDefaultConstraints = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysDestinationDatumSpaceCatalog> SysDestinationDataSpaces
        {
            get
            {
                return this._sysDestinationDataSpaces;
            }
            set
            {
                this._sysDestinationDataSpaces = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysEventNotificationCatalog> SysEventNotifications
        {
            get
            {
                return this._sysEventNotifications;
            }
            set
            {
                this._sysEventNotifications = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysEventCatalog> SysEvents
        {
            get
            {
                return this._sysEvents;
            }
            set
            {
                this._sysEvents = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysExtendedPropertyCatalog> SysExtendedProperties
        {
            get
            {
                return this._sysExtendedProperties;
            }
            set
            {
                this._sysExtendedProperties = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysExternalDatumSourceCatalog> SysExternalDataSources
        {
            get
            {
                return this._sysExternalDataSources;
            }
            set
            {
                this._sysExternalDataSources = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysExternalTableCatalog> SysExternalTables
        {
            get
            {
                return this._sysExternalTables;
            }
            set
            {
                this._sysExternalTables = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFilegroupCatalog> SysFilegroups
        {
            get
            {
                return this._sysFilegroups;
            }
            set
            {
                this._sysFilegroups = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFiletableSystemDefinedObjectCatalog> SysFiletableSystemDefinedObjects
        {
            get
            {
                return this._sysFiletableSystemDefinedObjects;
            }
            set
            {
                this._sysFiletableSystemDefinedObjects = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFiletableCatalog> SysFiletables
        {
            get
            {
                return this._sysFiletables;
            }
            set
            {
                this._sysFiletables = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysForeignKeyColumnCatalog> SysForeignKeyColumns
        {
            get
            {
                return this._sysForeignKeyColumns;
            }
            set
            {
                this._sysForeignKeyColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysForeignKeyCatalog> SysForeignKeys
        {
            get
            {
                return this._sysForeignKeys;
            }
            set
            {
                this._sysForeignKeys = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFulltextCatalogCatalog> SysFulltextCatalogs
        {
            get
            {
                return this._sysFulltextCatalogs;
            }
            set
            {
                this._sysFulltextCatalogs = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFulltextIndexColumnCatalog> SysFulltextIndexColumns
        {
            get
            {
                return this._sysFulltextIndexColumns;
            }
            set
            {
                this._sysFulltextIndexColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFulltextIndexCatalog> SysFulltextIndexes
        {
            get
            {
                return this._sysFulltextIndexes;
            }
            set
            {
                this._sysFulltextIndexes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFulltextStoplistCatalog> SysFulltextStoplists
        {
            get
            {
                return this._sysFulltextStoplists;
            }
            set
            {
                this._sysFulltextStoplists = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysFunctionOrderColumnCatalog> SysFunctionOrderColumns
        {
            get
            {
                return this._sysFunctionOrderColumns;
            }
            set
            {
                this._sysFunctionOrderColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysHashIndexCatalog> SysHashIndexes
        {
            get
            {
                return this._sysHashIndexes;
            }
            set
            {
                this._sysHashIndexes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysIdentityColumnCatalog> SysIdentityColumns
        {
            get
            {
                return this._sysIdentityColumns;
            }
            set
            {
                this._sysIdentityColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysIndexColumnCatalog> SysIndexColumns
        {
            get
            {
                return this._sysIndexColumns;
            }
            set
            {
                this._sysIndexColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysIndexCatalog> SysIndexes
        {
            get
            {
                return this._sysIndexes;
            }
            set
            {
                this._sysIndexes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysInternalTableCatalog> SysInternalTables
        {
            get
            {
                return this._sysInternalTables;
            }
            set
            {
                this._sysInternalTables = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysKeyConstraintCatalog> SysKeyConstraints
        {
            get
            {
                return this._sysKeyConstraints;
            }
            set
            {
                this._sysKeyConstraints = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysKeyEncryptionCatalog> SysKeyEncryptions
        {
            get
            {
                return this._sysKeyEncryptions;
            }
            set
            {
                this._sysKeyEncryptions = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysMaskedColumnCatalog> SysMaskedColumns
        {
            get
            {
                return this._sysMaskedColumns;
            }
            set
            {
                this._sysMaskedColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysNumberedProcedureParameterCatalog> SysNumberedProcedureParameters
        {
            get
            {
                return this._sysNumberedProcedureParameters;
            }
            set
            {
                this._sysNumberedProcedureParameters = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysNumberedProcedureCatalog> SysNumberedProcedures
        {
            get
            {
                return this._sysNumberedProcedures;
            }
            set
            {
                this._sysNumberedProcedures = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysObjectCatalog> SysObjects
        {
            get
            {
                return this._sysObjects;
            }
            set
            {
                this._sysObjects = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysParameterCatalog> SysParameters
        {
            get
            {
                return this._sysParameters;
            }
            set
            {
                this._sysParameters = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPartitionFunctionCatalog> SysPartitionFunctions
        {
            get
            {
                return this._sysPartitionFunctions;
            }
            set
            {
                this._sysPartitionFunctions = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPartitionParameterCatalog> SysPartitionParameters
        {
            get
            {
                return this._sysPartitionParameters;
            }
            set
            {
                this._sysPartitionParameters = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPartitionRangeValueCatalog> SysPartitionRangeValues
        {
            get
            {
                return this._sysPartitionRangeValues;
            }
            set
            {
                this._sysPartitionRangeValues = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPartitionSchemeCatalog> SysPartitionSchemes
        {
            get
            {
                return this._sysPartitionSchemes;
            }
            set
            {
                this._sysPartitionSchemes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPartitionCatalog> SysPartitions
        {
            get
            {
                return this._sysPartitions;
            }
            set
            {
                this._sysPartitions = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysPeriodCatalog> SysPeriods
        {
            get
            {
                return this._sysPeriods;
            }
            set
            {
                this._sysPeriods = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysProcedureCatalog> SysProcedures
        {
            get
            {
                return this._sysProcedures;
            }
            set
            {
                this._sysProcedures = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysRegisteredSearchPropertyCatalog> SysRegisteredSearchProperties
        {
            get
            {
                return this._sysRegisteredSearchProperties;
            }
            set
            {
                this._sysRegisteredSearchProperties = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysRegisteredSearchPropertyListCatalog> SysRegisteredSearchPropertyLists
        {
            get
            {
                return this._sysRegisteredSearchPropertyLists;
            }
            set
            {
                this._sysRegisteredSearchPropertyLists = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysRemoteServiceBindingCatalog> SysRemoteServiceBindings
        {
            get
            {
                return this._sysRemoteServiceBindings;
            }
            set
            {
                this._sysRemoteServiceBindings = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysRouteCatalog> SysRoutes
        {
            get
            {
                return this._sysRoutes;
            }
            set
            {
                this._sysRoutes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSchemaCatalog> SysSchemas
        {
            get
            {
                return this._sysSchemas;
            }
            set
            {
                this._sysSchemas = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSecurityPolicyCatalog> SysSecurityPolicies
        {
            get
            {
                return this._sysSecurityPolicies;
            }
            set
            {
                this._sysSecurityPolicies = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSecurityPredicateCatalog> SysSecurityPredicates
        {
            get
            {
                return this._sysSecurityPredicates;
            }
            set
            {
                this._sysSecurityPredicates = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSelectiveXmlIndexNamespaceCatalog> SysSelectiveXmlIndexNamespaces
        {
            get
            {
                return this._sysSelectiveXmlIndexNamespaces;
            }
            set
            {
                this._sysSelectiveXmlIndexNamespaces = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSelectiveXmlIndexPathCatalog> SysSelectiveXmlIndexPaths
        {
            get
            {
                return this._sysSelectiveXmlIndexPaths;
            }
            set
            {
                this._sysSelectiveXmlIndexPaths = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSequenceCatalog> SysSequences
        {
            get
            {
                return this._sysSequences;
            }
            set
            {
                this._sysSequences = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceContractMessageUsageCatalog> SysServiceContractMessageUsages
        {
            get
            {
                return this._sysServiceContractMessageUsages;
            }
            set
            {
                this._sysServiceContractMessageUsages = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceContractUsageCatalog> SysServiceContractUsages
        {
            get
            {
                return this._sysServiceContractUsages;
            }
            set
            {
                this._sysServiceContractUsages = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceContractCatalog> SysServiceContracts
        {
            get
            {
                return this._sysServiceContracts;
            }
            set
            {
                this._sysServiceContracts = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceMessageTypeCatalog> SysServiceMessageTypes
        {
            get
            {
                return this._sysServiceMessageTypes;
            }
            set
            {
                this._sysServiceMessageTypes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceQueueCatalog> SysServiceQueues
        {
            get
            {
                return this._sysServiceQueues;
            }
            set
            {
                this._sysServiceQueues = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysServiceCatalog> SysServices
        {
            get
            {
                return this._sysServices;
            }
            set
            {
                this._sysServices = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSpatialIndexTessellationCatalog> SysSpatialIndexTessellations
        {
            get
            {
                return this._sysSpatialIndexTessellations;
            }
            set
            {
                this._sysSpatialIndexTessellations = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSpatialIndexCatalog> SysSpatialIndexes
        {
            get
            {
                return this._sysSpatialIndexes;
            }
            set
            {
                this._sysSpatialIndexes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSqlModuleCatalog> SysSqlModules
        {
            get
            {
                return this._sysSqlModules;
            }
            set
            {
                this._sysSqlModules = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysStatCatalog> SysStats
        {
            get
            {
                return this._sysStats;
            }
            set
            {
                this._sysStats = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysStatColumnCatalog> SysStatsColumns
        {
            get
            {
                return this._sysStatsColumns;
            }
            set
            {
                this._sysStatsColumns = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSymmetricKeyCatalog> SysSymmetricKeys
        {
            get
            {
                return this._sysSymmetricKeys;
            }
            set
            {
                this._sysSymmetricKeys = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysSynonymCatalog> SysSynonyms
        {
            get
            {
                return this._sysSynonyms;
            }
            set
            {
                this._sysSynonyms = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysTableTypeCatalog> SysTableTypes
        {
            get
            {
                return this._sysTableTypes;
            }
            set
            {
                this._sysTableTypes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysTableCatalog> SysTables
        {
            get
            {
                return this._sysTables;
            }
            set
            {
                this._sysTables = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysTriggerEventCatalog> SysTriggerEvents
        {
            get
            {
                return this._sysTriggerEvents;
            }
            set
            {
                this._sysTriggerEvents = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysTriggerCatalog> SysTriggers
        {
            get
            {
                return this._sysTriggers;
            }
            set
            {
                this._sysTriggers = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysTypeCatalog> SysTypes
        {
            get
            {
                return this._sysTypes;
            }
            set
            {
                this._sysTypes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysViewCatalog> SysViews
        {
            get
            {
                return this._sysViews;
            }
            set
            {
                this._sysViews = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysXmlIndexCatalog> SysXmlIndexes
        {
            get
            {
                return this._sysXmlIndexes;
            }
            set
            {
                this._sysXmlIndexes = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysXmlSchemaCollectionCatalog> SysXmlSchemaCollections
        {
            get
            {
                return this._sysXmlSchemaCollections;
            }
            set
            {
                this._sysXmlSchemaCollections = value;
            }
        }
        
        public Microsoft.EntityFrameworkCore.DbSet<SysColumnMasterKeyDefinitionCatalog> SysColumnMasterKeyDefinitions
        {
            get
            {
                return this._sysColumnMasterKeyDefinitions;
            }
            set
            {
                this._sysColumnMasterKeyDefinitions = value;
            }
        }
        
        protected override void OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(this._connectionString);
        }
        
        private void InitializeSQLite()
        {
            this._connectionString = string.Format("DataSource=file:{0};Mode=Memory;Cache=Shared", this._connectionId);
            this._sqliteConnection = new Microsoft.Data.Sqlite.SqliteConnection(this._connectionString);
            this._sqliteConnection.Open();
            Microsoft.Data.Sqlite.SqliteCommand command = null;
            try
            {
                command = this._sqliteConnection.CreateCommand();

                command.CommandText = @"create table sys_all_columns (object_id INTEGER,name TEXT,column_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_ansi_padded NUMERIC,is_rowguidcol NUMERIC,is_identity NUMERIC,is_computed NUMERIC,is_filestream NUMERIC,is_replicated NUMERIC,is_non_sql_subscribed NUMERIC,is_merge_published NUMERIC,is_dts_replicated NUMERIC,is_xml_document NUMERIC,xml_collection_id INTEGER,default_object_id INTEGER,rule_object_id INTEGER,is_sparse NUMERIC,is_column_set NUMERIC,generated_always_type INTEGER,generated_always_type_desc TEXT,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT,is_hidden NUMERIC,is_masked NUMERIC,graph_type INTEGER,graph_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_all_objects (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_all_views (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,is_replicated NUMERIC,has_replication_filter NUMERIC,has_opaque_metadata NUMERIC,has_unchecked_assembly_data NUMERIC,with_check_option NUMERIC,is_date_correlation_view NUMERIC,is_tracked_by_cdc NUMERIC,has_snapshot NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_assemblies (name TEXT,principal_id INTEGER,assembly_id INTEGER,c" +
                    "lr_name TEXT,permission_set INTEGER,permission_set_desc TEXT,is_visible NUMERIC," +
                    "create_date STRING,modify_date STRING,is_user_defined NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_assembly_files (assembly_id INTEGER,name TEXT,file_id INTEGER,co" +
                    "ntent BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_assembly_modules (object_id INTEGER,assembly_id INTEGER,assembly" +
                    "_class TEXT,assembly_method TEXT,null_on_null_input NUMERIC,execute_as_principal" +
                    "_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_assembly_types (name TEXT,system_type_id INTEGER,user_type_id INTEGER,schema_id INTEGER,principal_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_user_defined NUMERIC,is_assembly_type NUMERIC,default_object_id INTEGER,rule_object_id INTEGER,assembly_id INTEGER,assembly_class TEXT,is_binary_ordered NUMERIC,is_fixed_length NUMERIC,prog_id TEXT,assembly_qualified_name TEXT,is_table_type NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_asymmetric_keys (name TEXT,principal_id INTEGER,asymmetric_key_id INTEGER,pvt_key_encryption_type TEXT,pvt_key_encryption_type_desc TEXT,thumbprint BLOB,algorithm TEXT,algorithm_desc TEXT,key_length INTEGER,sid BLOB,string_sid TEXT,public_key BLOB,attested_by TEXT,provider_type TEXT,cryptographic_provider_guid BLOB,cryptographic_provider_algid BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_certificates (name TEXT,certificate_id INTEGER,principal_id INTEGER,pvt_key_encryption_type TEXT,pvt_key_encryption_type_desc TEXT,is_active_for_begin_dialog NUMERIC,issuer_name TEXT,cert_serial_number TEXT,sid BLOB,string_sid TEXT,subject TEXT,expiry_date STRING,start_date STRING,thumbprint BLOB,attested_by TEXT,pvt_key_last_backup_date STRING,key_length INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_change_tracking_databases (database_id INTEGER,is_auto_cleanup_o" +
                    "n INTEGER,retention_period INTEGER,retention_period_units INTEGER,retention_peri" +
                    "od_units_desc TEXT,max_cleanup_version INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_change_tracking_tables (object_id INTEGER,is_track_columns_updat" +
                    "ed_on NUMERIC,min_valid_version INTEGER,begin_version INTEGER,cleanup_version IN" +
                    "TEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_check_constraints (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,is_disabled NUMERIC,is_not_for_replication NUMERIC,is_not_trusted NUMERIC,parent_column_id INTEGER,definition TEXT,uses_database_collation NUMERIC,is_system_named NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_column_encryption_key_values (column_encryption_key_id INTEGER,c" +
                    "olumn_master_key_id INTEGER,encrypted_value BLOB,encryption_algorithm_name TEXT)" +
                    "";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_column_encryption_keys (name TEXT,column_encryption_key_id INTEG" +
                    "ER,create_date STRING,modify_date STRING)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_columns (object_id INTEGER,name TEXT,column_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_ansi_padded NUMERIC,is_rowguidcol NUMERIC,is_identity NUMERIC,is_computed NUMERIC,is_filestream NUMERIC,is_replicated NUMERIC,is_non_sql_subscribed NUMERIC,is_merge_published NUMERIC,is_dts_replicated NUMERIC,is_xml_document NUMERIC,xml_collection_id INTEGER,default_object_id INTEGER,rule_object_id INTEGER,is_sparse NUMERIC,is_column_set NUMERIC,generated_always_type INTEGER,generated_always_type_desc TEXT,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT,is_hidden NUMERIC,is_masked NUMERIC,graph_type INTEGER,graph_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_computed_columns (object_id INTEGER,name TEXT,column_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_ansi_padded NUMERIC,is_rowguidcol NUMERIC,is_identity NUMERIC,is_filestream NUMERIC,is_replicated NUMERIC,is_non_sql_subscribed NUMERIC,is_merge_published NUMERIC,is_dts_replicated NUMERIC,is_xml_document NUMERIC,xml_collection_id INTEGER,default_object_id INTEGER,rule_object_id INTEGER,definition TEXT,uses_database_collation NUMERIC,is_persisted NUMERIC,is_computed NUMERIC,is_sparse NUMERIC,is_column_set NUMERIC,generated_always_type INTEGER,generated_always_type_desc TEXT,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT,is_hidden NUMERIC,is_masked NUMERIC,graph_type INTEGER,graph_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_conversation_priorities (priority_id INTEGER,name TEXT,service_c" +
                    "ontract_id INTEGER,local_service_id INTEGER,remote_service_name TEXT,priority IN" +
                    "TEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_crypt_properties (class INTEGER,class_desc TEXT,major_id INTEGER" +
                    ",thumbprint BLOB,crypt_type TEXT,crypt_type_desc TEXT,crypt_property BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_data_spaces (name TEXT,data_space_id INTEGER,type TEXT,type_desc" +
                    " TEXT,is_default NUMERIC,is_system NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_database_files (file_id INTEGER,file_guid BLOB,type INTEGER,type_desc TEXT,data_space_id INTEGER,name TEXT,physical_name TEXT,state INTEGER,state_desc TEXT,size INTEGER,max_size INTEGER,growth INTEGER,is_media_read_only NUMERIC,is_read_only NUMERIC,is_sparse NUMERIC,is_percent_growth NUMERIC,is_name_reserved NUMERIC,is_persistent_log_buffer NUMERIC,create_lsn REAL,drop_lsn REAL,read_only_lsn REAL,read_write_lsn REAL,differential_base_lsn REAL,differential_base_guid BLOB,differential_base_time STRING,redo_start_lsn REAL,redo_start_fork_guid BLOB,redo_target_lsn REAL,redo_target_fork_guid BLOB,backup_lsn REAL)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_database_filestream_options (database_id INTEGER,non_transacted_" +
                    "access INTEGER,non_transacted_access_desc TEXT,directory_name TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_database_principals (name TEXT,principal_id INTEGER,type TEXT,type_desc TEXT,default_schema_name TEXT,create_date STRING,modify_date STRING,owning_principal_id INTEGER,sid BLOB,is_fixed_role NUMERIC,authentication_type INTEGER,authentication_type_desc TEXT,default_language_name TEXT,default_language_lcid INTEGER,allow_encrypted_value_modifications NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_database_query_store_options (desired_state INTEGER,desired_state_desc TEXT,actual_state INTEGER,actual_state_desc TEXT,readonly_reason INTEGER,current_storage_size_mb INTEGER,flush_interval_seconds INTEGER,interval_length_minutes INTEGER,max_storage_size_mb INTEGER,stale_query_threshold_days INTEGER,max_plans_per_query INTEGER,query_capture_mode INTEGER,query_capture_mode_desc TEXT,size_based_cleanup_mode INTEGER,size_based_cleanup_mode_desc TEXT,wait_stats_capture_mode INTEGER,wait_stats_capture_mode_desc TEXT,actual_state_additional_info TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_database_role_members (role_principal_id INTEGER,member_principa" +
                    "l_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_database_scoped_configurations (configuration_id INTEGER,name TE" +
                    "XT,value BLOB,value_for_secondary BLOB,is_value_default NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_database_scoped_credentials (name TEXT,principal_id INTEGER,cred" +
                    "ential_id INTEGER,credential_identity TEXT,create_date STRING,modify_date STRING" +
                    ",target_type TEXT,target_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_databases (name TEXT,database_id INTEGER,source_database_id INTE" +
                    "GER,owner_sid BLOB,create_date STRING,compatibility_level INTEGER,collation_name" +
                    " TEXT,user_access INTEGER,user_access_desc TEXT,is_read_only NUMERIC,is_auto_clo" +
                    "se_on NUMERIC,is_auto_shrink_on NUMERIC,state INTEGER,state_desc TEXT,is_in_stan" +
                    "dby NUMERIC,is_cleanly_shutdown NUMERIC,is_supplemental_logging_enabled NUMERIC," +
                    "snapshot_isolation_state INTEGER,snapshot_isolation_state_desc TEXT,is_read_comm" +
                    "itted_snapshot_on NUMERIC,recovery_model INTEGER,recovery_model_desc TEXT,page_v" +
                    "erify_option INTEGER,page_verify_option_desc TEXT,is_auto_create_stats_on NUMERI" +
                    "C,is_auto_create_stats_incremental_on NUMERIC,is_auto_update_stats_on NUMERIC,is" +
                    "_auto_update_stats_async_on NUMERIC,is_ansi_null_default_on NUMERIC,is_ansi_null" +
                    "s_on NUMERIC,is_ansi_padding_on NUMERIC,is_ansi_warnings_on NUMERIC,is_arithabor" +
                    "t_on NUMERIC,is_concat_null_yields_null_on NUMERIC,is_numeric_roundabort_on NUME" +
                    "RIC,is_quoted_identifier_on NUMERIC,is_recursive_triggers_on NUMERIC,is_cursor_c" +
                    "lose_on_commit_on NUMERIC,is_local_cursor_default NUMERIC,is_fulltext_enabled NU" +
                    "MERIC,is_trustworthy_on NUMERIC,is_db_chaining_on NUMERIC,is_parameterization_fo" +
                    "rced NUMERIC,is_master_key_encrypted_by_server NUMERIC,is_query_store_on NUMERIC" +
                    ",is_published NUMERIC,is_subscribed NUMERIC,is_merge_published NUMERIC,is_distri" +
                    "butor NUMERIC,is_sync_with_backup NUMERIC,service_broker_guid BLOB,is_broker_ena" +
                    "bled NUMERIC,log_reuse_wait INTEGER,log_reuse_wait_desc TEXT,is_date_correlation" +
                    "_on NUMERIC,is_cdc_enabled NUMERIC,is_encrypted NUMERIC,is_honor_broker_priority" +
                    "_on NUMERIC,replica_id BLOB,group_database_id BLOB,resource_pool_id INTEGER,defa" +
                    "ult_language_lcid INTEGER,default_language_name TEXT,default_fulltext_language_l" +
                    "cid INTEGER,default_fulltext_language_name TEXT,is_nested_triggers_on NUMERIC,is" +
                    "_transform_noise_words_on NUMERIC,two_digit_year_cutoff INTEGER,containment INTE" +
                    "GER,containment_desc TEXT,target_recovery_time_in_seconds INTEGER,delayed_durabi" +
                    "lity INTEGER,delayed_durability_desc TEXT,is_memory_optimized_elevate_to_snapsho" +
                    "t_on NUMERIC,is_federation_member NUMERIC,is_remote_data_archive_enabled NUMERIC" +
                    ",is_mixed_page_allocation_on NUMERIC,is_temporal_history_retention_enabled NUMER" +
                    "IC,catalog_collation_type INTEGER,catalog_collation_type_desc TEXT,physical_data" +
                    "base_name TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_default_constraints (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,parent_column_id INTEGER,definition TEXT,is_system_named NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_destination_data_spaces (partition_scheme_id INTEGER,destination" +
                    "_id INTEGER,data_space_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_event_notifications (name TEXT,object_id INTEGER,parent_class IN" +
                    "TEGER,parent_class_desc TEXT,parent_id INTEGER,create_date STRING,modify_date ST" +
                    "RING,service_name TEXT,broker_instance TEXT,creator_sid BLOB,principal_id INTEGE" +
                    "R)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_events (object_id INTEGER,type INTEGER,type_desc TEXT,is_trigger" +
                    "_event NUMERIC,event_group_type INTEGER,event_group_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_extended_properties (class INTEGER,class_desc TEXT,major_id INTE" +
                    "GER,minor_id INTEGER,name TEXT,value BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_external_data_sources (data_source_id INTEGER,name TEXT,location" +
                    " TEXT,type_desc TEXT,type INTEGER,resource_manager_location TEXT,credential_id I" +
                    "NTEGER,database_name TEXT,shard_map_name TEXT,connection_options TEXT,pushdown T" +
                    "EXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_external_tables (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,max_column_id_used INTEGER,uses_ansi_nulls NUMERIC,data_source_id INTEGER,file_format_id INTEGER,location TEXT,reject_type TEXT,reject_value REAL,reject_sample_value REAL,distribution_type INTEGER,distribution_desc TEXT,sharding_col_id INTEGER,remote_schema_name TEXT,remote_object_name TEXT,rejected_row_location TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_filegroups (name TEXT,data_space_id INTEGER,type TEXT,type_desc " +
                    "TEXT,is_default NUMERIC,is_system NUMERIC,filegroup_guid BLOB,log_filegroup_id I" +
                    "NTEGER,is_read_only NUMERIC,is_autogrow_all_files NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_filetable_system_defined_objects (object_id INTEGER,parent_objec" +
                    "t_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_filetables (object_id INTEGER,is_enabled NUMERIC,directory_name " +
                    "TEXT,filename_collation_id INTEGER,filename_collation_name TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_foreign_key_columns (constraint_object_id INTEGER,constraint_col" +
                    "umn_id INTEGER,parent_object_id INTEGER,parent_column_id INTEGER,referenced_obje" +
                    "ct_id INTEGER,referenced_column_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_foreign_keys (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,referenced_object_id INTEGER,key_index_id INTEGER,is_disabled NUMERIC,is_not_for_replication NUMERIC,is_not_trusted NUMERIC,delete_referential_action INTEGER,delete_referential_action_desc TEXT,update_referential_action INTEGER,update_referential_action_desc TEXT,is_system_named NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_fulltext_catalogs (fulltext_catalog_id INTEGER,name TEXT,path TE" +
                    "XT,is_default NUMERIC,is_accent_sensitivity_on NUMERIC,data_space_id INTEGER,fil" +
                    "e_id INTEGER,principal_id INTEGER,is_importing NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_fulltext_index_columns (object_id INTEGER,column_id INTEGER,type" +
                    "_column_id INTEGER,language_id INTEGER,statistical_semantics INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_fulltext_indexes (object_id INTEGER,unique_index_id INTEGER,fulltext_catalog_id INTEGER,is_enabled NUMERIC,change_tracking_state TEXT,change_tracking_state_desc TEXT,has_crawl_completed NUMERIC,crawl_type TEXT,crawl_type_desc TEXT,crawl_start_date STRING,crawl_end_date STRING,incremental_timestamp BLOB,stoplist_id INTEGER,property_list_id INTEGER,data_space_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_fulltext_stoplists (stoplist_id INTEGER,name TEXT,create_date ST" +
                    "RING,modify_date STRING,principal_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_function_order_columns (object_id INTEGER,order_column_id INTEGE" +
                    "R,column_id INTEGER,is_descending NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_hash_indexes (object_id INTEGER,name TEXT,index_id INTEGER,type INTEGER,type_desc TEXT,is_unique NUMERIC,data_space_id INTEGER,ignore_dup_key NUMERIC,is_primary_key NUMERIC,is_unique_constraint NUMERIC,fill_factor INTEGER,is_padded NUMERIC,is_disabled NUMERIC,is_hypothetical NUMERIC,is_ignored_in_optimization NUMERIC,allow_row_locks NUMERIC,allow_page_locks NUMERIC,has_filter NUMERIC,filter_definition TEXT,bucket_count INTEGER,auto_created NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_identity_columns (object_id INTEGER,name TEXT,column_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_ansi_padded NUMERIC,is_rowguidcol NUMERIC,is_identity NUMERIC,is_filestream NUMERIC,is_replicated NUMERIC,is_non_sql_subscribed NUMERIC,is_merge_published NUMERIC,is_dts_replicated NUMERIC,is_xml_document NUMERIC,xml_collection_id INTEGER,default_object_id INTEGER,rule_object_id INTEGER,seed_value BLOB,increment_value BLOB,last_value BLOB,is_not_for_replication NUMERIC,is_computed NUMERIC,is_sparse NUMERIC,is_column_set NUMERIC,generated_always_type INTEGER,generated_always_type_desc TEXT,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT,is_hidden NUMERIC,is_masked NUMERIC,graph_type INTEGER,graph_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_index_columns (object_id INTEGER,index_id INTEGER,index_column_i" +
                    "d INTEGER,column_id INTEGER,key_ordinal INTEGER,partition_ordinal INTEGER,is_des" +
                    "cending_key NUMERIC,is_included_column NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_indexes (object_id INTEGER,name TEXT,index_id INTEGER,type INTEGER,type_desc TEXT,is_unique NUMERIC,data_space_id INTEGER,ignore_dup_key NUMERIC,is_primary_key NUMERIC,is_unique_constraint NUMERIC,fill_factor INTEGER,is_padded NUMERIC,is_disabled NUMERIC,is_hypothetical NUMERIC,is_ignored_in_optimization NUMERIC,allow_row_locks NUMERIC,allow_page_locks NUMERIC,has_filter NUMERIC,filter_definition TEXT,compression_delay INTEGER,suppress_dup_key_messages NUMERIC,auto_created NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_internal_tables (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,internal_type INTEGER,internal_type_desc TEXT,parent_id INTEGER,parent_minor_id INTEGER,lob_data_space_id INTEGER,filestream_data_space_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_key_constraints (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,unique_index_id INTEGER,is_system_named NUMERIC,is_enforced NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_key_encryptions (key_id INTEGER,thumbprint BLOB,crypt_type TEXT," +
                    "crypt_type_desc TEXT,crypt_property BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_masked_columns (object_id INTEGER,name TEXT,column_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_ansi_padded NUMERIC,is_rowguidcol NUMERIC,is_identity NUMERIC,is_filestream NUMERIC,is_replicated NUMERIC,is_non_sql_subscribed NUMERIC,is_merge_published NUMERIC,is_dts_replicated NUMERIC,is_xml_document NUMERIC,xml_collection_id INTEGER,default_object_id INTEGER,rule_object_id INTEGER,definition TEXT,uses_database_collation NUMERIC,is_persisted NUMERIC,is_computed NUMERIC,is_sparse NUMERIC,is_column_set NUMERIC,generated_always_type INTEGER,generated_always_type_desc TEXT,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT,is_hidden NUMERIC,is_masked NUMERIC,masking_function TEXT,graph_type INTEGER,graph_type_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_numbered_procedure_parameters (object_id INTEGER,procedure_number INTEGER,name TEXT,parameter_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,is_output NUMERIC,is_cursor_ref NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_numbered_procedures (object_id INTEGER,procedure_number INTEGER," +
                    "definition TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_objects (name TEXT,object_id INTEGER,principal_id INTEGER,schema" +
                    "_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING" +
                    ",modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_publish" +
                    "ed NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_parameters (object_id INTEGER,name TEXT,parameter_id INTEGER,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,is_output NUMERIC,is_cursor_ref NUMERIC,has_default_value NUMERIC,is_xml_document NUMERIC,default_value BLOB,xml_collection_id INTEGER,is_readonly NUMERIC,is_nullable NUMERIC,encryption_type INTEGER,encryption_type_desc TEXT,encryption_algorithm_name TEXT,column_encryption_key_id INTEGER,column_encryption_key_database_name TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_partition_functions (name TEXT,function_id INTEGER,type TEXT,typ" +
                    "e_desc TEXT,fanout INTEGER,boundary_value_on_right NUMERIC,is_system NUMERIC,cre" +
                    "ate_date STRING,modify_date STRING)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_partition_parameters (function_id INTEGER,parameter_id INTEGER,s" +
                    "ystem_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collati" +
                    "on_name TEXT,user_type_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_partition_range_values (function_id INTEGER,boundary_id INTEGER," +
                    "parameter_id INTEGER,value BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_partition_schemes (name TEXT,data_space_id INTEGER,type TEXT,typ" +
                    "e_desc TEXT,is_default NUMERIC,is_system NUMERIC,function_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_partitions (partition_id INTEGER,object_id INTEGER,index_id INTE" +
                    "GER,partition_number INTEGER,hobt_id INTEGER,rows INTEGER,filestream_filegroup_i" +
                    "d INTEGER,data_compression INTEGER,data_compression_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_periods (name TEXT,period_type INTEGER,period_type_desc TEXT,obj" +
                    "ect_id INTEGER,start_column_id INTEGER,end_column_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_procedures (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,is_auto_executed NUMERIC,is_execution_replicated NUMERIC,is_repl_serializable_only NUMERIC,skips_repl_constraints NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_registered_search_properties (property_list_id INTEGER,property_" +
                    "id INTEGER,property_name TEXT,property_set_guid BLOB,property_int_id INTEGER,pro" +
                    "perty_description TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_registered_search_property_lists (property_list_id INTEGER,name " +
                    "TEXT,create_date STRING,modify_date STRING,principal_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_remote_service_bindings (name TEXT,remote_service_binding_id INT" +
                    "EGER,principal_id INTEGER,remote_service_name TEXT,service_contract_id INTEGER,r" +
                    "emote_principal_id INTEGER,is_anonymous_on NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_routes (name TEXT,route_id INTEGER,principal_id INTEGER,remote_s" +
                    "ervice_name TEXT,broker_instance TEXT,lifetime STRING,address TEXT,mirror_addres" +
                    "s TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_schemas (name TEXT,schema_id INTEGER,principal_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_security_policies (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_enabled NUMERIC,is_not_for_replication NUMERIC,uses_database_collation NUMERIC,is_schema_bound NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_security_predicates (object_id INTEGER,security_predicate_id INT" +
                    "EGER,target_object_id INTEGER,predicate_definition TEXT,predicate_type INTEGER,p" +
                    "redicate_type_desc TEXT,operation INTEGER,operation_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_selective_xml_index_namespaces (object_id INTEGER,index_id INTEG" +
                    "ER,is_default_uri NUMERIC,uri TEXT,prefix TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_selective_xml_index_paths (object_id INTEGER,index_id INTEGER,path_id INTEGER,path TEXT,name TEXT,path_type INTEGER,path_type_desc TEXT,xml_component_id INTEGER,xquery_type_description TEXT,is_xquery_type_inferred NUMERIC,xquery_max_length INTEGER,is_xquery_max_length_inferred NUMERIC,is_node NUMERIC,system_type_id INTEGER,user_type_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_singleton NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_sequences (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,start_value BLOB,increment BLOB,minimum_value BLOB,maximum_value BLOB,is_cycling NUMERIC,is_cached NUMERIC,cache_size INTEGER,system_type_id INTEGER,user_type_id INTEGER,precision INTEGER,scale INTEGER,current_value BLOB,is_exhausted NUMERIC,last_used_value BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_service_contract_message_usages (service_contract_id INTEGER,mes" +
                    "sage_type_id INTEGER,is_sent_by_initiator NUMERIC,is_sent_by_target NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_service_contract_usages (service_id INTEGER,service_contract_id " +
                    "INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_service_contracts (name TEXT,service_contract_id INTEGER,princip" +
                    "al_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_service_message_types (name TEXT,message_type_id INTEGER,princip" +
                    "al_id INTEGER,validation TEXT,validation_desc TEXT,xml_collection_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_service_queues (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,max_readers INTEGER,activation_procedure TEXT,execute_as_principal_id INTEGER,is_activation_enabled NUMERIC,is_receive_enabled NUMERIC,is_enqueue_enabled NUMERIC,is_retention_enabled NUMERIC,is_poison_message_handling_enabled NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_services (name TEXT,service_id INTEGER,principal_id INTEGER,serv" +
                    "ice_queue_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_spatial_index_tessellations (object_id INTEGER,index_id INTEGER,tessellation_scheme TEXT,bounding_box_xmin REAL,bounding_box_ymin REAL,bounding_box_xmax REAL,bounding_box_ymax REAL,level_1_grid INTEGER,level_1_grid_desc TEXT,level_2_grid INTEGER,level_2_grid_desc TEXT,level_3_grid INTEGER,level_3_grid_desc TEXT,level_4_grid INTEGER,level_4_grid_desc TEXT,cells_per_object INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_spatial_indexes (object_id INTEGER,name TEXT,index_id INTEGER,type INTEGER,type_desc TEXT,is_unique NUMERIC,data_space_id INTEGER,ignore_dup_key NUMERIC,is_primary_key NUMERIC,is_unique_constraint NUMERIC,fill_factor INTEGER,is_padded NUMERIC,is_disabled NUMERIC,is_hypothetical NUMERIC,is_ignored_in_optimization NUMERIC,allow_row_locks NUMERIC,allow_page_locks NUMERIC,spatial_index_type INTEGER,spatial_index_type_desc TEXT,tessellation_scheme TEXT,has_filter NUMERIC,filter_definition TEXT,auto_created NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_sql_modules (object_id INTEGER,definition TEXT,uses_ansi_nulls NUMERIC,uses_quoted_identifier NUMERIC,is_schema_bound NUMERIC,uses_database_collation NUMERIC,is_recompiled NUMERIC,null_on_null_input NUMERIC,execute_as_principal_id INTEGER,uses_native_compilation NUMERIC,inline_type NUMERIC,is_inlineable NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_stats (object_id INTEGER,name TEXT,stats_id INTEGER,auto_created NUMERIC,user_created NUMERIC,no_recompute NUMERIC,has_filter NUMERIC,filter_definition TEXT,is_temporary NUMERIC,is_incremental NUMERIC,has_persisted_sample NUMERIC,stats_generation_method INTEGER,stats_generation_method_desc TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_stats_columns (object_id INTEGER,stats_id INTEGER,stats_column_i" +
                    "d INTEGER,column_id INTEGER)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_symmetric_keys (name TEXT,principal_id INTEGER,symmetric_key_id INTEGER,key_length INTEGER,key_algorithm TEXT,algorithm_desc TEXT,create_date STRING,modify_date STRING,key_guid BLOB,key_thumbprint BLOB,provider_type TEXT,cryptographic_provider_guid BLOB,cryptographic_provider_algid BLOB)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_synonyms (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,base_object_name TEXT)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_table_types (name TEXT,system_type_id INTEGER,user_type_id INTEGER,schema_id INTEGER,principal_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_user_defined NUMERIC,is_assembly_type NUMERIC,default_object_id INTEGER,rule_object_id INTEGER,is_table_type NUMERIC,type_table_object_id INTEGER,is_memory_optimized NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_tables (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,lob_data_space_id INTEGER,filestream_data_space_id INTEGER,max_column_id_used INTEGER,lock_on_bulk_load NUMERIC,uses_ansi_nulls NUMERIC,is_replicated NUMERIC,has_replication_filter NUMERIC,is_merge_published NUMERIC,is_sync_tran_subscribed NUMERIC,has_unchecked_assembly_data NUMERIC,text_in_row_limit INTEGER,large_value_types_out_of_row NUMERIC,is_tracked_by_cdc NUMERIC,lock_escalation INTEGER,lock_escalation_desc TEXT,is_filetable NUMERIC,is_memory_optimized NUMERIC,durability INTEGER,durability_desc TEXT,temporal_type INTEGER,temporal_type_desc TEXT,history_table_id INTEGER,is_remote_data_archive_enabled NUMERIC,is_external NUMERIC,history_retention_period INTEGER,history_retention_period_unit INTEGER,history_retention_period_unit_desc TEXT,is_node NUMERIC,is_edge NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_trigger_events (object_id INTEGER,type INTEGER,type_desc TEXT,is" +
                    "_first NUMERIC,is_last NUMERIC,event_group_type INTEGER,event_group_type_desc TE" +
                    "XT,is_trigger_event NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_triggers (name TEXT,object_id INTEGER,parent_class INTEGER,parent_class_desc TEXT,parent_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_disabled NUMERIC,is_not_for_replication NUMERIC,is_instead_of_trigger NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_types (name TEXT,system_type_id INTEGER,user_type_id INTEGER,schema_id INTEGER,principal_id INTEGER,max_length INTEGER,precision INTEGER,scale INTEGER,collation_name TEXT,is_nullable NUMERIC,is_user_defined NUMERIC,is_assembly_type NUMERIC,default_object_id INTEGER,rule_object_id INTEGER,is_table_type NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_views (name TEXT,object_id INTEGER,principal_id INTEGER,schema_id INTEGER,parent_object_id INTEGER,type TEXT,type_desc TEXT,create_date STRING,modify_date STRING,is_ms_shipped NUMERIC,is_published NUMERIC,is_schema_published NUMERIC,is_replicated NUMERIC,has_replication_filter NUMERIC,has_opaque_metadata NUMERIC,has_unchecked_assembly_data NUMERIC,with_check_option NUMERIC,is_date_correlation_view NUMERIC,is_tracked_by_cdc NUMERIC,has_snapshot NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = @"create table sys_xml_indexes (object_id INTEGER,name TEXT,index_id INTEGER,type INTEGER,type_desc TEXT,is_unique NUMERIC,data_space_id INTEGER,ignore_dup_key NUMERIC,is_primary_key NUMERIC,is_unique_constraint NUMERIC,fill_factor INTEGER,is_padded NUMERIC,is_disabled NUMERIC,is_hypothetical NUMERIC,is_ignored_in_optimization NUMERIC,allow_row_locks NUMERIC,allow_page_locks NUMERIC,using_xml_index_id INTEGER,secondary_type TEXT,secondary_type_desc TEXT,has_filter NUMERIC,filter_definition TEXT,xml_index_type INTEGER,xml_index_type_description TEXT,path_id INTEGER,auto_created NUMERIC)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_xml_schema_collections (xml_collection_id INTEGER,schema_id INTE" +
                    "GER,principal_id INTEGER,name TEXT,create_date STRING,modify_date STRING)";
                command.ExecuteNonQuery();

                command.CommandText = "create table sys_column_master_key_definitions (name TEXT,column_master_key_defin" +
                    "ition_id INTEGER,create_date STRING,modify_date STRING,key_store_provider_name T" +
                    "EXT,key_path TEXT)";
                command.ExecuteNonQuery();
            }
            finally
            {
                if ((command != null))
                {
                    command.Dispose();
                }
            }
        }
        
        private void LoadAzure(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.column_encryption_key_values;select * from sys.column_encry" +
                        "ption_keys;select * from sys.column_master_key_definitions;select * from sys.col" +
                        "umns;select * from sys.computed_columns;select * from sys.conversation_prioritie" +
                        "s;select * from sys.crypt_properties;select * from sys.data_spaces;select * from" +
                        " sys.database_files;select * from sys.database_principals;select * from sys.data" +
                        "base_query_store_options;select * from sys.database_role_members;select * from s" +
                        "ys.database_scoped_configurations;select * from sys.database_scoped_credentials;" +
                        "select * from sys.databases;select * from sys.default_constraints;select * from " +
                        "sys.destination_data_spaces;select * from sys.event_notifications;select * from " +
                        "sys.events;select * from sys.extended_properties;select * from sys.external_data" +
                        "_sources;select * from sys.external_tables;select * from sys.filegroups;select *" +
                        " from sys.filetable_system_defined_objects;select * from sys.filetables;select *" +
                        " from sys.foreign_key_columns;select * from sys.foreign_keys;select * from sys.f" +
                        "ulltext_catalogs;select * from sys.fulltext_index_columns;select * from sys.full" +
                        "text_indexes;select * from sys.fulltext_stoplists;select * from sys.function_ord" +
                        "er_columns;select * from sys.hash_indexes;select * from sys.identity_columns;sel" +
                        "ect * from sys.index_columns;select * from sys.indexes;select * from sys.interna" +
                        "l_tables;select * from sys.key_constraints;select * from sys.key_encryptions;sel" +
                        "ect * from sys.masked_columns;select * from sys.numbered_procedure_parameters;se" +
                        "lect * from sys.numbered_procedures;select * from sys.objects;select * from sys." +
                        "parameters;select * from sys.partition_functions;select * from sys.partition_par" +
                        "ameters;select * from sys.partition_range_values;select * from sys.partition_sch" +
                        "emes;select * from sys.partitions;select * from sys.periods;select * from sys.pr" +
                        "ocedures;select * from sys.registered_search_properties;select * from sys.regist" +
                        "ered_search_property_lists;select * from sys.remote_service_bindings;select * fr" +
                        "om sys.routes;select * from sys.schemas;select * from sys.security_policies;sele" +
                        "ct * from sys.security_predicates;select * from sys.selective_xml_index_namespac" +
                        "es;select * from sys.selective_xml_index_paths;select * from sys.sequences;selec" +
                        "t * from sys.service_contract_message_usages;select * from sys.service_contract_" +
                        "usages;select * from sys.service_contracts;select * from sys.service_message_typ" +
                        "es;select * from sys.service_queues;select * from sys.services;select * from sys" +
                        ".spatial_index_tessellations;select * from sys.spatial_indexes;select * from sys" +
                        ".sql_modules;select * from sys.stats;select * from sys.stats_columns;select * fr" +
                        "om sys.symmetric_keys;select * from sys.synonyms;select * from sys.table_types;s" +
                        "elect * from sys.tables;select * from sys.trigger_events;select * from sys.trigg" +
                        "ers;select * from sys.types;select * from sys.views;select * from sys.xml_indexe" +
                        "s;select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc,has_snapshot) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc, @hasSnapshot)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter hasSnapshot = new Microsoft.Data.Sqlite.SqliteParameter("@hasSnapshot", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasSnapshot);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];
                        hasSnapshot.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date,key_length) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate, @keyLength)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];
                        keyLength.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_column_encryption_key_values (column_encryption_key_id,column_master_key_id,column_master_key_definition_id,encrypted_value,encryption_algorithm_name) values (@columnEncryptionKeyId, @columnMasterKeyId, @columnMasterKeyDefinitionId, @encryptedValue, @encryptionAlgorithmName)";

                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyDefinitionId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyDefinitionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyDefinitionId);
                    Microsoft.Data.Sqlite.SqliteParameter encryptedValue = new Microsoft.Data.Sqlite.SqliteParameter("@encryptedValue", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(encryptedValue);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        columnEncryptionKeyId.Value = values[0];
                        columnMasterKeyId.Value = values[1];
                        columnMasterKeyDefinitionId.Value = values[2];
                        encryptedValue.Value = values[3];
                        encryptionAlgorithmName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_keys (name,column_encryption_key_id,create_date" +
                        ",modify_date) values (@name, @columnEncryptionKeyId, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        columnEncryptionKeyId.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_master_key_definitions (name,column_master_key_definition_" +
                        "id,create_date,modify_date,key_store_provider_name,key_path) values (@name, @col" +
                        "umnMasterKeyDefinitionId, @createDate, @modifyDate, @keyStoreProviderName, @keyP" +
                        "ath)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyDefinitionId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyDefinitionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyDefinitionId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyStoreProviderName = new Microsoft.Data.Sqlite.SqliteParameter("@keyStoreProviderName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyStoreProviderName);
                    Microsoft.Data.Sqlite.SqliteParameter keyPath = new Microsoft.Data.Sqlite.SqliteParameter("@keyPath", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyPath);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        columnMasterKeyDefinitionId.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        keyStoreProviderName.Value = values[4];
                        keyPath.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        graphType.Value = values[37];
                        graphTypeDesc.Value = values[38];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,is_persistent_log_buffer,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @isPersistentLogBuffer, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter isPersistentLogBuffer = new Microsoft.Data.Sqlite.SqliteParameter("@isPersistentLogBuffer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersistentLogBuffer);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        isPersistentLogBuffer.Value = values[17];
                        createLsn.Value = values[18];
                        dropLsn.Value = values[19];
                        readOnlyLsn.Value = values[20];
                        readWriteLsn.Value = values[21];
                        differentialBaseLsn.Value = values[22];
                        differentialBaseGuid.Value = values[23];
                        differentialBaseTime.Value = values[24];
                        redoStartLsn.Value = values[25];
                        redoStartForkGuid.Value = values[26];
                        redoTargetLsn.Value = values[27];
                        redoTargetForkGuid.Value = values[28];
                        backupLsn.Value = values[29];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid,allow_encrypted_value_modifications) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid, @allowEncryptedValueModifications)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter allowEncryptedValueModifications = new Microsoft.Data.Sqlite.SqliteParameter("@allowEncryptedValueModifications", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowEncryptedValueModifications);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];
                        allowEncryptedValueModifications.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_query_store_options (desired_state,desired_state_desc,actual_state,actual_state_desc,readonly_reason,current_storage_size_mb,flush_interval_seconds,interval_length_minutes,max_storage_size_mb,stale_query_threshold_days,max_plans_per_query,query_capture_mode,query_capture_mode_desc,size_based_cleanup_mode,size_based_cleanup_mode_desc,wait_stats_capture_mode,wait_stats_capture_mode_desc,actual_state_additional_info) values (@desiredState, @desiredStateDesc, @actualState, @actualStateDesc, @readonlyReason, @currentStorageSizeMb, @flushIntervalSeconds, @intervalLengthMinutes, @maxStorageSizeMb, @staleQueryThresholdDays, @maxPlansPerQuery, @queryCaptureMode, @queryCaptureModeDesc, @sizeBasedCleanupMode, @sizeBasedCleanupModeDesc, @waitStatsCaptureMode, @waitStatsCaptureModeDesc, @actualStateAdditionalInfo)";

                    Microsoft.Data.Sqlite.SqliteParameter desiredState = new Microsoft.Data.Sqlite.SqliteParameter("@desiredState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(desiredState);
                    Microsoft.Data.Sqlite.SqliteParameter desiredStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@desiredStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(desiredStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualState = new Microsoft.Data.Sqlite.SqliteParameter("@actualState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(actualState);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter readonlyReason = new Microsoft.Data.Sqlite.SqliteParameter("@readonlyReason", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(readonlyReason);
                    Microsoft.Data.Sqlite.SqliteParameter currentStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@currentStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(currentStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter flushIntervalSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@flushIntervalSeconds", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(flushIntervalSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter intervalLengthMinutes = new Microsoft.Data.Sqlite.SqliteParameter("@intervalLengthMinutes", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(intervalLengthMinutes);
                    Microsoft.Data.Sqlite.SqliteParameter maxStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@maxStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter staleQueryThresholdDays = new Microsoft.Data.Sqlite.SqliteParameter("@staleQueryThresholdDays", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(staleQueryThresholdDays);
                    Microsoft.Data.Sqlite.SqliteParameter maxPlansPerQuery = new Microsoft.Data.Sqlite.SqliteParameter("@maxPlansPerQuery", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxPlansPerQuery);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(queryCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(queryCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupMode = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupMode);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(waitStatsCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(waitStatsCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateAdditionalInfo = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateAdditionalInfo", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateAdditionalInfo);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        desiredState.Value = values[0];
                        desiredStateDesc.Value = values[1];
                        actualState.Value = values[2];
                        actualStateDesc.Value = values[3];
                        readonlyReason.Value = values[4];
                        currentStorageSizeMb.Value = values[5];
                        flushIntervalSeconds.Value = values[6];
                        intervalLengthMinutes.Value = values[7];
                        maxStorageSizeMb.Value = values[8];
                        staleQueryThresholdDays.Value = values[9];
                        maxPlansPerQuery.Value = values[10];
                        queryCaptureMode.Value = values[11];
                        queryCaptureModeDesc.Value = values[12];
                        sizeBasedCleanupMode.Value = values[13];
                        sizeBasedCleanupModeDesc.Value = values[14];
                        waitStatsCaptureMode.Value = values[15];
                        waitStatsCaptureModeDesc.Value = values[16];
                        actualStateAdditionalInfo.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_scoped_configurations (configuration_id,name,value,value" +
                        "_for_secondary,is_value_default) values (@configurationId, @name, @value, @value" +
                        "ForSecondary, @isValueDefault)";

                    Microsoft.Data.Sqlite.SqliteParameter configurationId = new Microsoft.Data.Sqlite.SqliteParameter("@configurationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(configurationId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    Microsoft.Data.Sqlite.SqliteParameter valueForSecondary = new Microsoft.Data.Sqlite.SqliteParameter("@valueForSecondary", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(valueForSecondary);
                    Microsoft.Data.Sqlite.SqliteParameter isValueDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isValueDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isValueDefault);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        configurationId.Value = values[0];
                        name.Value = values[1];
                        value.Value = values[2];
                        valueForSecondary.Value = values[3];
                        isValueDefault.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_scoped_credentials (name,principal_id,credential_id,credential_identity,create_date,modify_date,target_type,target_id) values (@name, @principalId, @credentialId, @credentialIdentity, @createDate, @modifyDate, @targetType, @targetId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@credentialIdentity", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(credentialIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter targetType = new Microsoft.Data.Sqlite.SqliteParameter("@targetType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(targetType);
                    Microsoft.Data.Sqlite.SqliteParameter targetId = new Microsoft.Data.Sqlite.SqliteParameter("@targetId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        credentialId.Value = values[2];
                        credentialIdentity.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];
                        targetType.Value = values[6];
                        targetId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_create" +
                        "_stats_incremental_on,is_auto_update_stats_on,is_auto_update_stats_async_on,is_a" +
                        "nsi_null_default_on,is_ansi_nulls_on,is_ansi_padding_on,is_ansi_warnings_on,is_a" +
                        "rithabort_on,is_concat_null_yields_null_on,is_numeric_roundabort_on,is_quoted_id" +
                        "entifier_on,is_recursive_triggers_on,is_cursor_close_on_commit_on,is_local_curso" +
                        "r_default,is_fulltext_enabled,is_trustworthy_on,is_db_chaining_on,is_parameteriz" +
                        "ation_forced,is_master_key_encrypted_by_server,is_query_store_on,is_published,is" +
                        "_subscribed,is_merge_published,is_distributor,is_sync_with_backup,service_broker" +
                        "_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_desc,is_date_correlation_o" +
                        "n,is_cdc_enabled,is_encrypted,is_honor_broker_priority_on,replica_id,group_datab" +
                        "ase_id,resource_pool_id,default_language_lcid,default_language_name,default_full" +
                        "text_language_lcid,default_fulltext_language_name,is_nested_triggers_on,is_trans" +
                        "form_noise_words_on,two_digit_year_cutoff,containment,containment_desc,target_re" +
                        "covery_time_in_seconds,delayed_durability,delayed_durability_desc,is_memory_opti" +
                        "mized_elevate_to_snapshot_on,is_federation_member,is_remote_data_archive_enabled" +
                        ",is_mixed_page_allocation_on,is_temporal_history_retention_enabled,catalog_colla" +
                        "tion_type,catalog_collation_type_desc,physical_database_name) values (@name, @da" +
                        "tabaseId, @sourceDatabaseId, @ownerSid, @createDate, @compatibilityLevel, @colla" +
                        "tionName, @userAccess, @userAccessDesc, @isReadOnly, @isAutoCloseOn, @isAutoShri" +
                        "nkOn, @state, @stateDesc, @isInStandby, @isCleanlyShutdown, @isSupplementalLoggi" +
                        "ngEnabled, @snapshotIsolationState, @snapshotIsolationStateDesc, @isReadCommitte" +
                        "dSnapshotOn, @recoveryModel, @recoveryModelDesc, @pageVerifyOption, @pageVerifyO" +
                        "ptionDesc, @isAutoCreateStatsOn, @isAutoCreateStatsIncrementalOn, @isAutoUpdateS" +
                        "tatsOn, @isAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAnsiNullsOn, @isAnsi" +
                        "PaddingOn, @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYieldsNullOn, @isNum" +
                        "ericRoundabortOn, @isQuotedIdentifierOn, @isRecursiveTriggersOn, @isCursorCloseO" +
                        "nCommitOn, @isLocalCursorDefault, @isFulltextEnabled, @isTrustworthyOn, @isDbCha" +
                        "iningOn, @isParameterizationForced, @isMasterKeyEncryptedByServer, @isQueryStore" +
                        "On, @isPublished, @isSubscribed, @isMergePublished, @isDistributor, @isSyncWithB" +
                        "ackup, @serviceBrokerGuid, @isBrokerEnabled, @logReuseWait, @logReuseWaitDesc, @" +
                        "isDateCorrelationOn, @isCdcEnabled, @isEncrypted, @isHonorBrokerPriorityOn, @rep" +
                        "licaId, @groupDatabaseId, @resourcePoolId, @defaultLanguageLcid, @defaultLanguag" +
                        "eName, @defaultFulltextLanguageLcid, @defaultFulltextLanguageName, @isNestedTrig" +
                        "gersOn, @isTransformNoiseWordsOn, @twoDigitYearCutoff, @containment, @containmen" +
                        "tDesc, @targetRecoveryTimeInSeconds, @delayedDurability, @delayedDurabilityDesc," +
                        " @isMemoryOptimizedElevateToSnapshotOn, @isFederationMember, @isRemoteDataArchiv" +
                        "eEnabled, @isMixedPageAllocationOn, @isTemporalHistoryRetentionEnabled, @catalog" +
                        "CollationType, @catalogCollationTypeDesc, @physicalDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsIncrementalOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsIncrementalOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsIncrementalOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isQueryStoreOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQueryStoreOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQueryStoreOn);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter resourcePoolId = new Microsoft.Data.Sqlite.SqliteParameter("@resourcePoolId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(resourcePoolId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurability = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurability", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(delayedDurability);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(delayedDurabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimizedElevateToSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimizedElevateToSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimizedElevateToSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter isFederationMember = new Microsoft.Data.Sqlite.SqliteParameter("@isFederationMember", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFederationMember);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isMixedPageAllocationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMixedPageAllocationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMixedPageAllocationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporalHistoryRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporalHistoryRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporalHistoryRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter catalogCollationType = new Microsoft.Data.Sqlite.SqliteParameter("@catalogCollationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(catalogCollationType);
                    Microsoft.Data.Sqlite.SqliteParameter catalogCollationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@catalogCollationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(catalogCollationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter physicalDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoCreateStatsIncrementalOn.Value = values[25];
                        isAutoUpdateStatsOn.Value = values[26];
                        isAutoUpdateStatsAsyncOn.Value = values[27];
                        isAnsiNullDefaultOn.Value = values[28];
                        isAnsiNullsOn.Value = values[29];
                        isAnsiPaddingOn.Value = values[30];
                        isAnsiWarningsOn.Value = values[31];
                        isArithabortOn.Value = values[32];
                        isConcatNullYieldsNullOn.Value = values[33];
                        isNumericRoundabortOn.Value = values[34];
                        isQuotedIdentifierOn.Value = values[35];
                        isRecursiveTriggersOn.Value = values[36];
                        isCursorCloseOnCommitOn.Value = values[37];
                        isLocalCursorDefault.Value = values[38];
                        isFulltextEnabled.Value = values[39];
                        isTrustworthyOn.Value = values[40];
                        isDbChainingOn.Value = values[41];
                        isParameterizationForced.Value = values[42];
                        isMasterKeyEncryptedByServer.Value = values[43];
                        isQueryStoreOn.Value = values[44];
                        isPublished.Value = values[45];
                        isSubscribed.Value = values[46];
                        isMergePublished.Value = values[47];
                        isDistributor.Value = values[48];
                        isSyncWithBackup.Value = values[49];
                        serviceBrokerGuid.Value = values[50];
                        isBrokerEnabled.Value = values[51];
                        logReuseWait.Value = values[52];
                        logReuseWaitDesc.Value = values[53];
                        isDateCorrelationOn.Value = values[54];
                        isCdcEnabled.Value = values[55];
                        isEncrypted.Value = values[56];
                        isHonorBrokerPriorityOn.Value = values[57];
                        replicaId.Value = values[58];
                        groupDatabaseId.Value = values[59];
                        resourcePoolId.Value = values[60];
                        defaultLanguageLcid.Value = values[61];
                        defaultLanguageName.Value = values[62];
                        defaultFulltextLanguageLcid.Value = values[63];
                        defaultFulltextLanguageName.Value = values[64];
                        isNestedTriggersOn.Value = values[65];
                        isTransformNoiseWordsOn.Value = values[66];
                        twoDigitYearCutoff.Value = values[67];
                        containment.Value = values[68];
                        containmentDesc.Value = values[69];
                        targetRecoveryTimeInSeconds.Value = values[70];
                        delayedDurability.Value = values[71];
                        delayedDurabilityDesc.Value = values[72];
                        isMemoryOptimizedElevateToSnapshotOn.Value = values[73];
                        isFederationMember.Value = values[74];
                        isRemoteDataArchiveEnabled.Value = values[75];
                        isMixedPageAllocationOn.Value = values[76];
                        isTemporalHistoryRetentionEnabled.Value = values[77];
                        catalogCollationType.Value = values[78];
                        catalogCollationTypeDesc.Value = values[79];
                        physicalDatabaseName.Value = values[80];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_data_sources (data_source_id,name,location,type_desc,type,resource_manager_location,credential_id,database_name,shard_map_name,connection_options,pushdown) values (@dataSourceId, @name, @location, @typeDesc, @type, @resourceManagerLocation, @credentialId, @databaseName, @shardMapName, @connectionOptions, @pushdown)";

                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter resourceManagerLocation = new Microsoft.Data.Sqlite.SqliteParameter("@resourceManagerLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(resourceManagerLocation);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter databaseName = new Microsoft.Data.Sqlite.SqliteParameter("@databaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(databaseName);
                    Microsoft.Data.Sqlite.SqliteParameter shardMapName = new Microsoft.Data.Sqlite.SqliteParameter("@shardMapName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(shardMapName);
                    Microsoft.Data.Sqlite.SqliteParameter connectionOptions = new Microsoft.Data.Sqlite.SqliteParameter("@connectionOptions", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(connectionOptions);
                    Microsoft.Data.Sqlite.SqliteParameter pushdown = new Microsoft.Data.Sqlite.SqliteParameter("@pushdown", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pushdown);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        dataSourceId.Value = values[0];
                        name.Value = values[1];
                        location.Value = values[2];
                        typeDesc.Value = values[3];
                        type.Value = values[4];
                        resourceManagerLocation.Value = values[5];
                        credentialId.Value = values[6];
                        databaseName.Value = values[7];
                        shardMapName.Value = values[8];
                        connectionOptions.Value = values[9];
                        pushdown.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_column_id_used,uses_ansi_nulls,data_source_id,file_format_id,location,reject_type,reject_value,reject_sample_value,distribution_type,distribution_desc,sharding_col_id,remote_schema_name,remote_object_name,rejected_row_location) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxColumnIdUsed, @usesAnsiNulls, @dataSourceId, @fileFormatId, @location, @rejectType, @rejectValue, @rejectSampleValue, @distributionType, @distributionDesc, @shardingColId, @remoteSchemaName, @remoteObjectName, @rejectedRowLocation)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileFormatId = new Microsoft.Data.Sqlite.SqliteParameter("@fileFormatId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileFormatId);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter rejectType = new Microsoft.Data.Sqlite.SqliteParameter("@rejectType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectType);
                    Microsoft.Data.Sqlite.SqliteParameter rejectValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectValue);
                    Microsoft.Data.Sqlite.SqliteParameter rejectSampleValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectSampleValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectSampleValue);
                    Microsoft.Data.Sqlite.SqliteParameter distributionType = new Microsoft.Data.Sqlite.SqliteParameter("@distributionType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(distributionType);
                    Microsoft.Data.Sqlite.SqliteParameter distributionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@distributionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(distributionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter shardingColId = new Microsoft.Data.Sqlite.SqliteParameter("@shardingColId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(shardingColId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter remoteObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteObjectName);
                    Microsoft.Data.Sqlite.SqliteParameter rejectedRowLocation = new Microsoft.Data.Sqlite.SqliteParameter("@rejectedRowLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectedRowLocation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxColumnIdUsed.Value = values[12];
                        usesAnsiNulls.Value = values[13];
                        dataSourceId.Value = values[14];
                        fileFormatId.Value = values[15];
                        location.Value = values[16];
                        rejectType.Value = values[17];
                        rejectValue.Value = values[18];
                        rejectSampleValue.Value = values[19];
                        distributionType.Value = values[20];
                        distributionDesc.Value = values[21];
                        shardingColId.Value = values[22];
                        remoteSchemaName.Value = values[23];
                        remoteObjectName.Value = values[24];
                        rejectedRowLocation.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_system,filegroup_guid,log_filegroup_id,is_read_only,is_autogrow_all_files) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOnly, @isAutogrowAllFiles)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutogrowAllFiles = new Microsoft.Data.Sqlite.SqliteParameter("@isAutogrowAllFiles", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutogrowAllFiles);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];
                        isAutogrowAllFiles.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_hash_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,bucket_count,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @bucketCount, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter bucketCount = new Microsoft.Data.Sqlite.SqliteParameter("@bucketCount", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(bucketCount);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        bucketCount.Value = values[19];
                        autoCreated.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];
                        generatedAlwaysType.Value = values[29];
                        generatedAlwaysTypeDesc.Value = values[30];
                        encryptionType.Value = values[31];
                        encryptionTypeDesc.Value = values[32];
                        encryptionAlgorithmName.Value = values[33];
                        columnEncryptionKeyId.Value = values[34];
                        columnEncryptionKeyDatabaseName.Value = values[35];
                        isHidden.Value = values[36];
                        isMasked.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,compression_delay,suppress_dup_key_messages,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @compressionDelay, @suppressDupKeyMessages, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter compressionDelay = new Microsoft.Data.Sqlite.SqliteParameter("@compressionDelay", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(compressionDelay);
                    Microsoft.Data.Sqlite.SqliteParameter suppressDupKeyMessages = new Microsoft.Data.Sqlite.SqliteParameter("@suppressDupKeyMessages", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(suppressDupKeyMessages);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        compressionDelay.Value = values[19];
                        suppressDupKeyMessages.Value = values[20];
                        autoCreated.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named,is_enforced) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed, @isEnforced)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    Microsoft.Data.Sqlite.SqliteParameter isEnforced = new Microsoft.Data.Sqlite.SqliteParameter("@isEnforced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnforced);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];
                        isEnforced.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_masked_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,masking_function,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @maskingFunction, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter maskingFunction = new Microsoft.Data.Sqlite.SqliteParameter("@maskingFunction", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(maskingFunction);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        maskingFunction.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly,is_nullable,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly, @isNullable, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];
                        isNullable.Value = values[15];
                        encryptionType.Value = values[16];
                        encryptionTypeDesc.Value = values[17];
                        encryptionAlgorithmName.Value = values[18];
                        columnEncryptionKeyId.Value = values[19];
                        columnEncryptionKeyDatabaseName.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_periods (name,period_type,period_type_desc,object_id,start_column" +
                        "_id,end_column_id) values (@name, @periodType, @periodTypeDesc, @objectId, @star" +
                        "tColumnId, @endColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter periodType = new Microsoft.Data.Sqlite.SqliteParameter("@periodType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(periodType);
                    Microsoft.Data.Sqlite.SqliteParameter periodTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@periodTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(periodTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter startColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@startColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(startColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter endColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@endColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(endColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        periodType.Value = values[1];
                        periodTypeDesc.Value = values[2];
                        objectId.Value = values[3];
                        startColumnId.Value = values[4];
                        endColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_policies (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_enabled,is_not_for_replication,uses_database_collation,is_schema_bound) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isEnabled, @isNotForReplication, @usesDatabaseCollation, @isSchemaBound)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isEnabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        usesDatabaseCollation.Value = values[12];
                        isSchemaBound.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_predicates (object_id,security_predicate_id,target_object_id,predicate_definition,predicate_type,predicate_type_desc,operation,operation_desc) values (@objectId, @securityPredicateId, @targetObjectId, @predicateDefinition, @predicateType, @predicateTypeDesc, @operation, @operationDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter securityPredicateId = new Microsoft.Data.Sqlite.SqliteParameter("@securityPredicateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(securityPredicateId);
                    Microsoft.Data.Sqlite.SqliteParameter targetObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@targetObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter predicateDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@predicateDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter predicateType = new Microsoft.Data.Sqlite.SqliteParameter("@predicateType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(predicateType);
                    Microsoft.Data.Sqlite.SqliteParameter predicateTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@predicateTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter operation = new Microsoft.Data.Sqlite.SqliteParameter("@operation", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(operation);
                    Microsoft.Data.Sqlite.SqliteParameter operationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@operationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(operationDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        securityPredicateId.Value = values[1];
                        targetObjectId.Value = values[2];
                        predicateDefinition.Value = values[3];
                        predicateType.Value = values[4];
                        predicateTypeDesc.Value = values[5];
                        operation.Value = values[6];
                        operationDesc.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted,last_used_value) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted, @lastUsedValue)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    Microsoft.Data.Sqlite.SqliteParameter lastUsedValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastUsedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastUsedValue);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];
                        lastUsedValue.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        spatialIndexType.Value = values[17];
                        spatialIndexTypeDesc.Value = values[18];
                        tessellationScheme.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        autoCreated.Value = values[22];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id,uses_native_compilation,inline_type,is_inlineable) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId, @usesNativeCompilation, @inlineType, @isInlineable)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter usesNativeCompilation = new Microsoft.Data.Sqlite.SqliteParameter("@usesNativeCompilation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesNativeCompilation);
                    Microsoft.Data.Sqlite.SqliteParameter inlineType = new Microsoft.Data.Sqlite.SqliteParameter("@inlineType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(inlineType);
                    Microsoft.Data.Sqlite.SqliteParameter isInlineable = new Microsoft.Data.Sqlite.SqliteParameter("@isInlineable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInlineable);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];
                        usesNativeCompilation.Value = values[9];
                        inlineType.Value = values[10];
                        isInlineable.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recompute,has_filter,filter_definition,is_temporary,is_incremental,has_persisted_sample,stats_generation_method,stats_generation_method_desc) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @isTemporary, @isIncremental, @hasPersistedSample, @statsGenerationMethod, @statsGenerationMethodDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    Microsoft.Data.Sqlite.SqliteParameter isIncremental = new Microsoft.Data.Sqlite.SqliteParameter("@isIncremental", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncremental);
                    Microsoft.Data.Sqlite.SqliteParameter hasPersistedSample = new Microsoft.Data.Sqlite.SqliteParameter("@hasPersistedSample", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasPersistedSample);
                    Microsoft.Data.Sqlite.SqliteParameter statsGenerationMethod = new Microsoft.Data.Sqlite.SqliteParameter("@statsGenerationMethod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsGenerationMethod);
                    Microsoft.Data.Sqlite.SqliteParameter statsGenerationMethodDesc = new Microsoft.Data.Sqlite.SqliteParameter("@statsGenerationMethodDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(statsGenerationMethodDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];
                        isIncremental.Value = values[9];
                        hasPersistedSample.Value = values[10];
                        statsGenerationMethod.Value = values[11];
                        statsGenerationMethodDesc.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id,is_memory_optimized) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId, @isMemoryOptimized)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];
                        isMemoryOptimized.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable,is_memory_optimized,durability,durability_desc,temporal_type,temporal_type_desc,history_table_id,is_remote_data_archive_enabled,is_external,history_retention_period,history_retention_period_unit,history_retention_period_unit_desc,is_node,is_edge) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable, @isMemoryOptimized, @durability, @durabilityDesc, @temporalType, @temporalTypeDesc, @historyTableId, @isRemoteDataArchiveEnabled, @isExternal, @historyRetentionPeriod, @historyRetentionPeriodUnit, @historyRetentionPeriodUnitDesc, @isNode, @isEdge)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    Microsoft.Data.Sqlite.SqliteParameter durability = new Microsoft.Data.Sqlite.SqliteParameter("@durability", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(durability);
                    Microsoft.Data.Sqlite.SqliteParameter durabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@durabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(durabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter temporalType = new Microsoft.Data.Sqlite.SqliteParameter("@temporalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(temporalType);
                    Microsoft.Data.Sqlite.SqliteParameter temporalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@temporalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(temporalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter historyTableId = new Microsoft.Data.Sqlite.SqliteParameter("@historyTableId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyTableId);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isExternal = new Microsoft.Data.Sqlite.SqliteParameter("@isExternal", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExternal);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnit = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnit);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter isEdge = new Microsoft.Data.Sqlite.SqliteParameter("@isEdge", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEdge);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];
                        isMemoryOptimized.Value = values[28];
                        durability.Value = values[29];
                        durabilityDesc.Value = values[30];
                        temporalType.Value = values[31];
                        temporalTypeDesc.Value = values[32];
                        historyTableId.Value = values[33];
                        isRemoteDataArchiveEnabled.Value = values[34];
                        isExternal.Value = values[35];
                        historyRetentionPeriod.Value = values[36];
                        historyRetentionPeriodUnit.Value = values[37];
                        historyRetentionPeriodUnitDesc.Value = values[38];
                        isNode.Value = values[39];
                        isEdge.Value = values[40];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc,has_snapshot) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc, @hasSnapshot)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter hasSnapshot = new Microsoft.Data.Sqlite.SqliteParameter("@hasSnapshot", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasSnapshot);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];
                        hasSnapshot.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        usingXmlIndexId.Value = values[17];
                        secondaryType.Value = values[18];
                        secondaryTypeDesc.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        xmlIndexType.Value = values[22];
                        xmlIndexTypeDescription.Value = values[23];
                        pathId.Value = values[24];
                        autoCreated.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void LoadvNext(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.column_encryption_key_values;select * from sys.column_encry" +
                        "ption_keys;select * from sys.columns;select * from sys.computed_columns;select *" +
                        " from sys.conversation_priorities;select * from sys.crypt_properties;select * fr" +
                        "om sys.data_spaces;select * from sys.database_files;select * from sys.database_f" +
                        "ilestream_options;select * from sys.database_principals;select * from sys.databa" +
                        "se_query_store_options;select * from sys.database_role_members;select * from sys" +
                        ".database_scoped_configurations;select * from sys.database_scoped_credentials;se" +
                        "lect * from sys.databases;select * from sys.default_constraints;select * from sy" +
                        "s.destination_data_spaces;select * from sys.event_notifications;select * from sy" +
                        "s.events;select * from sys.extended_properties;select * from sys.external_data_s" +
                        "ources;select * from sys.external_tables;select * from sys.filegroups;select * f" +
                        "rom sys.filetable_system_defined_objects;select * from sys.filetables;select * f" +
                        "rom sys.foreign_key_columns;select * from sys.foreign_keys;select * from sys.ful" +
                        "ltext_catalogs;select * from sys.fulltext_index_columns;select * from sys.fullte" +
                        "xt_indexes;select * from sys.fulltext_stoplists;select * from sys.function_order" +
                        "_columns;select * from sys.hash_indexes;select * from sys.identity_columns;selec" +
                        "t * from sys.index_columns;select * from sys.indexes;select * from sys.internal_" +
                        "tables;select * from sys.key_constraints;select * from sys.key_encryptions;selec" +
                        "t * from sys.masked_columns;select * from sys.numbered_procedure_parameters;sele" +
                        "ct * from sys.numbered_procedures;select * from sys.objects;select * from sys.pa" +
                        "rameters;select * from sys.partition_functions;select * from sys.partition_param" +
                        "eters;select * from sys.partition_range_values;select * from sys.partition_schem" +
                        "es;select * from sys.partitions;select * from sys.periods;select * from sys.proc" +
                        "edures;select * from sys.registered_search_properties;select * from sys.register" +
                        "ed_search_property_lists;select * from sys.remote_service_bindings;select * from" +
                        " sys.routes;select * from sys.schemas;select * from sys.security_policies;select" +
                        " * from sys.security_predicates;select * from sys.selective_xml_index_namespaces" +
                        ";select * from sys.selective_xml_index_paths;select * from sys.sequences;select " +
                        "* from sys.service_contract_message_usages;select * from sys.service_contract_us" +
                        "ages;select * from sys.service_contracts;select * from sys.service_message_types" +
                        ";select * from sys.service_queues;select * from sys.services;select * from sys.s" +
                        "patial_index_tessellations;select * from sys.spatial_indexes;select * from sys.s" +
                        "ql_modules;select * from sys.stats;select * from sys.stats_columns;select * from" +
                        " sys.symmetric_keys;select * from sys.synonyms;select * from sys.table_types;sel" +
                        "ect * from sys.tables;select * from sys.trigger_events;select * from sys.trigger" +
                        "s;select * from sys.types;select * from sys.views;select * from sys.xml_indexes;" +
                        "select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc,has_snapshot) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc, @hasSnapshot)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter hasSnapshot = new Microsoft.Data.Sqlite.SqliteParameter("@hasSnapshot", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasSnapshot);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];
                        hasSnapshot.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date,key_length) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate, @keyLength)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];
                        keyLength.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_key_values (column_encryption_key_id,column_mas" +
                        "ter_key_id,encrypted_value,encryption_algorithm_name) values (@columnEncryptionK" +
                        "eyId, @columnMasterKeyId, @encryptedValue, @encryptionAlgorithmName)";

                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter encryptedValue = new Microsoft.Data.Sqlite.SqliteParameter("@encryptedValue", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(encryptedValue);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        columnEncryptionKeyId.Value = values[0];
                        columnMasterKeyId.Value = values[1];
                        encryptedValue.Value = values[2];
                        encryptionAlgorithmName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_keys (name,column_encryption_key_id,create_date" +
                        ",modify_date) values (@name, @columnEncryptionKeyId, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        columnEncryptionKeyId.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        graphType.Value = values[37];
                        graphTypeDesc.Value = values[38];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,is_persistent_log_buffer,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @isPersistentLogBuffer, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter isPersistentLogBuffer = new Microsoft.Data.Sqlite.SqliteParameter("@isPersistentLogBuffer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersistentLogBuffer);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        isPersistentLogBuffer.Value = values[17];
                        createLsn.Value = values[18];
                        dropLsn.Value = values[19];
                        readOnlyLsn.Value = values[20];
                        readWriteLsn.Value = values[21];
                        differentialBaseLsn.Value = values[22];
                        differentialBaseGuid.Value = values[23];
                        differentialBaseTime.Value = values[24];
                        redoStartLsn.Value = values[25];
                        redoStartForkGuid.Value = values[26];
                        redoTargetLsn.Value = values[27];
                        redoTargetForkGuid.Value = values[28];
                        backupLsn.Value = values[29];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_filestream_options (database_id,non_transacted_access,no" +
                        "n_transacted_access_desc,directory_name) values (@databaseId, @nonTransactedAcce" +
                        "ss, @nonTransactedAccessDesc, @directoryName)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccess = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(nonTransactedAccess);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(nonTransactedAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        nonTransactedAccess.Value = values[1];
                        nonTransactedAccessDesc.Value = values[2];
                        directoryName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid,allow_encrypted_value_modifications) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid, @allowEncryptedValueModifications)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter allowEncryptedValueModifications = new Microsoft.Data.Sqlite.SqliteParameter("@allowEncryptedValueModifications", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowEncryptedValueModifications);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];
                        allowEncryptedValueModifications.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_query_store_options (desired_state,desired_state_desc,actual_state,actual_state_desc,readonly_reason,current_storage_size_mb,flush_interval_seconds,interval_length_minutes,max_storage_size_mb,stale_query_threshold_days,max_plans_per_query,query_capture_mode,query_capture_mode_desc,size_based_cleanup_mode,size_based_cleanup_mode_desc,wait_stats_capture_mode,wait_stats_capture_mode_desc,actual_state_additional_info) values (@desiredState, @desiredStateDesc, @actualState, @actualStateDesc, @readonlyReason, @currentStorageSizeMb, @flushIntervalSeconds, @intervalLengthMinutes, @maxStorageSizeMb, @staleQueryThresholdDays, @maxPlansPerQuery, @queryCaptureMode, @queryCaptureModeDesc, @sizeBasedCleanupMode, @sizeBasedCleanupModeDesc, @waitStatsCaptureMode, @waitStatsCaptureModeDesc, @actualStateAdditionalInfo)";

                    Microsoft.Data.Sqlite.SqliteParameter desiredState = new Microsoft.Data.Sqlite.SqliteParameter("@desiredState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(desiredState);
                    Microsoft.Data.Sqlite.SqliteParameter desiredStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@desiredStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(desiredStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualState = new Microsoft.Data.Sqlite.SqliteParameter("@actualState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(actualState);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter readonlyReason = new Microsoft.Data.Sqlite.SqliteParameter("@readonlyReason", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(readonlyReason);
                    Microsoft.Data.Sqlite.SqliteParameter currentStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@currentStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(currentStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter flushIntervalSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@flushIntervalSeconds", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(flushIntervalSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter intervalLengthMinutes = new Microsoft.Data.Sqlite.SqliteParameter("@intervalLengthMinutes", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(intervalLengthMinutes);
                    Microsoft.Data.Sqlite.SqliteParameter maxStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@maxStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter staleQueryThresholdDays = new Microsoft.Data.Sqlite.SqliteParameter("@staleQueryThresholdDays", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(staleQueryThresholdDays);
                    Microsoft.Data.Sqlite.SqliteParameter maxPlansPerQuery = new Microsoft.Data.Sqlite.SqliteParameter("@maxPlansPerQuery", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxPlansPerQuery);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(queryCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(queryCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupMode = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupMode);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(waitStatsCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(waitStatsCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateAdditionalInfo = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateAdditionalInfo", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateAdditionalInfo);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        desiredState.Value = values[0];
                        desiredStateDesc.Value = values[1];
                        actualState.Value = values[2];
                        actualStateDesc.Value = values[3];
                        readonlyReason.Value = values[4];
                        currentStorageSizeMb.Value = values[5];
                        flushIntervalSeconds.Value = values[6];
                        intervalLengthMinutes.Value = values[7];
                        maxStorageSizeMb.Value = values[8];
                        staleQueryThresholdDays.Value = values[9];
                        maxPlansPerQuery.Value = values[10];
                        queryCaptureMode.Value = values[11];
                        queryCaptureModeDesc.Value = values[12];
                        sizeBasedCleanupMode.Value = values[13];
                        sizeBasedCleanupModeDesc.Value = values[14];
                        waitStatsCaptureMode.Value = values[15];
                        waitStatsCaptureModeDesc.Value = values[16];
                        actualStateAdditionalInfo.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_scoped_configurations (configuration_id,name,value,value" +
                        "_for_secondary,is_value_default) values (@configurationId, @name, @value, @value" +
                        "ForSecondary, @isValueDefault)";

                    Microsoft.Data.Sqlite.SqliteParameter configurationId = new Microsoft.Data.Sqlite.SqliteParameter("@configurationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(configurationId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    Microsoft.Data.Sqlite.SqliteParameter valueForSecondary = new Microsoft.Data.Sqlite.SqliteParameter("@valueForSecondary", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(valueForSecondary);
                    Microsoft.Data.Sqlite.SqliteParameter isValueDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isValueDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isValueDefault);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        configurationId.Value = values[0];
                        name.Value = values[1];
                        value.Value = values[2];
                        valueForSecondary.Value = values[3];
                        isValueDefault.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_scoped_credentials (name,principal_id,credential_id,credential_identity,create_date,modify_date,target_type,target_id) values (@name, @principalId, @credentialId, @credentialIdentity, @createDate, @modifyDate, @targetType, @targetId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@credentialIdentity", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(credentialIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter targetType = new Microsoft.Data.Sqlite.SqliteParameter("@targetType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(targetType);
                    Microsoft.Data.Sqlite.SqliteParameter targetId = new Microsoft.Data.Sqlite.SqliteParameter("@targetId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        credentialId.Value = values[2];
                        credentialIdentity.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];
                        targetType.Value = values[6];
                        targetId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_create" +
                        "_stats_incremental_on,is_auto_update_stats_on,is_auto_update_stats_async_on,is_a" +
                        "nsi_null_default_on,is_ansi_nulls_on,is_ansi_padding_on,is_ansi_warnings_on,is_a" +
                        "rithabort_on,is_concat_null_yields_null_on,is_numeric_roundabort_on,is_quoted_id" +
                        "entifier_on,is_recursive_triggers_on,is_cursor_close_on_commit_on,is_local_curso" +
                        "r_default,is_fulltext_enabled,is_trustworthy_on,is_db_chaining_on,is_parameteriz" +
                        "ation_forced,is_master_key_encrypted_by_server,is_query_store_on,is_published,is" +
                        "_subscribed,is_merge_published,is_distributor,is_sync_with_backup,service_broker" +
                        "_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_desc,is_date_correlation_o" +
                        "n,is_cdc_enabled,is_encrypted,is_honor_broker_priority_on,replica_id,group_datab" +
                        "ase_id,resource_pool_id,default_language_lcid,default_language_name,default_full" +
                        "text_language_lcid,default_fulltext_language_name,is_nested_triggers_on,is_trans" +
                        "form_noise_words_on,two_digit_year_cutoff,containment,containment_desc,target_re" +
                        "covery_time_in_seconds,delayed_durability,delayed_durability_desc,is_memory_opti" +
                        "mized_elevate_to_snapshot_on,is_federation_member,is_remote_data_archive_enabled" +
                        ",is_mixed_page_allocation_on,is_temporal_history_retention_enabled,catalog_colla" +
                        "tion_type,catalog_collation_type_desc,physical_database_name) values (@name, @da" +
                        "tabaseId, @sourceDatabaseId, @ownerSid, @createDate, @compatibilityLevel, @colla" +
                        "tionName, @userAccess, @userAccessDesc, @isReadOnly, @isAutoCloseOn, @isAutoShri" +
                        "nkOn, @state, @stateDesc, @isInStandby, @isCleanlyShutdown, @isSupplementalLoggi" +
                        "ngEnabled, @snapshotIsolationState, @snapshotIsolationStateDesc, @isReadCommitte" +
                        "dSnapshotOn, @recoveryModel, @recoveryModelDesc, @pageVerifyOption, @pageVerifyO" +
                        "ptionDesc, @isAutoCreateStatsOn, @isAutoCreateStatsIncrementalOn, @isAutoUpdateS" +
                        "tatsOn, @isAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAnsiNullsOn, @isAnsi" +
                        "PaddingOn, @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYieldsNullOn, @isNum" +
                        "ericRoundabortOn, @isQuotedIdentifierOn, @isRecursiveTriggersOn, @isCursorCloseO" +
                        "nCommitOn, @isLocalCursorDefault, @isFulltextEnabled, @isTrustworthyOn, @isDbCha" +
                        "iningOn, @isParameterizationForced, @isMasterKeyEncryptedByServer, @isQueryStore" +
                        "On, @isPublished, @isSubscribed, @isMergePublished, @isDistributor, @isSyncWithB" +
                        "ackup, @serviceBrokerGuid, @isBrokerEnabled, @logReuseWait, @logReuseWaitDesc, @" +
                        "isDateCorrelationOn, @isCdcEnabled, @isEncrypted, @isHonorBrokerPriorityOn, @rep" +
                        "licaId, @groupDatabaseId, @resourcePoolId, @defaultLanguageLcid, @defaultLanguag" +
                        "eName, @defaultFulltextLanguageLcid, @defaultFulltextLanguageName, @isNestedTrig" +
                        "gersOn, @isTransformNoiseWordsOn, @twoDigitYearCutoff, @containment, @containmen" +
                        "tDesc, @targetRecoveryTimeInSeconds, @delayedDurability, @delayedDurabilityDesc," +
                        " @isMemoryOptimizedElevateToSnapshotOn, @isFederationMember, @isRemoteDataArchiv" +
                        "eEnabled, @isMixedPageAllocationOn, @isTemporalHistoryRetentionEnabled, @catalog" +
                        "CollationType, @catalogCollationTypeDesc, @physicalDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsIncrementalOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsIncrementalOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsIncrementalOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isQueryStoreOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQueryStoreOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQueryStoreOn);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter resourcePoolId = new Microsoft.Data.Sqlite.SqliteParameter("@resourcePoolId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(resourcePoolId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurability = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurability", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(delayedDurability);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(delayedDurabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimizedElevateToSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimizedElevateToSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimizedElevateToSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter isFederationMember = new Microsoft.Data.Sqlite.SqliteParameter("@isFederationMember", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFederationMember);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isMixedPageAllocationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMixedPageAllocationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMixedPageAllocationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporalHistoryRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporalHistoryRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporalHistoryRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter catalogCollationType = new Microsoft.Data.Sqlite.SqliteParameter("@catalogCollationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(catalogCollationType);
                    Microsoft.Data.Sqlite.SqliteParameter catalogCollationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@catalogCollationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(catalogCollationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter physicalDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoCreateStatsIncrementalOn.Value = values[25];
                        isAutoUpdateStatsOn.Value = values[26];
                        isAutoUpdateStatsAsyncOn.Value = values[27];
                        isAnsiNullDefaultOn.Value = values[28];
                        isAnsiNullsOn.Value = values[29];
                        isAnsiPaddingOn.Value = values[30];
                        isAnsiWarningsOn.Value = values[31];
                        isArithabortOn.Value = values[32];
                        isConcatNullYieldsNullOn.Value = values[33];
                        isNumericRoundabortOn.Value = values[34];
                        isQuotedIdentifierOn.Value = values[35];
                        isRecursiveTriggersOn.Value = values[36];
                        isCursorCloseOnCommitOn.Value = values[37];
                        isLocalCursorDefault.Value = values[38];
                        isFulltextEnabled.Value = values[39];
                        isTrustworthyOn.Value = values[40];
                        isDbChainingOn.Value = values[41];
                        isParameterizationForced.Value = values[42];
                        isMasterKeyEncryptedByServer.Value = values[43];
                        isQueryStoreOn.Value = values[44];
                        isPublished.Value = values[45];
                        isSubscribed.Value = values[46];
                        isMergePublished.Value = values[47];
                        isDistributor.Value = values[48];
                        isSyncWithBackup.Value = values[49];
                        serviceBrokerGuid.Value = values[50];
                        isBrokerEnabled.Value = values[51];
                        logReuseWait.Value = values[52];
                        logReuseWaitDesc.Value = values[53];
                        isDateCorrelationOn.Value = values[54];
                        isCdcEnabled.Value = values[55];
                        isEncrypted.Value = values[56];
                        isHonorBrokerPriorityOn.Value = values[57];
                        replicaId.Value = values[58];
                        groupDatabaseId.Value = values[59];
                        resourcePoolId.Value = values[60];
                        defaultLanguageLcid.Value = values[61];
                        defaultLanguageName.Value = values[62];
                        defaultFulltextLanguageLcid.Value = values[63];
                        defaultFulltextLanguageName.Value = values[64];
                        isNestedTriggersOn.Value = values[65];
                        isTransformNoiseWordsOn.Value = values[66];
                        twoDigitYearCutoff.Value = values[67];
                        containment.Value = values[68];
                        containmentDesc.Value = values[69];
                        targetRecoveryTimeInSeconds.Value = values[70];
                        delayedDurability.Value = values[71];
                        delayedDurabilityDesc.Value = values[72];
                        isMemoryOptimizedElevateToSnapshotOn.Value = values[73];
                        isFederationMember.Value = values[74];
                        isRemoteDataArchiveEnabled.Value = values[75];
                        isMixedPageAllocationOn.Value = values[76];
                        isTemporalHistoryRetentionEnabled.Value = values[77];
                        catalogCollationType.Value = values[78];
                        catalogCollationTypeDesc.Value = values[79];
                        physicalDatabaseName.Value = values[80];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_data_sources (data_source_id,name,location,type_desc,type,resource_manager_location,credential_id,database_name,shard_map_name,connection_options,pushdown) values (@dataSourceId, @name, @location, @typeDesc, @type, @resourceManagerLocation, @credentialId, @databaseName, @shardMapName, @connectionOptions, @pushdown)";

                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter resourceManagerLocation = new Microsoft.Data.Sqlite.SqliteParameter("@resourceManagerLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(resourceManagerLocation);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter databaseName = new Microsoft.Data.Sqlite.SqliteParameter("@databaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(databaseName);
                    Microsoft.Data.Sqlite.SqliteParameter shardMapName = new Microsoft.Data.Sqlite.SqliteParameter("@shardMapName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(shardMapName);
                    Microsoft.Data.Sqlite.SqliteParameter connectionOptions = new Microsoft.Data.Sqlite.SqliteParameter("@connectionOptions", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(connectionOptions);
                    Microsoft.Data.Sqlite.SqliteParameter pushdown = new Microsoft.Data.Sqlite.SqliteParameter("@pushdown", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pushdown);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        dataSourceId.Value = values[0];
                        name.Value = values[1];
                        location.Value = values[2];
                        typeDesc.Value = values[3];
                        type.Value = values[4];
                        resourceManagerLocation.Value = values[5];
                        credentialId.Value = values[6];
                        databaseName.Value = values[7];
                        shardMapName.Value = values[8];
                        connectionOptions.Value = values[9];
                        pushdown.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_column_id_used,uses_ansi_nulls,data_source_id,file_format_id,location,reject_type,reject_value,reject_sample_value,distribution_type,distribution_desc,sharding_col_id,remote_schema_name,remote_object_name,rejected_row_location) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxColumnIdUsed, @usesAnsiNulls, @dataSourceId, @fileFormatId, @location, @rejectType, @rejectValue, @rejectSampleValue, @distributionType, @distributionDesc, @shardingColId, @remoteSchemaName, @remoteObjectName, @rejectedRowLocation)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileFormatId = new Microsoft.Data.Sqlite.SqliteParameter("@fileFormatId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileFormatId);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter rejectType = new Microsoft.Data.Sqlite.SqliteParameter("@rejectType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectType);
                    Microsoft.Data.Sqlite.SqliteParameter rejectValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectValue);
                    Microsoft.Data.Sqlite.SqliteParameter rejectSampleValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectSampleValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectSampleValue);
                    Microsoft.Data.Sqlite.SqliteParameter distributionType = new Microsoft.Data.Sqlite.SqliteParameter("@distributionType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(distributionType);
                    Microsoft.Data.Sqlite.SqliteParameter distributionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@distributionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(distributionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter shardingColId = new Microsoft.Data.Sqlite.SqliteParameter("@shardingColId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(shardingColId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter remoteObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteObjectName);
                    Microsoft.Data.Sqlite.SqliteParameter rejectedRowLocation = new Microsoft.Data.Sqlite.SqliteParameter("@rejectedRowLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectedRowLocation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxColumnIdUsed.Value = values[12];
                        usesAnsiNulls.Value = values[13];
                        dataSourceId.Value = values[14];
                        fileFormatId.Value = values[15];
                        location.Value = values[16];
                        rejectType.Value = values[17];
                        rejectValue.Value = values[18];
                        rejectSampleValue.Value = values[19];
                        distributionType.Value = values[20];
                        distributionDesc.Value = values[21];
                        shardingColId.Value = values[22];
                        remoteSchemaName.Value = values[23];
                        remoteObjectName.Value = values[24];
                        rejectedRowLocation.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_system,filegroup_guid,log_filegroup_id,is_read_only,is_autogrow_all_files) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOnly, @isAutogrowAllFiles)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutogrowAllFiles = new Microsoft.Data.Sqlite.SqliteParameter("@isAutogrowAllFiles", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutogrowAllFiles);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];
                        isAutogrowAllFiles.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_hash_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,bucket_count,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @bucketCount, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter bucketCount = new Microsoft.Data.Sqlite.SqliteParameter("@bucketCount", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(bucketCount);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        bucketCount.Value = values[19];
                        autoCreated.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];
                        generatedAlwaysType.Value = values[29];
                        generatedAlwaysTypeDesc.Value = values[30];
                        encryptionType.Value = values[31];
                        encryptionTypeDesc.Value = values[32];
                        encryptionAlgorithmName.Value = values[33];
                        columnEncryptionKeyId.Value = values[34];
                        columnEncryptionKeyDatabaseName.Value = values[35];
                        isHidden.Value = values[36];
                        isMasked.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,compression_delay,suppress_dup_key_messages,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @compressionDelay, @suppressDupKeyMessages, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter compressionDelay = new Microsoft.Data.Sqlite.SqliteParameter("@compressionDelay", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(compressionDelay);
                    Microsoft.Data.Sqlite.SqliteParameter suppressDupKeyMessages = new Microsoft.Data.Sqlite.SqliteParameter("@suppressDupKeyMessages", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(suppressDupKeyMessages);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        compressionDelay.Value = values[19];
                        suppressDupKeyMessages.Value = values[20];
                        autoCreated.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named,is_enforced) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed, @isEnforced)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    Microsoft.Data.Sqlite.SqliteParameter isEnforced = new Microsoft.Data.Sqlite.SqliteParameter("@isEnforced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnforced);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];
                        isEnforced.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_masked_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,masking_function,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @maskingFunction, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter maskingFunction = new Microsoft.Data.Sqlite.SqliteParameter("@maskingFunction", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(maskingFunction);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        maskingFunction.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly,is_nullable,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly, @isNullable, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];
                        isNullable.Value = values[15];
                        encryptionType.Value = values[16];
                        encryptionTypeDesc.Value = values[17];
                        encryptionAlgorithmName.Value = values[18];
                        columnEncryptionKeyId.Value = values[19];
                        columnEncryptionKeyDatabaseName.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_periods (name,period_type,period_type_desc,object_id,start_column" +
                        "_id,end_column_id) values (@name, @periodType, @periodTypeDesc, @objectId, @star" +
                        "tColumnId, @endColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter periodType = new Microsoft.Data.Sqlite.SqliteParameter("@periodType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(periodType);
                    Microsoft.Data.Sqlite.SqliteParameter periodTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@periodTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(periodTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter startColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@startColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(startColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter endColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@endColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(endColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        periodType.Value = values[1];
                        periodTypeDesc.Value = values[2];
                        objectId.Value = values[3];
                        startColumnId.Value = values[4];
                        endColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_policies (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_enabled,is_not_for_replication,uses_database_collation,is_schema_bound) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isEnabled, @isNotForReplication, @usesDatabaseCollation, @isSchemaBound)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isEnabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        usesDatabaseCollation.Value = values[12];
                        isSchemaBound.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_predicates (object_id,security_predicate_id,target_object_id,predicate_definition,predicate_type,predicate_type_desc,operation,operation_desc) values (@objectId, @securityPredicateId, @targetObjectId, @predicateDefinition, @predicateType, @predicateTypeDesc, @operation, @operationDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter securityPredicateId = new Microsoft.Data.Sqlite.SqliteParameter("@securityPredicateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(securityPredicateId);
                    Microsoft.Data.Sqlite.SqliteParameter targetObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@targetObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter predicateDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@predicateDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter predicateType = new Microsoft.Data.Sqlite.SqliteParameter("@predicateType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(predicateType);
                    Microsoft.Data.Sqlite.SqliteParameter predicateTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@predicateTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter operation = new Microsoft.Data.Sqlite.SqliteParameter("@operation", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(operation);
                    Microsoft.Data.Sqlite.SqliteParameter operationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@operationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(operationDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        securityPredicateId.Value = values[1];
                        targetObjectId.Value = values[2];
                        predicateDefinition.Value = values[3];
                        predicateType.Value = values[4];
                        predicateTypeDesc.Value = values[5];
                        operation.Value = values[6];
                        operationDesc.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted,last_used_value) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted, @lastUsedValue)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    Microsoft.Data.Sqlite.SqliteParameter lastUsedValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastUsedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastUsedValue);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];
                        lastUsedValue.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        spatialIndexType.Value = values[17];
                        spatialIndexTypeDesc.Value = values[18];
                        tessellationScheme.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        autoCreated.Value = values[22];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id,uses_native_compilation,inline_type,is_inlineable) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId, @usesNativeCompilation, @inlineType, @isInlineable)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter usesNativeCompilation = new Microsoft.Data.Sqlite.SqliteParameter("@usesNativeCompilation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesNativeCompilation);
                    Microsoft.Data.Sqlite.SqliteParameter inlineType = new Microsoft.Data.Sqlite.SqliteParameter("@inlineType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(inlineType);
                    Microsoft.Data.Sqlite.SqliteParameter isInlineable = new Microsoft.Data.Sqlite.SqliteParameter("@isInlineable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInlineable);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];
                        usesNativeCompilation.Value = values[9];
                        inlineType.Value = values[10];
                        isInlineable.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recompute,has_filter,filter_definition,is_temporary,is_incremental,has_persisted_sample,stats_generation_method,stats_generation_method_desc) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @isTemporary, @isIncremental, @hasPersistedSample, @statsGenerationMethod, @statsGenerationMethodDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    Microsoft.Data.Sqlite.SqliteParameter isIncremental = new Microsoft.Data.Sqlite.SqliteParameter("@isIncremental", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncremental);
                    Microsoft.Data.Sqlite.SqliteParameter hasPersistedSample = new Microsoft.Data.Sqlite.SqliteParameter("@hasPersistedSample", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasPersistedSample);
                    Microsoft.Data.Sqlite.SqliteParameter statsGenerationMethod = new Microsoft.Data.Sqlite.SqliteParameter("@statsGenerationMethod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsGenerationMethod);
                    Microsoft.Data.Sqlite.SqliteParameter statsGenerationMethodDesc = new Microsoft.Data.Sqlite.SqliteParameter("@statsGenerationMethodDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(statsGenerationMethodDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];
                        isIncremental.Value = values[9];
                        hasPersistedSample.Value = values[10];
                        statsGenerationMethod.Value = values[11];
                        statsGenerationMethodDesc.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id,is_memory_optimized) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId, @isMemoryOptimized)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];
                        isMemoryOptimized.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable,is_memory_optimized,durability,durability_desc,temporal_type,temporal_type_desc,history_table_id,is_remote_data_archive_enabled,is_external,history_retention_period,history_retention_period_unit,history_retention_period_unit_desc,is_node,is_edge) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable, @isMemoryOptimized, @durability, @durabilityDesc, @temporalType, @temporalTypeDesc, @historyTableId, @isRemoteDataArchiveEnabled, @isExternal, @historyRetentionPeriod, @historyRetentionPeriodUnit, @historyRetentionPeriodUnitDesc, @isNode, @isEdge)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    Microsoft.Data.Sqlite.SqliteParameter durability = new Microsoft.Data.Sqlite.SqliteParameter("@durability", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(durability);
                    Microsoft.Data.Sqlite.SqliteParameter durabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@durabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(durabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter temporalType = new Microsoft.Data.Sqlite.SqliteParameter("@temporalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(temporalType);
                    Microsoft.Data.Sqlite.SqliteParameter temporalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@temporalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(temporalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter historyTableId = new Microsoft.Data.Sqlite.SqliteParameter("@historyTableId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyTableId);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isExternal = new Microsoft.Data.Sqlite.SqliteParameter("@isExternal", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExternal);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnit = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnit);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter isEdge = new Microsoft.Data.Sqlite.SqliteParameter("@isEdge", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEdge);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];
                        isMemoryOptimized.Value = values[28];
                        durability.Value = values[29];
                        durabilityDesc.Value = values[30];
                        temporalType.Value = values[31];
                        temporalTypeDesc.Value = values[32];
                        historyTableId.Value = values[33];
                        isRemoteDataArchiveEnabled.Value = values[34];
                        isExternal.Value = values[35];
                        historyRetentionPeriod.Value = values[36];
                        historyRetentionPeriodUnit.Value = values[37];
                        historyRetentionPeriodUnitDesc.Value = values[38];
                        isNode.Value = values[39];
                        isEdge.Value = values[40];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc,has_snapshot) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc, @hasSnapshot)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter hasSnapshot = new Microsoft.Data.Sqlite.SqliteParameter("@hasSnapshot", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasSnapshot);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];
                        hasSnapshot.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        usingXmlIndexId.Value = values[17];
                        secondaryType.Value = values[18];
                        secondaryTypeDesc.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        xmlIndexType.Value = values[22];
                        xmlIndexTypeDescription.Value = values[23];
                        pathId.Value = values[24];
                        autoCreated.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2017(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.column_encryption_key_values;select * from sys.column_encry" +
                        "ption_keys;select * from sys.columns;select * from sys.computed_columns;select *" +
                        " from sys.conversation_priorities;select * from sys.crypt_properties;select * fr" +
                        "om sys.data_spaces;select * from sys.database_files;select * from sys.database_f" +
                        "ilestream_options;select * from sys.database_principals;select * from sys.databa" +
                        "se_query_store_options;select * from sys.database_role_members;select * from sys" +
                        ".database_scoped_configurations;select * from sys.database_scoped_credentials;se" +
                        "lect * from sys.databases;select * from sys.default_constraints;select * from sy" +
                        "s.destination_data_spaces;select * from sys.event_notifications;select * from sy" +
                        "s.events;select * from sys.extended_properties;select * from sys.external_data_s" +
                        "ources;select * from sys.external_tables;select * from sys.filegroups;select * f" +
                        "rom sys.filetable_system_defined_objects;select * from sys.filetables;select * f" +
                        "rom sys.foreign_key_columns;select * from sys.foreign_keys;select * from sys.ful" +
                        "ltext_catalogs;select * from sys.fulltext_index_columns;select * from sys.fullte" +
                        "xt_indexes;select * from sys.fulltext_stoplists;select * from sys.function_order" +
                        "_columns;select * from sys.hash_indexes;select * from sys.identity_columns;selec" +
                        "t * from sys.index_columns;select * from sys.indexes;select * from sys.internal_" +
                        "tables;select * from sys.key_constraints;select * from sys.key_encryptions;selec" +
                        "t * from sys.masked_columns;select * from sys.numbered_procedure_parameters;sele" +
                        "ct * from sys.numbered_procedures;select * from sys.objects;select * from sys.pa" +
                        "rameters;select * from sys.partition_functions;select * from sys.partition_param" +
                        "eters;select * from sys.partition_range_values;select * from sys.partition_schem" +
                        "es;select * from sys.partitions;select * from sys.periods;select * from sys.proc" +
                        "edures;select * from sys.registered_search_properties;select * from sys.register" +
                        "ed_search_property_lists;select * from sys.remote_service_bindings;select * from" +
                        " sys.routes;select * from sys.schemas;select * from sys.security_policies;select" +
                        " * from sys.security_predicates;select * from sys.selective_xml_index_namespaces" +
                        ";select * from sys.selective_xml_index_paths;select * from sys.sequences;select " +
                        "* from sys.service_contract_message_usages;select * from sys.service_contract_us" +
                        "ages;select * from sys.service_contracts;select * from sys.service_message_types" +
                        ";select * from sys.service_queues;select * from sys.services;select * from sys.s" +
                        "patial_index_tessellations;select * from sys.spatial_indexes;select * from sys.s" +
                        "ql_modules;select * from sys.stats;select * from sys.stats_columns;select * from" +
                        " sys.symmetric_keys;select * from sys.synonyms;select * from sys.table_types;sel" +
                        "ect * from sys.tables;select * from sys.trigger_events;select * from sys.trigger" +
                        "s;select * from sys.types;select * from sys.views;select * from sys.xml_indexes;" +
                        "select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date,key_length) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate, @keyLength)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];
                        keyLength.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_key_values (column_encryption_key_id,column_mas" +
                        "ter_key_id,encrypted_value,encryption_algorithm_name) values (@columnEncryptionK" +
                        "eyId, @columnMasterKeyId, @encryptedValue, @encryptionAlgorithmName)";

                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter encryptedValue = new Microsoft.Data.Sqlite.SqliteParameter("@encryptedValue", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(encryptedValue);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        columnEncryptionKeyId.Value = values[0];
                        columnMasterKeyId.Value = values[1];
                        encryptedValue.Value = values[2];
                        encryptionAlgorithmName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_keys (name,column_encryption_key_id,create_date" +
                        ",modify_date) values (@name, @columnEncryptionKeyId, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        columnEncryptionKeyId.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];
                        graphType.Value = values[34];
                        graphTypeDesc.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        graphType.Value = values[37];
                        graphTypeDesc.Value = values[38];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,is_persistent_log_buffer,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @isPersistentLogBuffer, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter isPersistentLogBuffer = new Microsoft.Data.Sqlite.SqliteParameter("@isPersistentLogBuffer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersistentLogBuffer);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        isPersistentLogBuffer.Value = values[17];
                        createLsn.Value = values[18];
                        dropLsn.Value = values[19];
                        readOnlyLsn.Value = values[20];
                        readWriteLsn.Value = values[21];
                        differentialBaseLsn.Value = values[22];
                        differentialBaseGuid.Value = values[23];
                        differentialBaseTime.Value = values[24];
                        redoStartLsn.Value = values[25];
                        redoStartForkGuid.Value = values[26];
                        redoTargetLsn.Value = values[27];
                        redoTargetForkGuid.Value = values[28];
                        backupLsn.Value = values[29];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_filestream_options (database_id,non_transacted_access,no" +
                        "n_transacted_access_desc,directory_name) values (@databaseId, @nonTransactedAcce" +
                        "ss, @nonTransactedAccessDesc, @directoryName)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccess = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(nonTransactedAccess);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(nonTransactedAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        nonTransactedAccess.Value = values[1];
                        nonTransactedAccessDesc.Value = values[2];
                        directoryName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid,allow_encrypted_value_modifications) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid, @allowEncryptedValueModifications)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter allowEncryptedValueModifications = new Microsoft.Data.Sqlite.SqliteParameter("@allowEncryptedValueModifications", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowEncryptedValueModifications);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];
                        allowEncryptedValueModifications.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_query_store_options (desired_state,desired_state_desc,actual_state,actual_state_desc,readonly_reason,current_storage_size_mb,flush_interval_seconds,interval_length_minutes,max_storage_size_mb,stale_query_threshold_days,max_plans_per_query,query_capture_mode,query_capture_mode_desc,size_based_cleanup_mode,size_based_cleanup_mode_desc,wait_stats_capture_mode,wait_stats_capture_mode_desc,actual_state_additional_info) values (@desiredState, @desiredStateDesc, @actualState, @actualStateDesc, @readonlyReason, @currentStorageSizeMb, @flushIntervalSeconds, @intervalLengthMinutes, @maxStorageSizeMb, @staleQueryThresholdDays, @maxPlansPerQuery, @queryCaptureMode, @queryCaptureModeDesc, @sizeBasedCleanupMode, @sizeBasedCleanupModeDesc, @waitStatsCaptureMode, @waitStatsCaptureModeDesc, @actualStateAdditionalInfo)";

                    Microsoft.Data.Sqlite.SqliteParameter desiredState = new Microsoft.Data.Sqlite.SqliteParameter("@desiredState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(desiredState);
                    Microsoft.Data.Sqlite.SqliteParameter desiredStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@desiredStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(desiredStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualState = new Microsoft.Data.Sqlite.SqliteParameter("@actualState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(actualState);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter readonlyReason = new Microsoft.Data.Sqlite.SqliteParameter("@readonlyReason", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(readonlyReason);
                    Microsoft.Data.Sqlite.SqliteParameter currentStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@currentStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(currentStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter flushIntervalSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@flushIntervalSeconds", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(flushIntervalSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter intervalLengthMinutes = new Microsoft.Data.Sqlite.SqliteParameter("@intervalLengthMinutes", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(intervalLengthMinutes);
                    Microsoft.Data.Sqlite.SqliteParameter maxStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@maxStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter staleQueryThresholdDays = new Microsoft.Data.Sqlite.SqliteParameter("@staleQueryThresholdDays", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(staleQueryThresholdDays);
                    Microsoft.Data.Sqlite.SqliteParameter maxPlansPerQuery = new Microsoft.Data.Sqlite.SqliteParameter("@maxPlansPerQuery", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxPlansPerQuery);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(queryCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(queryCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupMode = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupMode);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(waitStatsCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter waitStatsCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@waitStatsCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(waitStatsCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateAdditionalInfo = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateAdditionalInfo", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateAdditionalInfo);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        desiredState.Value = values[0];
                        desiredStateDesc.Value = values[1];
                        actualState.Value = values[2];
                        actualStateDesc.Value = values[3];
                        readonlyReason.Value = values[4];
                        currentStorageSizeMb.Value = values[5];
                        flushIntervalSeconds.Value = values[6];
                        intervalLengthMinutes.Value = values[7];
                        maxStorageSizeMb.Value = values[8];
                        staleQueryThresholdDays.Value = values[9];
                        maxPlansPerQuery.Value = values[10];
                        queryCaptureMode.Value = values[11];
                        queryCaptureModeDesc.Value = values[12];
                        sizeBasedCleanupMode.Value = values[13];
                        sizeBasedCleanupModeDesc.Value = values[14];
                        waitStatsCaptureMode.Value = values[15];
                        waitStatsCaptureModeDesc.Value = values[16];
                        actualStateAdditionalInfo.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_scoped_configurations (configuration_id,name,value,value" +
                        "_for_secondary,is_value_default) values (@configurationId, @name, @value, @value" +
                        "ForSecondary, @isValueDefault)";

                    Microsoft.Data.Sqlite.SqliteParameter configurationId = new Microsoft.Data.Sqlite.SqliteParameter("@configurationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(configurationId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    Microsoft.Data.Sqlite.SqliteParameter valueForSecondary = new Microsoft.Data.Sqlite.SqliteParameter("@valueForSecondary", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(valueForSecondary);
                    Microsoft.Data.Sqlite.SqliteParameter isValueDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isValueDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isValueDefault);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        configurationId.Value = values[0];
                        name.Value = values[1];
                        value.Value = values[2];
                        valueForSecondary.Value = values[3];
                        isValueDefault.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_scoped_credentials (name,principal_id,credential_id,credential_identity,create_date,modify_date,target_type,target_id) values (@name, @principalId, @credentialId, @credentialIdentity, @createDate, @modifyDate, @targetType, @targetId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter credentialIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@credentialIdentity", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(credentialIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter targetType = new Microsoft.Data.Sqlite.SqliteParameter("@targetType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(targetType);
                    Microsoft.Data.Sqlite.SqliteParameter targetId = new Microsoft.Data.Sqlite.SqliteParameter("@targetId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        credentialId.Value = values[2];
                        credentialIdentity.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];
                        targetType.Value = values[6];
                        targetId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_create" +
                        "_stats_incremental_on,is_auto_update_stats_on,is_auto_update_stats_async_on,is_a" +
                        "nsi_null_default_on,is_ansi_nulls_on,is_ansi_padding_on,is_ansi_warnings_on,is_a" +
                        "rithabort_on,is_concat_null_yields_null_on,is_numeric_roundabort_on,is_quoted_id" +
                        "entifier_on,is_recursive_triggers_on,is_cursor_close_on_commit_on,is_local_curso" +
                        "r_default,is_fulltext_enabled,is_trustworthy_on,is_db_chaining_on,is_parameteriz" +
                        "ation_forced,is_master_key_encrypted_by_server,is_query_store_on,is_published,is" +
                        "_subscribed,is_merge_published,is_distributor,is_sync_with_backup,service_broker" +
                        "_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_desc,is_date_correlation_o" +
                        "n,is_cdc_enabled,is_encrypted,is_honor_broker_priority_on,replica_id,group_datab" +
                        "ase_id,resource_pool_id,default_language_lcid,default_language_name,default_full" +
                        "text_language_lcid,default_fulltext_language_name,is_nested_triggers_on,is_trans" +
                        "form_noise_words_on,two_digit_year_cutoff,containment,containment_desc,target_re" +
                        "covery_time_in_seconds,delayed_durability,delayed_durability_desc,is_memory_opti" +
                        "mized_elevate_to_snapshot_on,is_federation_member,is_remote_data_archive_enabled" +
                        ",is_mixed_page_allocation_on,is_temporal_history_retention_enabled) values (@nam" +
                        "e, @databaseId, @sourceDatabaseId, @ownerSid, @createDate, @compatibilityLevel, " +
                        "@collationName, @userAccess, @userAccessDesc, @isReadOnly, @isAutoCloseOn, @isAu" +
                        "toShrinkOn, @state, @stateDesc, @isInStandby, @isCleanlyShutdown, @isSupplementa" +
                        "lLoggingEnabled, @snapshotIsolationState, @snapshotIsolationStateDesc, @isReadCo" +
                        "mmittedSnapshotOn, @recoveryModel, @recoveryModelDesc, @pageVerifyOption, @pageV" +
                        "erifyOptionDesc, @isAutoCreateStatsOn, @isAutoCreateStatsIncrementalOn, @isAutoU" +
                        "pdateStatsOn, @isAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAnsiNullsOn, @" +
                        "isAnsiPaddingOn, @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYieldsNullOn, " +
                        "@isNumericRoundabortOn, @isQuotedIdentifierOn, @isRecursiveTriggersOn, @isCursor" +
                        "CloseOnCommitOn, @isLocalCursorDefault, @isFulltextEnabled, @isTrustworthyOn, @i" +
                        "sDbChainingOn, @isParameterizationForced, @isMasterKeyEncryptedByServer, @isQuer" +
                        "yStoreOn, @isPublished, @isSubscribed, @isMergePublished, @isDistributor, @isSyn" +
                        "cWithBackup, @serviceBrokerGuid, @isBrokerEnabled, @logReuseWait, @logReuseWaitD" +
                        "esc, @isDateCorrelationOn, @isCdcEnabled, @isEncrypted, @isHonorBrokerPriorityOn" +
                        ", @replicaId, @groupDatabaseId, @resourcePoolId, @defaultLanguageLcid, @defaultL" +
                        "anguageName, @defaultFulltextLanguageLcid, @defaultFulltextLanguageName, @isNest" +
                        "edTriggersOn, @isTransformNoiseWordsOn, @twoDigitYearCutoff, @containment, @cont" +
                        "ainmentDesc, @targetRecoveryTimeInSeconds, @delayedDurability, @delayedDurabilit" +
                        "yDesc, @isMemoryOptimizedElevateToSnapshotOn, @isFederationMember, @isRemoteData" +
                        "ArchiveEnabled, @isMixedPageAllocationOn, @isTemporalHistoryRetentionEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsIncrementalOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsIncrementalOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsIncrementalOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isQueryStoreOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQueryStoreOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQueryStoreOn);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter resourcePoolId = new Microsoft.Data.Sqlite.SqliteParameter("@resourcePoolId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(resourcePoolId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurability = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurability", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(delayedDurability);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(delayedDurabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimizedElevateToSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimizedElevateToSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimizedElevateToSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter isFederationMember = new Microsoft.Data.Sqlite.SqliteParameter("@isFederationMember", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFederationMember);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isMixedPageAllocationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMixedPageAllocationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMixedPageAllocationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporalHistoryRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporalHistoryRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporalHistoryRetentionEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoCreateStatsIncrementalOn.Value = values[25];
                        isAutoUpdateStatsOn.Value = values[26];
                        isAutoUpdateStatsAsyncOn.Value = values[27];
                        isAnsiNullDefaultOn.Value = values[28];
                        isAnsiNullsOn.Value = values[29];
                        isAnsiPaddingOn.Value = values[30];
                        isAnsiWarningsOn.Value = values[31];
                        isArithabortOn.Value = values[32];
                        isConcatNullYieldsNullOn.Value = values[33];
                        isNumericRoundabortOn.Value = values[34];
                        isQuotedIdentifierOn.Value = values[35];
                        isRecursiveTriggersOn.Value = values[36];
                        isCursorCloseOnCommitOn.Value = values[37];
                        isLocalCursorDefault.Value = values[38];
                        isFulltextEnabled.Value = values[39];
                        isTrustworthyOn.Value = values[40];
                        isDbChainingOn.Value = values[41];
                        isParameterizationForced.Value = values[42];
                        isMasterKeyEncryptedByServer.Value = values[43];
                        isQueryStoreOn.Value = values[44];
                        isPublished.Value = values[45];
                        isSubscribed.Value = values[46];
                        isMergePublished.Value = values[47];
                        isDistributor.Value = values[48];
                        isSyncWithBackup.Value = values[49];
                        serviceBrokerGuid.Value = values[50];
                        isBrokerEnabled.Value = values[51];
                        logReuseWait.Value = values[52];
                        logReuseWaitDesc.Value = values[53];
                        isDateCorrelationOn.Value = values[54];
                        isCdcEnabled.Value = values[55];
                        isEncrypted.Value = values[56];
                        isHonorBrokerPriorityOn.Value = values[57];
                        replicaId.Value = values[58];
                        groupDatabaseId.Value = values[59];
                        resourcePoolId.Value = values[60];
                        defaultLanguageLcid.Value = values[61];
                        defaultLanguageName.Value = values[62];
                        defaultFulltextLanguageLcid.Value = values[63];
                        defaultFulltextLanguageName.Value = values[64];
                        isNestedTriggersOn.Value = values[65];
                        isTransformNoiseWordsOn.Value = values[66];
                        twoDigitYearCutoff.Value = values[67];
                        containment.Value = values[68];
                        containmentDesc.Value = values[69];
                        targetRecoveryTimeInSeconds.Value = values[70];
                        delayedDurability.Value = values[71];
                        delayedDurabilityDesc.Value = values[72];
                        isMemoryOptimizedElevateToSnapshotOn.Value = values[73];
                        isFederationMember.Value = values[74];
                        isRemoteDataArchiveEnabled.Value = values[75];
                        isMixedPageAllocationOn.Value = values[76];
                        isTemporalHistoryRetentionEnabled.Value = values[77];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_data_sources (data_source_id,name,location,type_desc,type,resource_manager_location,credential_id,database_name,shard_map_name) values (@dataSourceId, @name, @location, @typeDesc, @type, @resourceManagerLocation, @credentialId, @databaseName, @shardMapName)";

                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter resourceManagerLocation = new Microsoft.Data.Sqlite.SqliteParameter("@resourceManagerLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(resourceManagerLocation);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter databaseName = new Microsoft.Data.Sqlite.SqliteParameter("@databaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(databaseName);
                    Microsoft.Data.Sqlite.SqliteParameter shardMapName = new Microsoft.Data.Sqlite.SqliteParameter("@shardMapName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(shardMapName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        dataSourceId.Value = values[0];
                        name.Value = values[1];
                        location.Value = values[2];
                        typeDesc.Value = values[3];
                        type.Value = values[4];
                        resourceManagerLocation.Value = values[5];
                        credentialId.Value = values[6];
                        databaseName.Value = values[7];
                        shardMapName.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_column_id_used,uses_ansi_nulls,data_source_id,file_format_id,location,reject_type,reject_value,reject_sample_value,distribution_type,distribution_desc,sharding_col_id,remote_schema_name,remote_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxColumnIdUsed, @usesAnsiNulls, @dataSourceId, @fileFormatId, @location, @rejectType, @rejectValue, @rejectSampleValue, @distributionType, @distributionDesc, @shardingColId, @remoteSchemaName, @remoteObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileFormatId = new Microsoft.Data.Sqlite.SqliteParameter("@fileFormatId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileFormatId);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter rejectType = new Microsoft.Data.Sqlite.SqliteParameter("@rejectType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectType);
                    Microsoft.Data.Sqlite.SqliteParameter rejectValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectValue);
                    Microsoft.Data.Sqlite.SqliteParameter rejectSampleValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectSampleValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectSampleValue);
                    Microsoft.Data.Sqlite.SqliteParameter distributionType = new Microsoft.Data.Sqlite.SqliteParameter("@distributionType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(distributionType);
                    Microsoft.Data.Sqlite.SqliteParameter distributionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@distributionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(distributionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter shardingColId = new Microsoft.Data.Sqlite.SqliteParameter("@shardingColId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(shardingColId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter remoteObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxColumnIdUsed.Value = values[12];
                        usesAnsiNulls.Value = values[13];
                        dataSourceId.Value = values[14];
                        fileFormatId.Value = values[15];
                        location.Value = values[16];
                        rejectType.Value = values[17];
                        rejectValue.Value = values[18];
                        rejectSampleValue.Value = values[19];
                        distributionType.Value = values[20];
                        distributionDesc.Value = values[21];
                        shardingColId.Value = values[22];
                        remoteSchemaName.Value = values[23];
                        remoteObjectName.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_system,filegroup_guid,log_filegroup_id,is_read_only,is_autogrow_all_files) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOnly, @isAutogrowAllFiles)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutogrowAllFiles = new Microsoft.Data.Sqlite.SqliteParameter("@isAutogrowAllFiles", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutogrowAllFiles);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];
                        isAutogrowAllFiles.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_hash_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,bucket_count,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @bucketCount, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter bucketCount = new Microsoft.Data.Sqlite.SqliteParameter("@bucketCount", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(bucketCount);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        bucketCount.Value = values[19];
                        autoCreated.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];
                        generatedAlwaysType.Value = values[29];
                        generatedAlwaysTypeDesc.Value = values[30];
                        encryptionType.Value = values[31];
                        encryptionTypeDesc.Value = values[32];
                        encryptionAlgorithmName.Value = values[33];
                        columnEncryptionKeyId.Value = values[34];
                        columnEncryptionKeyDatabaseName.Value = values[35];
                        isHidden.Value = values[36];
                        isMasked.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,has_filter,filter_definition,compression_delay,suppress_dup_key_messages,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @compressionDelay, @suppressDupKeyMessages, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter compressionDelay = new Microsoft.Data.Sqlite.SqliteParameter("@compressionDelay", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(compressionDelay);
                    Microsoft.Data.Sqlite.SqliteParameter suppressDupKeyMessages = new Microsoft.Data.Sqlite.SqliteParameter("@suppressDupKeyMessages", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(suppressDupKeyMessages);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        hasFilter.Value = values[17];
                        filterDefinition.Value = values[18];
                        compressionDelay.Value = values[19];
                        suppressDupKeyMessages.Value = values[20];
                        autoCreated.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named,is_enforced) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed, @isEnforced)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    Microsoft.Data.Sqlite.SqliteParameter isEnforced = new Microsoft.Data.Sqlite.SqliteParameter("@isEnforced", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(isEnforced);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];
                        isEnforced.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_masked_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,masking_function,graph_type,graph_type_desc) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @maskingFunction, @graphType, @graphTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter maskingFunction = new Microsoft.Data.Sqlite.SqliteParameter("@maskingFunction", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(maskingFunction);
                    Microsoft.Data.Sqlite.SqliteParameter graphType = new Microsoft.Data.Sqlite.SqliteParameter("@graphType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(graphType);
                    Microsoft.Data.Sqlite.SqliteParameter graphTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@graphTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(graphTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        maskingFunction.Value = values[37];
                        graphType.Value = values[38];
                        graphTypeDesc.Value = values[39];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly,is_nullable,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly, @isNullable, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];
                        isNullable.Value = values[15];
                        encryptionType.Value = values[16];
                        encryptionTypeDesc.Value = values[17];
                        encryptionAlgorithmName.Value = values[18];
                        columnEncryptionKeyId.Value = values[19];
                        columnEncryptionKeyDatabaseName.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_periods (name,period_type,period_type_desc,object_id,start_column" +
                        "_id,end_column_id) values (@name, @periodType, @periodTypeDesc, @objectId, @star" +
                        "tColumnId, @endColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter periodType = new Microsoft.Data.Sqlite.SqliteParameter("@periodType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(periodType);
                    Microsoft.Data.Sqlite.SqliteParameter periodTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@periodTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(periodTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter startColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@startColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(startColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter endColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@endColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(endColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        periodType.Value = values[1];
                        periodTypeDesc.Value = values[2];
                        objectId.Value = values[3];
                        startColumnId.Value = values[4];
                        endColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_policies (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_enabled,is_not_for_replication,uses_database_collation,is_schema_bound) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isEnabled, @isNotForReplication, @usesDatabaseCollation, @isSchemaBound)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isEnabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        usesDatabaseCollation.Value = values[12];
                        isSchemaBound.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_predicates (object_id,security_predicate_id,target_object_id,predicate_definition,predicate_type,predicate_type_desc,operation,operation_desc) values (@objectId, @securityPredicateId, @targetObjectId, @predicateDefinition, @predicateType, @predicateTypeDesc, @operation, @operationDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter securityPredicateId = new Microsoft.Data.Sqlite.SqliteParameter("@securityPredicateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(securityPredicateId);
                    Microsoft.Data.Sqlite.SqliteParameter targetObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@targetObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter predicateDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@predicateDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter predicateType = new Microsoft.Data.Sqlite.SqliteParameter("@predicateType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(predicateType);
                    Microsoft.Data.Sqlite.SqliteParameter predicateTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@predicateTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter operation = new Microsoft.Data.Sqlite.SqliteParameter("@operation", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(operation);
                    Microsoft.Data.Sqlite.SqliteParameter operationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@operationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(operationDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        securityPredicateId.Value = values[1];
                        targetObjectId.Value = values[2];
                        predicateDefinition.Value = values[3];
                        predicateType.Value = values[4];
                        predicateTypeDesc.Value = values[5];
                        operation.Value = values[6];
                        operationDesc.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted,last_used_value) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted, @lastUsedValue)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    Microsoft.Data.Sqlite.SqliteParameter lastUsedValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastUsedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastUsedValue);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];
                        lastUsedValue.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        spatialIndexType.Value = values[17];
                        spatialIndexTypeDesc.Value = values[18];
                        tessellationScheme.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        autoCreated.Value = values[22];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id,uses_native_compilation) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId, @usesNativeCompilation)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter usesNativeCompilation = new Microsoft.Data.Sqlite.SqliteParameter("@usesNativeCompilation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesNativeCompilation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];
                        usesNativeCompilation.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recompute,has_filter,filter_definition,is_temporary,is_incremental) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @isTemporary, @isIncremental)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    Microsoft.Data.Sqlite.SqliteParameter isIncremental = new Microsoft.Data.Sqlite.SqliteParameter("@isIncremental", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncremental);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];
                        isIncremental.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id,is_memory_optimized) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId, @isMemoryOptimized)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];
                        isMemoryOptimized.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable,is_memory_optimized,durability,durability_desc,temporal_type,temporal_type_desc,history_table_id,is_remote_data_archive_enabled,is_external,history_retention_period,history_retention_period_unit,history_retention_period_unit_desc,is_node,is_edge) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable, @isMemoryOptimized, @durability, @durabilityDesc, @temporalType, @temporalTypeDesc, @historyTableId, @isRemoteDataArchiveEnabled, @isExternal, @historyRetentionPeriod, @historyRetentionPeriodUnit, @historyRetentionPeriodUnitDesc, @isNode, @isEdge)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    Microsoft.Data.Sqlite.SqliteParameter durability = new Microsoft.Data.Sqlite.SqliteParameter("@durability", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(durability);
                    Microsoft.Data.Sqlite.SqliteParameter durabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@durabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(durabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter temporalType = new Microsoft.Data.Sqlite.SqliteParameter("@temporalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(temporalType);
                    Microsoft.Data.Sqlite.SqliteParameter temporalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@temporalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(temporalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter historyTableId = new Microsoft.Data.Sqlite.SqliteParameter("@historyTableId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyTableId);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isExternal = new Microsoft.Data.Sqlite.SqliteParameter("@isExternal", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExternal);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnit = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnit);
                    Microsoft.Data.Sqlite.SqliteParameter historyRetentionPeriodUnitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@historyRetentionPeriodUnitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(historyRetentionPeriodUnitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter isEdge = new Microsoft.Data.Sqlite.SqliteParameter("@isEdge", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEdge);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];
                        isMemoryOptimized.Value = values[28];
                        durability.Value = values[29];
                        durabilityDesc.Value = values[30];
                        temporalType.Value = values[31];
                        temporalTypeDesc.Value = values[32];
                        historyTableId.Value = values[33];
                        isRemoteDataArchiveEnabled.Value = values[34];
                        isExternal.Value = values[35];
                        historyRetentionPeriod.Value = values[36];
                        historyRetentionPeriodUnit.Value = values[37];
                        historyRetentionPeriodUnitDesc.Value = values[38];
                        isNode.Value = values[39];
                        isEdge.Value = values[40];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,is_ignored_in_optimization,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id,auto_created) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @isIgnoredInOptimization, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId, @autoCreated)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter isIgnoredInOptimization = new Microsoft.Data.Sqlite.SqliteParameter("@isIgnoredInOptimization", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIgnoredInOptimization);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        isIgnoredInOptimization.Value = values[14];
                        allowRowLocks.Value = values[15];
                        allowPageLocks.Value = values[16];
                        usingXmlIndexId.Value = values[17];
                        secondaryType.Value = values[18];
                        secondaryTypeDesc.Value = values[19];
                        hasFilter.Value = values[20];
                        filterDefinition.Value = values[21];
                        xmlIndexType.Value = values[22];
                        xmlIndexTypeDescription.Value = values[23];
                        pathId.Value = values[24];
                        autoCreated.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2016(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.column_encryption_key_values;select * from sys.column_encry" +
                        "ption_keys;select * from sys.columns;select * from sys.computed_columns;select *" +
                        " from sys.conversation_priorities;select * from sys.crypt_properties;select * fr" +
                        "om sys.data_spaces;select * from sys.database_files;select * from sys.database_f" +
                        "ilestream_options;select * from sys.database_principals;select * from sys.databa" +
                        "se_query_store_options;select * from sys.database_role_members;select * from sys" +
                        ".database_scoped_configurations;select * from sys.database_scoped_credentials;se" +
                        "lect * from sys.databases;select * from sys.default_constraints;select * from sy" +
                        "s.destination_data_spaces;select * from sys.event_notifications;select * from sy" +
                        "s.events;select * from sys.extended_properties;select * from sys.external_data_s" +
                        "ources;select * from sys.external_tables;select * from sys.filegroups;select * f" +
                        "rom sys.filetable_system_defined_objects;select * from sys.filetables;select * f" +
                        "rom sys.foreign_key_columns;select * from sys.foreign_keys;select * from sys.ful" +
                        "ltext_catalogs;select * from sys.fulltext_index_columns;select * from sys.fullte" +
                        "xt_indexes;select * from sys.fulltext_stoplists;select * from sys.function_order" +
                        "_columns;select * from sys.hash_indexes;select * from sys.identity_columns;selec" +
                        "t * from sys.index_columns;select * from sys.indexes;select * from sys.internal_" +
                        "tables;select * from sys.key_constraints;select * from sys.key_encryptions;selec" +
                        "t * from sys.masked_columns;select * from sys.numbered_procedure_parameters;sele" +
                        "ct * from sys.numbered_procedures;select * from sys.objects;select * from sys.pa" +
                        "rameters;select * from sys.partition_functions;select * from sys.partition_param" +
                        "eters;select * from sys.partition_range_values;select * from sys.partition_schem" +
                        "es;select * from sys.partitions;select * from sys.periods;select * from sys.proc" +
                        "edures;select * from sys.registered_search_properties;select * from sys.register" +
                        "ed_search_property_lists;select * from sys.remote_service_bindings;select * from" +
                        " sys.routes;select * from sys.schemas;select * from sys.security_policies;select" +
                        " * from sys.security_predicates;select * from sys.selective_xml_index_namespaces" +
                        ";select * from sys.selective_xml_index_paths;select * from sys.sequences;select " +
                        "* from sys.service_contract_message_usages;select * from sys.service_contract_us" +
                        "ages;select * from sys.service_contracts;select * from sys.service_message_types" +
                        ";select * from sys.service_queues;select * from sys.services;select * from sys.s" +
                        "patial_index_tessellations;select * from sys.spatial_indexes;select * from sys.s" +
                        "ql_modules;select * from sys.stats;select * from sys.stats_columns;select * from" +
                        " sys.symmetric_keys;select * from sys.synonyms;select * from sys.table_types;sel" +
                        "ect * from sys.tables;select * from sys.trigger_events;select * from sys.trigger" +
                        "s;select * from sys.types;select * from sys.views;select * from sys.xml_indexes;" +
                        "select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date,key_length) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate, @keyLength)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];
                        keyLength.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_key_values (column_encryption_key_id,column_mas" +
                        "ter_key_id,encrypted_value,encryption_algorithm_name) values (@columnEncryptionK" +
                        "eyId, @columnMasterKeyId, @encryptedValue, @encryptionAlgorithmName)";

                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnMasterKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnMasterKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnMasterKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter encryptedValue = new Microsoft.Data.Sqlite.SqliteParameter("@encryptedValue", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(encryptedValue);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        columnEncryptionKeyId.Value = values[0];
                        columnMasterKeyId.Value = values[1];
                        encryptedValue.Value = values[2];
                        encryptionAlgorithmName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_column_encryption_keys (name,column_encryption_key_id,create_date" +
                        ",modify_date) values (@name, @columnEncryptionKeyId, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        columnEncryptionKeyId.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];
                        generatedAlwaysType.Value = values[25];
                        generatedAlwaysTypeDesc.Value = values[26];
                        encryptionType.Value = values[27];
                        encryptionTypeDesc.Value = values[28];
                        encryptionAlgorithmName.Value = values[29];
                        columnEncryptionKeyId.Value = values[30];
                        columnEncryptionKeyDatabaseName.Value = values[31];
                        isHidden.Value = values[32];
                        isMasked.Value = values[33];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        createLsn.Value = values[17];
                        dropLsn.Value = values[18];
                        readOnlyLsn.Value = values[19];
                        readWriteLsn.Value = values[20];
                        differentialBaseLsn.Value = values[21];
                        differentialBaseGuid.Value = values[22];
                        differentialBaseTime.Value = values[23];
                        redoStartLsn.Value = values[24];
                        redoStartForkGuid.Value = values[25];
                        redoTargetLsn.Value = values[26];
                        redoTargetForkGuid.Value = values[27];
                        backupLsn.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_filestream_options (database_id,non_transacted_access,no" +
                        "n_transacted_access_desc,directory_name) values (@databaseId, @nonTransactedAcce" +
                        "ss, @nonTransactedAccessDesc, @directoryName)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccess = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(nonTransactedAccess);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(nonTransactedAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        nonTransactedAccess.Value = values[1];
                        nonTransactedAccessDesc.Value = values[2];
                        directoryName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid,allow_encrypted_value_modifications) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid, @allowEncryptedValueModifications)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter allowEncryptedValueModifications = new Microsoft.Data.Sqlite.SqliteParameter("@allowEncryptedValueModifications", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowEncryptedValueModifications);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];
                        allowEncryptedValueModifications.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_query_store_options (desired_state,desired_state_desc,actual_state,actual_state_desc,readonly_reason,current_storage_size_mb,flush_interval_seconds,interval_length_minutes,max_storage_size_mb,stale_query_threshold_days,max_plans_per_query,query_capture_mode,query_capture_mode_desc,size_based_cleanup_mode,size_based_cleanup_mode_desc,actual_state_additional_info) values (@desiredState, @desiredStateDesc, @actualState, @actualStateDesc, @readonlyReason, @currentStorageSizeMb, @flushIntervalSeconds, @intervalLengthMinutes, @maxStorageSizeMb, @staleQueryThresholdDays, @maxPlansPerQuery, @queryCaptureMode, @queryCaptureModeDesc, @sizeBasedCleanupMode, @sizeBasedCleanupModeDesc, @actualStateAdditionalInfo)";

                    Microsoft.Data.Sqlite.SqliteParameter desiredState = new Microsoft.Data.Sqlite.SqliteParameter("@desiredState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(desiredState);
                    Microsoft.Data.Sqlite.SqliteParameter desiredStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@desiredStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(desiredStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualState = new Microsoft.Data.Sqlite.SqliteParameter("@actualState", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(actualState);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter readonlyReason = new Microsoft.Data.Sqlite.SqliteParameter("@readonlyReason", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(readonlyReason);
                    Microsoft.Data.Sqlite.SqliteParameter currentStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@currentStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(currentStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter flushIntervalSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@flushIntervalSeconds", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(flushIntervalSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter intervalLengthMinutes = new Microsoft.Data.Sqlite.SqliteParameter("@intervalLengthMinutes", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(intervalLengthMinutes);
                    Microsoft.Data.Sqlite.SqliteParameter maxStorageSizeMb = new Microsoft.Data.Sqlite.SqliteParameter("@maxStorageSizeMb", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxStorageSizeMb);
                    Microsoft.Data.Sqlite.SqliteParameter staleQueryThresholdDays = new Microsoft.Data.Sqlite.SqliteParameter("@staleQueryThresholdDays", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(staleQueryThresholdDays);
                    Microsoft.Data.Sqlite.SqliteParameter maxPlansPerQuery = new Microsoft.Data.Sqlite.SqliteParameter("@maxPlansPerQuery", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxPlansPerQuery);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureMode = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(queryCaptureMode);
                    Microsoft.Data.Sqlite.SqliteParameter queryCaptureModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@queryCaptureModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(queryCaptureModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupMode = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupMode", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupMode);
                    Microsoft.Data.Sqlite.SqliteParameter sizeBasedCleanupModeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@sizeBasedCleanupModeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(sizeBasedCleanupModeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter actualStateAdditionalInfo = new Microsoft.Data.Sqlite.SqliteParameter("@actualStateAdditionalInfo", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(actualStateAdditionalInfo);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        desiredState.Value = values[0];
                        desiredStateDesc.Value = values[1];
                        actualState.Value = values[2];
                        actualStateDesc.Value = values[3];
                        readonlyReason.Value = values[4];
                        currentStorageSizeMb.Value = values[5];
                        flushIntervalSeconds.Value = values[6];
                        intervalLengthMinutes.Value = values[7];
                        maxStorageSizeMb.Value = values[8];
                        staleQueryThresholdDays.Value = values[9];
                        maxPlansPerQuery.Value = values[10];
                        queryCaptureMode.Value = values[11];
                        queryCaptureModeDesc.Value = values[12];
                        sizeBasedCleanupMode.Value = values[13];
                        sizeBasedCleanupModeDesc.Value = values[14];
                        actualStateAdditionalInfo.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_scoped_configurations (configuration_id,name,value,value" +
                        "_for_secondary) values (@configurationId, @name, @value, @valueForSecondary)";

                    Microsoft.Data.Sqlite.SqliteParameter configurationId = new Microsoft.Data.Sqlite.SqliteParameter("@configurationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(configurationId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    Microsoft.Data.Sqlite.SqliteParameter valueForSecondary = new Microsoft.Data.Sqlite.SqliteParameter("@valueForSecondary", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(valueForSecondary);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        configurationId.Value = values[0];
                        name.Value = values[1];
                        value.Value = values[2];
                        valueForSecondary.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_scoped_credentials (credential_id,name,credential_identi" +
                        "ty,create_date,modify_date,target_type,target_id) values (@credentialId, @name, " +
                        "@credentialIdentity, @createDate, @modifyDate, @targetType, @targetId)";

                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter credentialIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@credentialIdentity", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(credentialIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter targetType = new Microsoft.Data.Sqlite.SqliteParameter("@targetType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(targetType);
                    Microsoft.Data.Sqlite.SqliteParameter targetId = new Microsoft.Data.Sqlite.SqliteParameter("@targetId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        credentialId.Value = values[0];
                        name.Value = values[1];
                        credentialIdentity.Value = values[2];
                        createDate.Value = values[3];
                        modifyDate.Value = values[4];
                        targetType.Value = values[5];
                        targetId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_create" +
                        "_stats_incremental_on,is_auto_update_stats_on,is_auto_update_stats_async_on,is_a" +
                        "nsi_null_default_on,is_ansi_nulls_on,is_ansi_padding_on,is_ansi_warnings_on,is_a" +
                        "rithabort_on,is_concat_null_yields_null_on,is_numeric_roundabort_on,is_quoted_id" +
                        "entifier_on,is_recursive_triggers_on,is_cursor_close_on_commit_on,is_local_curso" +
                        "r_default,is_fulltext_enabled,is_trustworthy_on,is_db_chaining_on,is_parameteriz" +
                        "ation_forced,is_master_key_encrypted_by_server,is_query_store_on,is_published,is" +
                        "_subscribed,is_merge_published,is_distributor,is_sync_with_backup,service_broker" +
                        "_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_desc,is_date_correlation_o" +
                        "n,is_cdc_enabled,is_encrypted,is_honor_broker_priority_on,replica_id,group_datab" +
                        "ase_id,resource_pool_id,default_language_lcid,default_language_name,default_full" +
                        "text_language_lcid,default_fulltext_language_name,is_nested_triggers_on,is_trans" +
                        "form_noise_words_on,two_digit_year_cutoff,containment,containment_desc,target_re" +
                        "covery_time_in_seconds,delayed_durability,delayed_durability_desc,is_memory_opti" +
                        "mized_elevate_to_snapshot_on,is_federation_member,is_remote_data_archive_enabled" +
                        ",is_mixed_page_allocation_on) values (@name, @databaseId, @sourceDatabaseId, @ow" +
                        "nerSid, @createDate, @compatibilityLevel, @collationName, @userAccess, @userAcce" +
                        "ssDesc, @isReadOnly, @isAutoCloseOn, @isAutoShrinkOn, @state, @stateDesc, @isInS" +
                        "tandby, @isCleanlyShutdown, @isSupplementalLoggingEnabled, @snapshotIsolationSta" +
                        "te, @snapshotIsolationStateDesc, @isReadCommittedSnapshotOn, @recoveryModel, @re" +
                        "coveryModelDesc, @pageVerifyOption, @pageVerifyOptionDesc, @isAutoCreateStatsOn," +
                        " @isAutoCreateStatsIncrementalOn, @isAutoUpdateStatsOn, @isAutoUpdateStatsAsyncO" +
                        "n, @isAnsiNullDefaultOn, @isAnsiNullsOn, @isAnsiPaddingOn, @isAnsiWarningsOn, @i" +
                        "sArithabortOn, @isConcatNullYieldsNullOn, @isNumericRoundabortOn, @isQuotedIdent" +
                        "ifierOn, @isRecursiveTriggersOn, @isCursorCloseOnCommitOn, @isLocalCursorDefault" +
                        ", @isFulltextEnabled, @isTrustworthyOn, @isDbChainingOn, @isParameterizationForc" +
                        "ed, @isMasterKeyEncryptedByServer, @isQueryStoreOn, @isPublished, @isSubscribed," +
                        " @isMergePublished, @isDistributor, @isSyncWithBackup, @serviceBrokerGuid, @isBr" +
                        "okerEnabled, @logReuseWait, @logReuseWaitDesc, @isDateCorrelationOn, @isCdcEnabl" +
                        "ed, @isEncrypted, @isHonorBrokerPriorityOn, @replicaId, @groupDatabaseId, @resou" +
                        "rcePoolId, @defaultLanguageLcid, @defaultLanguageName, @defaultFulltextLanguageL" +
                        "cid, @defaultFulltextLanguageName, @isNestedTriggersOn, @isTransformNoiseWordsOn" +
                        ", @twoDigitYearCutoff, @containment, @containmentDesc, @targetRecoveryTimeInSeco" +
                        "nds, @delayedDurability, @delayedDurabilityDesc, @isMemoryOptimizedElevateToSnap" +
                        "shotOn, @isFederationMember, @isRemoteDataArchiveEnabled, @isMixedPageAllocation" +
                        "On)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsIncrementalOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsIncrementalOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsIncrementalOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isQueryStoreOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQueryStoreOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQueryStoreOn);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter resourcePoolId = new Microsoft.Data.Sqlite.SqliteParameter("@resourcePoolId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(resourcePoolId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurability = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurability", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(delayedDurability);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(delayedDurabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimizedElevateToSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimizedElevateToSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimizedElevateToSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter isFederationMember = new Microsoft.Data.Sqlite.SqliteParameter("@isFederationMember", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFederationMember);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isMixedPageAllocationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMixedPageAllocationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMixedPageAllocationOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoCreateStatsIncrementalOn.Value = values[25];
                        isAutoUpdateStatsOn.Value = values[26];
                        isAutoUpdateStatsAsyncOn.Value = values[27];
                        isAnsiNullDefaultOn.Value = values[28];
                        isAnsiNullsOn.Value = values[29];
                        isAnsiPaddingOn.Value = values[30];
                        isAnsiWarningsOn.Value = values[31];
                        isArithabortOn.Value = values[32];
                        isConcatNullYieldsNullOn.Value = values[33];
                        isNumericRoundabortOn.Value = values[34];
                        isQuotedIdentifierOn.Value = values[35];
                        isRecursiveTriggersOn.Value = values[36];
                        isCursorCloseOnCommitOn.Value = values[37];
                        isLocalCursorDefault.Value = values[38];
                        isFulltextEnabled.Value = values[39];
                        isTrustworthyOn.Value = values[40];
                        isDbChainingOn.Value = values[41];
                        isParameterizationForced.Value = values[42];
                        isMasterKeyEncryptedByServer.Value = values[43];
                        isQueryStoreOn.Value = values[44];
                        isPublished.Value = values[45];
                        isSubscribed.Value = values[46];
                        isMergePublished.Value = values[47];
                        isDistributor.Value = values[48];
                        isSyncWithBackup.Value = values[49];
                        serviceBrokerGuid.Value = values[50];
                        isBrokerEnabled.Value = values[51];
                        logReuseWait.Value = values[52];
                        logReuseWaitDesc.Value = values[53];
                        isDateCorrelationOn.Value = values[54];
                        isCdcEnabled.Value = values[55];
                        isEncrypted.Value = values[56];
                        isHonorBrokerPriorityOn.Value = values[57];
                        replicaId.Value = values[58];
                        groupDatabaseId.Value = values[59];
                        resourcePoolId.Value = values[60];
                        defaultLanguageLcid.Value = values[61];
                        defaultLanguageName.Value = values[62];
                        defaultFulltextLanguageLcid.Value = values[63];
                        defaultFulltextLanguageName.Value = values[64];
                        isNestedTriggersOn.Value = values[65];
                        isTransformNoiseWordsOn.Value = values[66];
                        twoDigitYearCutoff.Value = values[67];
                        containment.Value = values[68];
                        containmentDesc.Value = values[69];
                        targetRecoveryTimeInSeconds.Value = values[70];
                        delayedDurability.Value = values[71];
                        delayedDurabilityDesc.Value = values[72];
                        isMemoryOptimizedElevateToSnapshotOn.Value = values[73];
                        isFederationMember.Value = values[74];
                        isRemoteDataArchiveEnabled.Value = values[75];
                        isMixedPageAllocationOn.Value = values[76];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_data_sources (data_source_id,name,location,type_desc,type,resource_manager_location,credential_id,database_name,shard_map_name) values (@dataSourceId, @name, @location, @typeDesc, @type, @resourceManagerLocation, @credentialId, @databaseName, @shardMapName)";

                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter resourceManagerLocation = new Microsoft.Data.Sqlite.SqliteParameter("@resourceManagerLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(resourceManagerLocation);
                    Microsoft.Data.Sqlite.SqliteParameter credentialId = new Microsoft.Data.Sqlite.SqliteParameter("@credentialId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(credentialId);
                    Microsoft.Data.Sqlite.SqliteParameter databaseName = new Microsoft.Data.Sqlite.SqliteParameter("@databaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(databaseName);
                    Microsoft.Data.Sqlite.SqliteParameter shardMapName = new Microsoft.Data.Sqlite.SqliteParameter("@shardMapName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(shardMapName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        dataSourceId.Value = values[0];
                        name.Value = values[1];
                        location.Value = values[2];
                        typeDesc.Value = values[3];
                        type.Value = values[4];
                        resourceManagerLocation.Value = values[5];
                        credentialId.Value = values[6];
                        databaseName.Value = values[7];
                        shardMapName.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_column_id_used,uses_ansi_nulls,data_source_id,file_format_id,location,reject_type,reject_value,reject_sample_value,distribution_type,distribution_desc,sharding_col_id,remote_schema_name,remote_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxColumnIdUsed, @usesAnsiNulls, @dataSourceId, @fileFormatId, @location, @rejectType, @rejectValue, @rejectSampleValue, @distributionType, @distributionDesc, @shardingColId, @remoteSchemaName, @remoteObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileFormatId = new Microsoft.Data.Sqlite.SqliteParameter("@fileFormatId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileFormatId);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter rejectType = new Microsoft.Data.Sqlite.SqliteParameter("@rejectType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectType);
                    Microsoft.Data.Sqlite.SqliteParameter rejectValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectValue);
                    Microsoft.Data.Sqlite.SqliteParameter rejectSampleValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectSampleValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectSampleValue);
                    Microsoft.Data.Sqlite.SqliteParameter distributionType = new Microsoft.Data.Sqlite.SqliteParameter("@distributionType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(distributionType);
                    Microsoft.Data.Sqlite.SqliteParameter distributionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@distributionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(distributionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter shardingColId = new Microsoft.Data.Sqlite.SqliteParameter("@shardingColId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(shardingColId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter remoteObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxColumnIdUsed.Value = values[12];
                        usesAnsiNulls.Value = values[13];
                        dataSourceId.Value = values[14];
                        fileFormatId.Value = values[15];
                        location.Value = values[16];
                        rejectType.Value = values[17];
                        rejectValue.Value = values[18];
                        rejectSampleValue.Value = values[19];
                        distributionType.Value = values[20];
                        distributionDesc.Value = values[21];
                        shardingColId.Value = values[22];
                        remoteSchemaName.Value = values[23];
                        remoteObjectName.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_system,filegroup_guid,log_filegroup_id,is_read_only,is_autogrow_all_files) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOnly, @isAutogrowAllFiles)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutogrowAllFiles = new Microsoft.Data.Sqlite.SqliteParameter("@isAutogrowAllFiles", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutogrowAllFiles);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];
                        isAutogrowAllFiles.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_hash_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition,bucket_count) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @bucketCount)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter bucketCount = new Microsoft.Data.Sqlite.SqliteParameter("@bucketCount", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(bucketCount);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];
                        bucketCount.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];
                        generatedAlwaysType.Value = values[29];
                        generatedAlwaysTypeDesc.Value = values[30];
                        encryptionType.Value = values[31];
                        encryptionTypeDesc.Value = values[32];
                        encryptionAlgorithmName.Value = values[33];
                        columnEncryptionKeyId.Value = values[34];
                        columnEncryptionKeyDatabaseName.Value = values[35];
                        isHidden.Value = values[36];
                        isMasked.Value = values[37];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition,compression_delay) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @compressionDelay)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter compressionDelay = new Microsoft.Data.Sqlite.SqliteParameter("@compressionDelay", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(compressionDelay);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];
                        compressionDelay.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_masked_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set,generated_always_type,generated_always_type_desc,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name,is_hidden,is_masked,masking_function) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet, @generatedAlwaysType, @generatedAlwaysTypeDesc, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName, @isHidden, @isMasked, @maskingFunction)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysType = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(generatedAlwaysType);
                    Microsoft.Data.Sqlite.SqliteParameter generatedAlwaysTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@generatedAlwaysTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(generatedAlwaysTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    Microsoft.Data.Sqlite.SqliteParameter isHidden = new Microsoft.Data.Sqlite.SqliteParameter("@isHidden", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHidden);
                    Microsoft.Data.Sqlite.SqliteParameter isMasked = new Microsoft.Data.Sqlite.SqliteParameter("@isMasked", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasked);
                    Microsoft.Data.Sqlite.SqliteParameter maskingFunction = new Microsoft.Data.Sqlite.SqliteParameter("@maskingFunction", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(maskingFunction);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];
                        generatedAlwaysType.Value = values[28];
                        generatedAlwaysTypeDesc.Value = values[29];
                        encryptionType.Value = values[30];
                        encryptionTypeDesc.Value = values[31];
                        encryptionAlgorithmName.Value = values[32];
                        columnEncryptionKeyId.Value = values[33];
                        columnEncryptionKeyDatabaseName.Value = values[34];
                        isHidden.Value = values[35];
                        isMasked.Value = values[36];
                        maskingFunction.Value = values[37];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly,is_nullable,encryption_type,encryption_type_desc,encryption_algorithm_name,column_encryption_key_id,column_encryption_key_database_name) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly, @isNullable, @encryptionType, @encryptionTypeDesc, @encryptionAlgorithmName, @columnEncryptionKeyId, @columnEncryptionKeyDatabaseName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(encryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter encryptionAlgorithmName = new Microsoft.Data.Sqlite.SqliteParameter("@encryptionAlgorithmName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(encryptionAlgorithmName);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter columnEncryptionKeyDatabaseName = new Microsoft.Data.Sqlite.SqliteParameter("@columnEncryptionKeyDatabaseName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(columnEncryptionKeyDatabaseName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];
                        isNullable.Value = values[15];
                        encryptionType.Value = values[16];
                        encryptionTypeDesc.Value = values[17];
                        encryptionAlgorithmName.Value = values[18];
                        columnEncryptionKeyId.Value = values[19];
                        columnEncryptionKeyDatabaseName.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_periods (name,period_type,period_type_desc,object_id,start_column" +
                        "_id,end_column_id) values (@name, @periodType, @periodTypeDesc, @objectId, @star" +
                        "tColumnId, @endColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter periodType = new Microsoft.Data.Sqlite.SqliteParameter("@periodType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(periodType);
                    Microsoft.Data.Sqlite.SqliteParameter periodTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@periodTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(periodTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter startColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@startColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(startColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter endColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@endColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(endColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        periodType.Value = values[1];
                        periodTypeDesc.Value = values[2];
                        objectId.Value = values[3];
                        startColumnId.Value = values[4];
                        endColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_policies (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_enabled,is_not_for_replication,uses_database_collation,is_schema_bound) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isEnabled, @isNotForReplication, @usesDatabaseCollation, @isSchemaBound)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isEnabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        usesDatabaseCollation.Value = values[12];
                        isSchemaBound.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_security_predicates (object_id,security_predicate_id,target_object_id,predicate_definition,predicate_type,predicate_type_desc,operation,operation_desc) values (@objectId, @securityPredicateId, @targetObjectId, @predicateDefinition, @predicateType, @predicateTypeDesc, @operation, @operationDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter securityPredicateId = new Microsoft.Data.Sqlite.SqliteParameter("@securityPredicateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(securityPredicateId);
                    Microsoft.Data.Sqlite.SqliteParameter targetObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@targetObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter predicateDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@predicateDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter predicateType = new Microsoft.Data.Sqlite.SqliteParameter("@predicateType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(predicateType);
                    Microsoft.Data.Sqlite.SqliteParameter predicateTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@predicateTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(predicateTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter operation = new Microsoft.Data.Sqlite.SqliteParameter("@operation", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(operation);
                    Microsoft.Data.Sqlite.SqliteParameter operationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@operationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(operationDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        securityPredicateId.Value = values[1];
                        targetObjectId.Value = values[2];
                        predicateDefinition.Value = values[3];
                        predicateType.Value = values[4];
                        predicateTypeDesc.Value = values[5];
                        operation.Value = values[6];
                        operationDesc.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        spatialIndexType.Value = values[16];
                        spatialIndexTypeDesc.Value = values[17];
                        tessellationScheme.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id,uses_native_compilation) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId, @usesNativeCompilation)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter usesNativeCompilation = new Microsoft.Data.Sqlite.SqliteParameter("@usesNativeCompilation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesNativeCompilation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];
                        usesNativeCompilation.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recompute,has_filter,filter_definition,is_temporary,is_incremental) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @isTemporary, @isIncremental)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    Microsoft.Data.Sqlite.SqliteParameter isIncremental = new Microsoft.Data.Sqlite.SqliteParameter("@isIncremental", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncremental);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];
                        isIncremental.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id,is_memory_optimized) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId, @isMemoryOptimized)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];
                        isMemoryOptimized.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable,is_memory_optimized,durability,durability_desc,temporal_type,temporal_type_desc,history_table_id,is_remote_data_archive_enabled,is_external) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable, @isMemoryOptimized, @durability, @durabilityDesc, @temporalType, @temporalTypeDesc, @historyTableId, @isRemoteDataArchiveEnabled, @isExternal)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    Microsoft.Data.Sqlite.SqliteParameter durability = new Microsoft.Data.Sqlite.SqliteParameter("@durability", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(durability);
                    Microsoft.Data.Sqlite.SqliteParameter durabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@durabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(durabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter temporalType = new Microsoft.Data.Sqlite.SqliteParameter("@temporalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(temporalType);
                    Microsoft.Data.Sqlite.SqliteParameter temporalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@temporalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(temporalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter historyTableId = new Microsoft.Data.Sqlite.SqliteParameter("@historyTableId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(historyTableId);
                    Microsoft.Data.Sqlite.SqliteParameter isRemoteDataArchiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRemoteDataArchiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRemoteDataArchiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isExternal = new Microsoft.Data.Sqlite.SqliteParameter("@isExternal", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExternal);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];
                        isMemoryOptimized.Value = values[28];
                        durability.Value = values[29];
                        durabilityDesc.Value = values[30];
                        temporalType.Value = values[31];
                        temporalTypeDesc.Value = values[32];
                        historyTableId.Value = values[33];
                        isRemoteDataArchiveEnabled.Value = values[34];
                        isExternal.Value = values[35];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        usingXmlIndexId.Value = values[16];
                        secondaryType.Value = values[17];
                        secondaryTypeDesc.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];
                        xmlIndexType.Value = values[21];
                        xmlIndexTypeDescription.Value = values[22];
                        pathId.Value = values[23];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2014(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.columns;select * from sys.computed_columns;select * from sy" +
                        "s.conversation_priorities;select * from sys.crypt_properties;select * from sys.d" +
                        "ata_spaces;select * from sys.database_files;select * from sys.database_filestrea" +
                        "m_options;select * from sys.database_principals;select * from sys.database_role_" +
                        "members;select * from sys.databases;select * from sys.default_constraints;select" +
                        " * from sys.destination_data_spaces;select * from sys.event_notifications;select" +
                        " * from sys.events;select * from sys.extended_properties;select * from sys.exter" +
                        "nal_data_sources;select * from sys.external_tables;select * from sys.filegroups;" +
                        "select * from sys.filetable_system_defined_objects;select * from sys.filetables;" +
                        "select * from sys.foreign_key_columns;select * from sys.foreign_keys;select * fr" +
                        "om sys.fulltext_catalogs;select * from sys.fulltext_index_columns;select * from " +
                        "sys.fulltext_indexes;select * from sys.fulltext_stoplists;select * from sys.func" +
                        "tion_order_columns;select * from sys.hash_indexes;select * from sys.identity_col" +
                        "umns;select * from sys.index_columns;select * from sys.indexes;select * from sys" +
                        ".internal_tables;select * from sys.key_constraints;select * from sys.key_encrypt" +
                        "ions;select * from sys.numbered_procedure_parameters;select * from sys.numbered_" +
                        "procedures;select * from sys.objects;select * from sys.parameters;select * from " +
                        "sys.partition_functions;select * from sys.partition_parameters;select * from sys" +
                        ".partition_range_values;select * from sys.partition_schemes;select * from sys.pa" +
                        "rtitions;select * from sys.procedures;select * from sys.registered_search_proper" +
                        "ties;select * from sys.registered_search_property_lists;select * from sys.remote" +
                        "_service_bindings;select * from sys.routes;select * from sys.schemas;select * fr" +
                        "om sys.selective_xml_index_namespaces;select * from sys.selective_xml_index_path" +
                        "s;select * from sys.sequences;select * from sys.service_contract_message_usages;" +
                        "select * from sys.service_contract_usages;select * from sys.service_contracts;se" +
                        "lect * from sys.service_message_types;select * from sys.service_queues;select * " +
                        "from sys.services;select * from sys.spatial_index_tessellations;select * from sy" +
                        "s.spatial_indexes;select * from sys.sql_modules;select * from sys.stats;select *" +
                        " from sys.stats_columns;select * from sys.symmetric_keys;select * from sys.synon" +
                        "yms;select * from sys.table_types;select * from sys.tables;select * from sys.tri" +
                        "gger_events;select * from sys.triggers;select * from sys.types;select * from sys" +
                        ".views;select * from sys.xml_indexes;select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        createLsn.Value = values[17];
                        dropLsn.Value = values[18];
                        readOnlyLsn.Value = values[19];
                        readWriteLsn.Value = values[20];
                        differentialBaseLsn.Value = values[21];
                        differentialBaseGuid.Value = values[22];
                        differentialBaseTime.Value = values[23];
                        redoStartLsn.Value = values[24];
                        redoStartForkGuid.Value = values[25];
                        redoTargetLsn.Value = values[26];
                        redoTargetForkGuid.Value = values[27];
                        backupLsn.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_filestream_options (database_id,non_transacted_access,no" +
                        "n_transacted_access_desc,directory_name) values (@databaseId, @nonTransactedAcce" +
                        "ss, @nonTransactedAccessDesc, @directoryName)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccess = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(nonTransactedAccess);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(nonTransactedAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        nonTransactedAccess.Value = values[1];
                        nonTransactedAccessDesc.Value = values[2];
                        directoryName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_create" +
                        "_stats_incremental_on,is_auto_update_stats_on,is_auto_update_stats_async_on,is_a" +
                        "nsi_null_default_on,is_ansi_nulls_on,is_ansi_padding_on,is_ansi_warnings_on,is_a" +
                        "rithabort_on,is_concat_null_yields_null_on,is_numeric_roundabort_on,is_quoted_id" +
                        "entifier_on,is_recursive_triggers_on,is_cursor_close_on_commit_on,is_local_curso" +
                        "r_default,is_fulltext_enabled,is_trustworthy_on,is_db_chaining_on,is_parameteriz" +
                        "ation_forced,is_master_key_encrypted_by_server,is_query_store_on,is_published,is" +
                        "_subscribed,is_merge_published,is_distributor,is_sync_with_backup,service_broker" +
                        "_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_desc,is_date_correlation_o" +
                        "n,is_cdc_enabled,is_encrypted,is_honor_broker_priority_on,replica_id,group_datab" +
                        "ase_id,resource_pool_id,default_language_lcid,default_language_name,default_full" +
                        "text_language_lcid,default_fulltext_language_name,is_nested_triggers_on,is_trans" +
                        "form_noise_words_on,two_digit_year_cutoff,containment,containment_desc,target_re" +
                        "covery_time_in_seconds,delayed_durability,delayed_durability_desc,is_memory_opti" +
                        "mized_elevate_to_snapshot_on) values (@name, @databaseId, @sourceDatabaseId, @ow" +
                        "nerSid, @createDate, @compatibilityLevel, @collationName, @userAccess, @userAcce" +
                        "ssDesc, @isReadOnly, @isAutoCloseOn, @isAutoShrinkOn, @state, @stateDesc, @isInS" +
                        "tandby, @isCleanlyShutdown, @isSupplementalLoggingEnabled, @snapshotIsolationSta" +
                        "te, @snapshotIsolationStateDesc, @isReadCommittedSnapshotOn, @recoveryModel, @re" +
                        "coveryModelDesc, @pageVerifyOption, @pageVerifyOptionDesc, @isAutoCreateStatsOn," +
                        " @isAutoCreateStatsIncrementalOn, @isAutoUpdateStatsOn, @isAutoUpdateStatsAsyncO" +
                        "n, @isAnsiNullDefaultOn, @isAnsiNullsOn, @isAnsiPaddingOn, @isAnsiWarningsOn, @i" +
                        "sArithabortOn, @isConcatNullYieldsNullOn, @isNumericRoundabortOn, @isQuotedIdent" +
                        "ifierOn, @isRecursiveTriggersOn, @isCursorCloseOnCommitOn, @isLocalCursorDefault" +
                        ", @isFulltextEnabled, @isTrustworthyOn, @isDbChainingOn, @isParameterizationForc" +
                        "ed, @isMasterKeyEncryptedByServer, @isQueryStoreOn, @isPublished, @isSubscribed," +
                        " @isMergePublished, @isDistributor, @isSyncWithBackup, @serviceBrokerGuid, @isBr" +
                        "okerEnabled, @logReuseWait, @logReuseWaitDesc, @isDateCorrelationOn, @isCdcEnabl" +
                        "ed, @isEncrypted, @isHonorBrokerPriorityOn, @replicaId, @groupDatabaseId, @resou" +
                        "rcePoolId, @defaultLanguageLcid, @defaultLanguageName, @defaultFulltextLanguageL" +
                        "cid, @defaultFulltextLanguageName, @isNestedTriggersOn, @isTransformNoiseWordsOn" +
                        ", @twoDigitYearCutoff, @containment, @containmentDesc, @targetRecoveryTimeInSeco" +
                        "nds, @delayedDurability, @delayedDurabilityDesc, @isMemoryOptimizedElevateToSnap" +
                        "shotOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsIncrementalOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsIncrementalOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsIncrementalOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isQueryStoreOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQueryStoreOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQueryStoreOn);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter resourcePoolId = new Microsoft.Data.Sqlite.SqliteParameter("@resourcePoolId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(resourcePoolId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurability = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurability", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(delayedDurability);
                    Microsoft.Data.Sqlite.SqliteParameter delayedDurabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@delayedDurabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(delayedDurabilityDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimizedElevateToSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimizedElevateToSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimizedElevateToSnapshotOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoCreateStatsIncrementalOn.Value = values[25];
                        isAutoUpdateStatsOn.Value = values[26];
                        isAutoUpdateStatsAsyncOn.Value = values[27];
                        isAnsiNullDefaultOn.Value = values[28];
                        isAnsiNullsOn.Value = values[29];
                        isAnsiPaddingOn.Value = values[30];
                        isAnsiWarningsOn.Value = values[31];
                        isArithabortOn.Value = values[32];
                        isConcatNullYieldsNullOn.Value = values[33];
                        isNumericRoundabortOn.Value = values[34];
                        isQuotedIdentifierOn.Value = values[35];
                        isRecursiveTriggersOn.Value = values[36];
                        isCursorCloseOnCommitOn.Value = values[37];
                        isLocalCursorDefault.Value = values[38];
                        isFulltextEnabled.Value = values[39];
                        isTrustworthyOn.Value = values[40];
                        isDbChainingOn.Value = values[41];
                        isParameterizationForced.Value = values[42];
                        isMasterKeyEncryptedByServer.Value = values[43];
                        isQueryStoreOn.Value = values[44];
                        isPublished.Value = values[45];
                        isSubscribed.Value = values[46];
                        isMergePublished.Value = values[47];
                        isDistributor.Value = values[48];
                        isSyncWithBackup.Value = values[49];
                        serviceBrokerGuid.Value = values[50];
                        isBrokerEnabled.Value = values[51];
                        logReuseWait.Value = values[52];
                        logReuseWaitDesc.Value = values[53];
                        isDateCorrelationOn.Value = values[54];
                        isCdcEnabled.Value = values[55];
                        isEncrypted.Value = values[56];
                        isHonorBrokerPriorityOn.Value = values[57];
                        replicaId.Value = values[58];
                        groupDatabaseId.Value = values[59];
                        resourcePoolId.Value = values[60];
                        defaultLanguageLcid.Value = values[61];
                        defaultLanguageName.Value = values[62];
                        defaultFulltextLanguageLcid.Value = values[63];
                        defaultFulltextLanguageName.Value = values[64];
                        isNestedTriggersOn.Value = values[65];
                        isTransformNoiseWordsOn.Value = values[66];
                        twoDigitYearCutoff.Value = values[67];
                        containment.Value = values[68];
                        containmentDesc.Value = values[69];
                        targetRecoveryTimeInSeconds.Value = values[70];
                        delayedDurability.Value = values[71];
                        delayedDurabilityDesc.Value = values[72];
                        isMemoryOptimizedElevateToSnapshotOn.Value = values[73];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_external_data_sources (data_source_id,name,location,type_desc,typ" +
                        "e,job_tracker_location) values (@dataSourceId, @name, @location, @typeDesc, @typ" +
                        "e, @jobTrackerLocation)";

                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter jobTrackerLocation = new Microsoft.Data.Sqlite.SqliteParameter("@jobTrackerLocation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(jobTrackerLocation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        dataSourceId.Value = values[0];
                        name.Value = values[1];
                        location.Value = values[2];
                        typeDesc.Value = values[3];
                        type.Value = values[4];
                        jobTrackerLocation.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_external_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_column_id_used,uses_ansi_nulls,data_source_id,file_format_id,location,reject_type,reject_value,reject_sample_value) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxColumnIdUsed, @usesAnsiNulls, @dataSourceId, @fileFormatId, @location, @rejectType, @rejectValue, @rejectSampleValue)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter dataSourceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSourceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSourceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileFormatId = new Microsoft.Data.Sqlite.SqliteParameter("@fileFormatId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileFormatId);
                    Microsoft.Data.Sqlite.SqliteParameter location = new Microsoft.Data.Sqlite.SqliteParameter("@location", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(location);
                    Microsoft.Data.Sqlite.SqliteParameter rejectType = new Microsoft.Data.Sqlite.SqliteParameter("@rejectType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(rejectType);
                    Microsoft.Data.Sqlite.SqliteParameter rejectValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectValue);
                    Microsoft.Data.Sqlite.SqliteParameter rejectSampleValue = new Microsoft.Data.Sqlite.SqliteParameter("@rejectSampleValue", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(rejectSampleValue);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxColumnIdUsed.Value = values[12];
                        usesAnsiNulls.Value = values[13];
                        dataSourceId.Value = values[14];
                        fileFormatId.Value = values[15];
                        location.Value = values[16];
                        rejectType.Value = values[17];
                        rejectValue.Value = values[18];
                        rejectSampleValue.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_syste" +
                        "m,filegroup_guid,log_filegroup_id,is_read_only) values (@name, @dataSpaceId, @ty" +
                        "pe, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOn" +
                        "ly)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_hash_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition,bucket_count) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition, @bucketCount)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter bucketCount = new Microsoft.Data.Sqlite.SqliteParameter("@bucketCount", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(bucketCount);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];
                        bucketCount.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly,is_nullable) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly, @isNullable)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];
                        isNullable.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        spatialIndexType.Value = values[16];
                        spatialIndexTypeDesc.Value = values[17];
                        tessellationScheme.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id,uses_native_compilation) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId, @usesNativeCompilation)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter usesNativeCompilation = new Microsoft.Data.Sqlite.SqliteParameter("@usesNativeCompilation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesNativeCompilation);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];
                        usesNativeCompilation.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recompute,has_filter,filter_definition,is_temporary,is_incremental) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @isTemporary, @isIncremental)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    Microsoft.Data.Sqlite.SqliteParameter isIncremental = new Microsoft.Data.Sqlite.SqliteParameter("@isIncremental", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncremental);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];
                        isIncremental.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id,is_memory_optimized) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId, @isMemoryOptimized)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];
                        isMemoryOptimized.Value = values[16];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable,is_memory_optimized,durability,durability_desc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable, @isMemoryOptimized, @durability, @durabilityDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    Microsoft.Data.Sqlite.SqliteParameter isMemoryOptimized = new Microsoft.Data.Sqlite.SqliteParameter("@isMemoryOptimized", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMemoryOptimized);
                    Microsoft.Data.Sqlite.SqliteParameter durability = new Microsoft.Data.Sqlite.SqliteParameter("@durability", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(durability);
                    Microsoft.Data.Sqlite.SqliteParameter durabilityDesc = new Microsoft.Data.Sqlite.SqliteParameter("@durabilityDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(durabilityDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];
                        isMemoryOptimized.Value = values[28];
                        durability.Value = values[29];
                        durabilityDesc.Value = values[30];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        usingXmlIndexId.Value = values[16];
                        secondaryType.Value = values[17];
                        secondaryTypeDesc.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];
                        xmlIndexType.Value = values[21];
                        xmlIndexTypeDescription.Value = values[22];
                        pathId.Value = values[23];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2012(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.columns;select * from sys.computed_columns;select * from sy" +
                        "s.conversation_priorities;select * from sys.crypt_properties;select * from sys.d" +
                        "ata_spaces;select * from sys.database_files;select * from sys.database_filestrea" +
                        "m_options;select * from sys.database_principals;select * from sys.database_role_" +
                        "members;select * from sys.databases;select * from sys.default_constraints;select" +
                        " * from sys.destination_data_spaces;select * from sys.event_notifications;select" +
                        " * from sys.events;select * from sys.extended_properties;select * from sys.fileg" +
                        "roups;select * from sys.filetable_system_defined_objects;select * from sys.filet" +
                        "ables;select * from sys.foreign_key_columns;select * from sys.foreign_keys;selec" +
                        "t * from sys.fulltext_catalogs;select * from sys.fulltext_index_columns;select *" +
                        " from sys.fulltext_indexes;select * from sys.fulltext_stoplists;select * from sy" +
                        "s.function_order_columns;select * from sys.identity_columns;select * from sys.in" +
                        "dex_columns;select * from sys.indexes;select * from sys.internal_tables;select *" +
                        " from sys.key_constraints;select * from sys.key_encryptions;select * from sys.nu" +
                        "mbered_procedure_parameters;select * from sys.numbered_procedures;select * from " +
                        "sys.objects;select * from sys.parameters;select * from sys.partition_functions;s" +
                        "elect * from sys.partition_parameters;select * from sys.partition_range_values;s" +
                        "elect * from sys.partition_schemes;select * from sys.partitions;select * from sy" +
                        "s.procedures;select * from sys.registered_search_properties;select * from sys.re" +
                        "gistered_search_property_lists;select * from sys.remote_service_bindings;select " +
                        "* from sys.routes;select * from sys.schemas;select * from sys.selective_xml_inde" +
                        "x_namespaces;select * from sys.selective_xml_index_paths;select * from sys.seque" +
                        "nces;select * from sys.service_contract_message_usages;select * from sys.service" +
                        "_contract_usages;select * from sys.service_contracts;select * from sys.service_m" +
                        "essage_types;select * from sys.service_queues;select * from sys.services;select " +
                        "* from sys.spatial_index_tessellations;select * from sys.spatial_indexes;select " +
                        "* from sys.sql_modules;select * from sys.stats;select * from sys.stats_columns;s" +
                        "elect * from sys.symmetric_keys;select * from sys.synonyms;select * from sys.tab" +
                        "le_types;select * from sys.tables;select * from sys.trigger_events;select * from" +
                        " sys.triggers;select * from sys.types;select * from sys.views;select * from sys." +
                        "xml_indexes;select * from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default,is_syst" +
                        "em) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @isSystem)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        createLsn.Value = values[17];
                        dropLsn.Value = values[18];
                        readOnlyLsn.Value = values[19];
                        readWriteLsn.Value = values[20];
                        differentialBaseLsn.Value = values[21];
                        differentialBaseGuid.Value = values[22];
                        differentialBaseTime.Value = values[23];
                        redoStartLsn.Value = values[24];
                        redoStartForkGuid.Value = values[25];
                        redoTargetLsn.Value = values[26];
                        redoTargetForkGuid.Value = values[27];
                        backupLsn.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_filestream_options (database_id,non_transacted_access,no" +
                        "n_transacted_access_desc,directory_name) values (@databaseId, @nonTransactedAcce" +
                        "ss, @nonTransactedAccessDesc, @directoryName)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccess = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(nonTransactedAccess);
                    Microsoft.Data.Sqlite.SqliteParameter nonTransactedAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@nonTransactedAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(nonTransactedAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        nonTransactedAccess.Value = values[1];
                        nonTransactedAccessDesc.Value = values[2];
                        directoryName.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role,authentication_type,authentication_type_desc,default_language_name,default_language_lcid) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole, @authenticationType, @authenticationTypeDesc, @defaultLanguageName, @defaultLanguageLcid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationType = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(authenticationType);
                    Microsoft.Data.Sqlite.SqliteParameter authenticationTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@authenticationTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(authenticationTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];
                        authenticationType.Value = values[10];
                        authenticationTypeDesc.Value = values[11];
                        defaultLanguageName.Value = values[12];
                        defaultLanguageLcid.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_update" +
                        "_stats_on,is_auto_update_stats_async_on,is_ansi_null_default_on,is_ansi_nulls_on" +
                        ",is_ansi_padding_on,is_ansi_warnings_on,is_arithabort_on,is_concat_null_yields_n" +
                        "ull_on,is_numeric_roundabort_on,is_quoted_identifier_on,is_recursive_triggers_on" +
                        ",is_cursor_close_on_commit_on,is_local_cursor_default,is_fulltext_enabled,is_tru" +
                        "stworthy_on,is_db_chaining_on,is_parameterization_forced,is_master_key_encrypted" +
                        "_by_server,is_published,is_subscribed,is_merge_published,is_distributor,is_sync_" +
                        "with_backup,service_broker_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_" +
                        "desc,is_date_correlation_on,is_cdc_enabled,is_encrypted,is_honor_broker_priority" +
                        "_on,replica_id,group_database_id,default_language_lcid,default_language_name,def" +
                        "ault_fulltext_language_lcid,default_fulltext_language_name,is_nested_triggers_on" +
                        ",is_transform_noise_words_on,two_digit_year_cutoff,containment,containment_desc," +
                        "target_recovery_time_in_seconds) values (@name, @databaseId, @sourceDatabaseId, " +
                        "@ownerSid, @createDate, @compatibilityLevel, @collationName, @userAccess, @userA" +
                        "ccessDesc, @isReadOnly, @isAutoCloseOn, @isAutoShrinkOn, @state, @stateDesc, @is" +
                        "InStandby, @isCleanlyShutdown, @isSupplementalLoggingEnabled, @snapshotIsolation" +
                        "State, @snapshotIsolationStateDesc, @isReadCommittedSnapshotOn, @recoveryModel, " +
                        "@recoveryModelDesc, @pageVerifyOption, @pageVerifyOptionDesc, @isAutoCreateStats" +
                        "On, @isAutoUpdateStatsOn, @isAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAn" +
                        "siNullsOn, @isAnsiPaddingOn, @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYi" +
                        "eldsNullOn, @isNumericRoundabortOn, @isQuotedIdentifierOn, @isRecursiveTriggersO" +
                        "n, @isCursorCloseOnCommitOn, @isLocalCursorDefault, @isFulltextEnabled, @isTrust" +
                        "worthyOn, @isDbChainingOn, @isParameterizationForced, @isMasterKeyEncryptedBySer" +
                        "ver, @isPublished, @isSubscribed, @isMergePublished, @isDistributor, @isSyncWith" +
                        "Backup, @serviceBrokerGuid, @isBrokerEnabled, @logReuseWait, @logReuseWaitDesc, " +
                        "@isDateCorrelationOn, @isCdcEnabled, @isEncrypted, @isHonorBrokerPriorityOn, @re" +
                        "plicaId, @groupDatabaseId, @defaultLanguageLcid, @defaultLanguageName, @defaultF" +
                        "ulltextLanguageLcid, @defaultFulltextLanguageName, @isNestedTriggersOn, @isTrans" +
                        "formNoiseWordsOn, @twoDigitYearCutoff, @containment, @containmentDesc, @targetRe" +
                        "coveryTimeInSeconds)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    Microsoft.Data.Sqlite.SqliteParameter replicaId = new Microsoft.Data.Sqlite.SqliteParameter("@replicaId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(replicaId);
                    Microsoft.Data.Sqlite.SqliteParameter groupDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@groupDatabaseId", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(groupDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageLcid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(defaultLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageLcid = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageLcid", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageLcid);
                    Microsoft.Data.Sqlite.SqliteParameter defaultFulltextLanguageName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultFulltextLanguageName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultFulltextLanguageName);
                    Microsoft.Data.Sqlite.SqliteParameter isNestedTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNestedTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNestedTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isTransformNoiseWordsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTransformNoiseWordsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTransformNoiseWordsOn);
                    Microsoft.Data.Sqlite.SqliteParameter twoDigitYearCutoff = new Microsoft.Data.Sqlite.SqliteParameter("@twoDigitYearCutoff", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(twoDigitYearCutoff);
                    Microsoft.Data.Sqlite.SqliteParameter containment = new Microsoft.Data.Sqlite.SqliteParameter("@containment", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(containment);
                    Microsoft.Data.Sqlite.SqliteParameter containmentDesc = new Microsoft.Data.Sqlite.SqliteParameter("@containmentDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(containmentDesc);
                    Microsoft.Data.Sqlite.SqliteParameter targetRecoveryTimeInSeconds = new Microsoft.Data.Sqlite.SqliteParameter("@targetRecoveryTimeInSeconds", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(targetRecoveryTimeInSeconds);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoUpdateStatsOn.Value = values[25];
                        isAutoUpdateStatsAsyncOn.Value = values[26];
                        isAnsiNullDefaultOn.Value = values[27];
                        isAnsiNullsOn.Value = values[28];
                        isAnsiPaddingOn.Value = values[29];
                        isAnsiWarningsOn.Value = values[30];
                        isArithabortOn.Value = values[31];
                        isConcatNullYieldsNullOn.Value = values[32];
                        isNumericRoundabortOn.Value = values[33];
                        isQuotedIdentifierOn.Value = values[34];
                        isRecursiveTriggersOn.Value = values[35];
                        isCursorCloseOnCommitOn.Value = values[36];
                        isLocalCursorDefault.Value = values[37];
                        isFulltextEnabled.Value = values[38];
                        isTrustworthyOn.Value = values[39];
                        isDbChainingOn.Value = values[40];
                        isParameterizationForced.Value = values[41];
                        isMasterKeyEncryptedByServer.Value = values[42];
                        isPublished.Value = values[43];
                        isSubscribed.Value = values[44];
                        isMergePublished.Value = values[45];
                        isDistributor.Value = values[46];
                        isSyncWithBackup.Value = values[47];
                        serviceBrokerGuid.Value = values[48];
                        isBrokerEnabled.Value = values[49];
                        logReuseWait.Value = values[50];
                        logReuseWaitDesc.Value = values[51];
                        isDateCorrelationOn.Value = values[52];
                        isCdcEnabled.Value = values[53];
                        isEncrypted.Value = values[54];
                        isHonorBrokerPriorityOn.Value = values[55];
                        replicaId.Value = values[56];
                        groupDatabaseId.Value = values[57];
                        defaultLanguageLcid.Value = values[58];
                        defaultLanguageName.Value = values[59];
                        defaultFulltextLanguageLcid.Value = values[60];
                        defaultFulltextLanguageName.Value = values[61];
                        isNestedTriggersOn.Value = values[62];
                        isTransformNoiseWordsOn.Value = values[63];
                        twoDigitYearCutoff.Value = values[64];
                        containment.Value = values[65];
                        containmentDesc.Value = values[66];
                        targetRecoveryTimeInSeconds.Value = values[67];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,is_syste" +
                        "m,filegroup_guid,log_filegroup_id,is_read_only) values (@name, @dataSpaceId, @ty" +
                        "pe, @typeDesc, @isDefault, @isSystem, @filegroupGuid, @logFilegroupId, @isReadOn" +
                        "ly)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        filegroupGuid.Value = values[6];
                        logFilegroupId.Value = values[7];
                        isReadOnly.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetable_system_defined_objects (object_id,parent_object_id) val" +
                        "ues (@objectId, @parentObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        parentObjectId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filetables (object_id,is_enabled,directory_name,filename_collatio" +
                        "n_id,filename_collation_name) values (@objectId, @isEnabled, @directoryName, @fi" +
                        "lenameCollationId, @filenameCollationName)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter directoryName = new Microsoft.Data.Sqlite.SqliteParameter("@directoryName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(directoryName);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationId = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filenameCollationId);
                    Microsoft.Data.Sqlite.SqliteParameter filenameCollationName = new Microsoft.Data.Sqlite.SqliteParameter("@filenameCollationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filenameCollationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isEnabled.Value = values[1];
                        directoryName.Value = values[2];
                        filenameCollationId.Value = values[3];
                        filenameCollationName.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id,statistical_semantics) values (@objectId, @columnId, @typeColumnId, @langu" +
                        "ageId, @statisticalSemantics)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    Microsoft.Data.Sqlite.SqliteParameter statisticalSemantics = new Microsoft.Data.Sqlite.SqliteParameter("@statisticalSemantics", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statisticalSemantics);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];
                        statisticalSemantics.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,property_list_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @propertyListId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        propertyListId.Value = values[13];
                        dataSpaceId.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,is_system,create_date,modify_date) values (@name, @functionId" +
                        ", @type, @typeDesc, @fanout, @boundaryValueOnRight, @isSystem, @createDate, @mod" +
                        "ifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        isSystem.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,i" +
                        "s_system,function_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault," +
                        " @isSystem, @functionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isSystem = new Microsoft.Data.Sqlite.SqliteParameter("@isSystem", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystem);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        isSystem.Value = values[5];
                        functionId.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_properties (property_list_id,property_id,proper" +
                        "ty_name,property_set_guid,property_int_id,property_description) values (@propert" +
                        "yListId, @propertyId, @propertyName, @propertySetGuid, @propertyIntId, @property" +
                        "Description)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyName = new Microsoft.Data.Sqlite.SqliteParameter("@propertyName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyName);
                    Microsoft.Data.Sqlite.SqliteParameter propertySetGuid = new Microsoft.Data.Sqlite.SqliteParameter("@propertySetGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(propertySetGuid);
                    Microsoft.Data.Sqlite.SqliteParameter propertyIntId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyIntId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyIntId);
                    Microsoft.Data.Sqlite.SqliteParameter propertyDescription = new Microsoft.Data.Sqlite.SqliteParameter("@propertyDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(propertyDescription);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        propertyId.Value = values[1];
                        propertyName.Value = values[2];
                        propertySetGuid.Value = values[3];
                        propertyIntId.Value = values[4];
                        propertyDescription.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_registered_search_property_lists (property_list_id,name,create_da" +
                        "te,modify_date,principal_id) values (@propertyListId, @name, @createDate, @modif" +
                        "yDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter propertyListId = new Microsoft.Data.Sqlite.SqliteParameter("@propertyListId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(propertyListId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        propertyListId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_selective_xml_index_namespaces (object_id,index_id,is_default_uri" +
                        ",uri,prefix) values (@objectId, @indexId, @isDefaultUri, @uri, @prefix)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDefaultUri = new Microsoft.Data.Sqlite.SqliteParameter("@isDefaultUri", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefaultUri);
                    Microsoft.Data.Sqlite.SqliteParameter uri = new Microsoft.Data.Sqlite.SqliteParameter("@uri", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(uri);
                    Microsoft.Data.Sqlite.SqliteParameter prefix = new Microsoft.Data.Sqlite.SqliteParameter("@prefix", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(prefix);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        isDefaultUri.Value = values[2];
                        uri.Value = values[3];
                        prefix.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_selective_xml_index_paths (object_id,index_id,path_id,path,name,path_type,path_type_desc,xml_component_id,xquery_type_description,is_xquery_type_inferred,xquery_max_length,is_xquery_max_length_inferred,is_node,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_singleton) values (@objectId, @indexId, @pathId, @path, @name, @pathType, @pathTypeDesc, @xmlComponentId, @xqueryTypeDescription, @isXqueryTypeInferred, @xqueryMaxLength, @isXqueryMaxLengthInferred, @isNode, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isSingleton)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter pathType = new Microsoft.Data.Sqlite.SqliteParameter("@pathType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pathType);
                    Microsoft.Data.Sqlite.SqliteParameter pathTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pathTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pathTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlComponentId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlComponentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlComponentId);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xqueryTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryTypeInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryTypeInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryTypeInferred);
                    Microsoft.Data.Sqlite.SqliteParameter xqueryMaxLength = new Microsoft.Data.Sqlite.SqliteParameter("@xqueryMaxLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xqueryMaxLength);
                    Microsoft.Data.Sqlite.SqliteParameter isXqueryMaxLengthInferred = new Microsoft.Data.Sqlite.SqliteParameter("@isXqueryMaxLengthInferred", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXqueryMaxLengthInferred);
                    Microsoft.Data.Sqlite.SqliteParameter isNode = new Microsoft.Data.Sqlite.SqliteParameter("@isNode", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNode);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isSingleton = new Microsoft.Data.Sqlite.SqliteParameter("@isSingleton", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSingleton);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        pathId.Value = values[2];
                        path.Value = values[3];
                        name.Value = values[4];
                        pathType.Value = values[5];
                        pathTypeDesc.Value = values[6];
                        xmlComponentId.Value = values[7];
                        xqueryTypeDescription.Value = values[8];
                        isXqueryTypeInferred.Value = values[9];
                        xqueryMaxLength.Value = values[10];
                        isXqueryMaxLengthInferred.Value = values[11];
                        isNode.Value = values[12];
                        systemTypeId.Value = values[13];
                        userTypeId.Value = values[14];
                        maxLength.Value = values[15];
                        precision.Value = values[16];
                        scale.Value = values[17];
                        collationName.Value = values[18];
                        isSingleton.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sequences (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,start_value,increment,minimum_value,maximum_value,is_cycling,is_cached,cache_size,system_type_id,user_type_id,precision,scale,current_value,is_exhausted) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @startValue, @increment, @minimumValue, @maximumValue, @isCycling, @isCached, @cacheSize, @systemTypeId, @userTypeId, @precision, @scale, @currentValue, @isExhausted)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter startValue = new Microsoft.Data.Sqlite.SqliteParameter("@startValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(startValue);
                    Microsoft.Data.Sqlite.SqliteParameter increment = new Microsoft.Data.Sqlite.SqliteParameter("@increment", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(increment);
                    Microsoft.Data.Sqlite.SqliteParameter minimumValue = new Microsoft.Data.Sqlite.SqliteParameter("@minimumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(minimumValue);
                    Microsoft.Data.Sqlite.SqliteParameter maximumValue = new Microsoft.Data.Sqlite.SqliteParameter("@maximumValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(maximumValue);
                    Microsoft.Data.Sqlite.SqliteParameter isCycling = new Microsoft.Data.Sqlite.SqliteParameter("@isCycling", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCycling);
                    Microsoft.Data.Sqlite.SqliteParameter isCached = new Microsoft.Data.Sqlite.SqliteParameter("@isCached", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCached);
                    Microsoft.Data.Sqlite.SqliteParameter cacheSize = new Microsoft.Data.Sqlite.SqliteParameter("@cacheSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cacheSize);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter currentValue = new Microsoft.Data.Sqlite.SqliteParameter("@currentValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(currentValue);
                    Microsoft.Data.Sqlite.SqliteParameter isExhausted = new Microsoft.Data.Sqlite.SqliteParameter("@isExhausted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExhausted);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        startValue.Value = values[12];
                        increment.Value = values[13];
                        minimumValue.Value = values[14];
                        maximumValue.Value = values[15];
                        isCycling.Value = values[16];
                        isCached.Value = values[17];
                        cacheSize.Value = values[18];
                        systemTypeId.Value = values[19];
                        userTypeId.Value = values[20];
                        precision.Value = values[21];
                        scale.Value = values[22];
                        currentValue.Value = values[23];
                        isExhausted.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        spatialIndexType.Value = values[16];
                        spatialIndexTypeDesc.Value = values[17];
                        tessellationScheme.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recom" +
                        "pute,has_filter,filter_definition,is_temporary) values (@objectId, @name, @stats" +
                        "Id, @autoCreated, @userCreated, @noRecompute, @hasFilter, @filterDefinition, @is" +
                        "Temporary)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter isTemporary = new Microsoft.Data.Sqlite.SqliteParameter("@isTemporary", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTemporary);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];
                        isTemporary.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc,is_filetable) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc, @isFiletable)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFiletable = new Microsoft.Data.Sqlite.SqliteParameter("@isFiletable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFiletable);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];
                        isFiletable.Value = values[27];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc,is_trigger_event) values (@objectId, @type, @typ" +
                        "eDesc, @isFirst, @isLast, @eventGroupType, @eventGroupTypeDesc, @isTriggerEvent)" +
                        "";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];
                        isTriggerEvent.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition,xml_index_type,xml_index_type_description,path_id) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition, @xmlIndexType, @xmlIndexTypeDescription, @pathId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(xmlIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter xmlIndexTypeDescription = new Microsoft.Data.Sqlite.SqliteParameter("@xmlIndexTypeDescription", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(xmlIndexTypeDescription);
                    Microsoft.Data.Sqlite.SqliteParameter pathId = new Microsoft.Data.Sqlite.SqliteParameter("@pathId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(pathId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        usingXmlIndexId.Value = values[16];
                        secondaryType.Value = values[17];
                        secondaryTypeDesc.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];
                        xmlIndexType.Value = values[21];
                        xmlIndexTypeDescription.Value = values[22];
                        pathId.Value = values[23];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2008(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.change_tracking_data" +
                        "bases;select * from sys.change_tracking_tables;select * from sys.check_constrain" +
                        "ts;select * from sys.columns;select * from sys.computed_columns;select * from sy" +
                        "s.conversation_priorities;select * from sys.crypt_properties;select * from sys.d" +
                        "ata_spaces;select * from sys.database_files;select * from sys.database_principal" +
                        "s;select * from sys.database_role_members;select * from sys.databases;select * f" +
                        "rom sys.default_constraints;select * from sys.destination_data_spaces;select * f" +
                        "rom sys.event_notifications;select * from sys.events;select * from sys.extended_" +
                        "properties;select * from sys.filegroups;select * from sys.foreign_key_columns;se" +
                        "lect * from sys.foreign_keys;select * from sys.fulltext_catalogs;select * from s" +
                        "ys.fulltext_index_columns;select * from sys.fulltext_indexes;select * from sys.f" +
                        "ulltext_stoplists;select * from sys.function_order_columns;select * from sys.ide" +
                        "ntity_columns;select * from sys.index_columns;select * from sys.indexes;select *" +
                        " from sys.internal_tables;select * from sys.key_constraints;select * from sys.ke" +
                        "y_encryptions;select * from sys.numbered_procedure_parameters;select * from sys." +
                        "numbered_procedures;select * from sys.objects;select * from sys.parameters;selec" +
                        "t * from sys.partition_functions;select * from sys.partition_parameters;select *" +
                        " from sys.partition_range_values;select * from sys.partition_schemes;select * fr" +
                        "om sys.partitions;select * from sys.procedures;select * from sys.remote_service_" +
                        "bindings;select * from sys.routes;select * from sys.schemas;select * from sys.se" +
                        "rvice_contract_message_usages;select * from sys.service_contract_usages;select *" +
                        " from sys.service_contracts;select * from sys.service_message_types;select * fro" +
                        "m sys.service_queues;select * from sys.services;select * from sys.spatial_index_" +
                        "tessellations;select * from sys.spatial_indexes;select * from sys.sql_modules;se" +
                        "lect * from sys.stats;select * from sys.stats_columns;select * from sys.symmetri" +
                        "c_keys;select * from sys.synonyms;select * from sys.table_types;select * from sy" +
                        "s.tables;select * from sys.trigger_events;select * from sys.triggers;select * fr" +
                        "om sys.types;select * from sys.views;select * from sys.xml_indexes;select * from" +
                        " sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date,is_user_defined) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate, @isUserDefined)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isUserDefined.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];
                        isTableType.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];
                        providerType.Value = values[13];
                        cryptographicProviderGuid.Value = values[14];
                        cryptographicProviderAlgid.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by,pvt_key_last_backup_date) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy, @pvtKeyLastBackupDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyLastBackupDate = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyLastBackupDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(pvtKeyLastBackupDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];
                        pvtKeyLastBackupDate.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_change_tracking_databases (database_id,is_auto_cleanup_on,retention_period,retention_period_units,retention_period_units_desc,max_cleanup_version) values (@databaseId, @isAutoCleanupOn, @retentionPeriod, @retentionPeriodUnits, @retentionPeriodUnitsDesc, @maxCleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCleanupOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCleanupOn", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(isAutoCleanupOn);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriod = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriod", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(retentionPeriod);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnits = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnits", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(retentionPeriodUnits);
                    Microsoft.Data.Sqlite.SqliteParameter retentionPeriodUnitsDesc = new Microsoft.Data.Sqlite.SqliteParameter("@retentionPeriodUnitsDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(retentionPeriodUnitsDesc);
                    Microsoft.Data.Sqlite.SqliteParameter maxCleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@maxCleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(maxCleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        databaseId.Value = values[0];
                        isAutoCleanupOn.Value = values[1];
                        retentionPeriod.Value = values[2];
                        retentionPeriodUnits.Value = values[3];
                        retentionPeriodUnitsDesc.Value = values[4];
                        maxCleanupVersion.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_change_tracking_tables (object_id,is_track_columns_updated_on,min" +
                        "_valid_version,begin_version,cleanup_version) values (@objectId, @isTrackColumns" +
                        "UpdatedOn, @minValidVersion, @beginVersion, @cleanupVersion)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackColumnsUpdatedOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackColumnsUpdatedOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackColumnsUpdatedOn);
                    Microsoft.Data.Sqlite.SqliteParameter minValidVersion = new Microsoft.Data.Sqlite.SqliteParameter("@minValidVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(minValidVersion);
                    Microsoft.Data.Sqlite.SqliteParameter beginVersion = new Microsoft.Data.Sqlite.SqliteParameter("@beginVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(beginVersion);
                    Microsoft.Data.Sqlite.SqliteParameter cleanupVersion = new Microsoft.Data.Sqlite.SqliteParameter("@cleanupVersion", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(cleanupVersion);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        isTrackColumnsUpdatedOn.Value = values[1];
                        minValidVersion.Value = values[2];
                        beginVersion.Value = values[3];
                        cleanupVersion.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];
                        isSparse.Value = values[23];
                        isColumnSet.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];
                        isComputed.Value = values[25];
                        isSparse.Value = values[26];
                        isColumnSet.Value = values[27];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_conversation_priorities (priority_id,name,service_contract_id,loc" +
                        "al_service_id,remote_service_name,priority) values (@priorityId, @name, @service" +
                        "ContractId, @localServiceId, @remoteServiceName, @priority)";

                    Microsoft.Data.Sqlite.SqliteParameter priorityId = new Microsoft.Data.Sqlite.SqliteParameter("@priorityId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(priorityId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter localServiceId = new Microsoft.Data.Sqlite.SqliteParameter("@localServiceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(localServiceId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter priority = new Microsoft.Data.Sqlite.SqliteParameter("@priority", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(priority);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        priorityId.Value = values[0];
                        name.Value = values[1];
                        serviceContractId.Value = values[2];
                        localServiceId.Value = values[3];
                        remoteServiceName.Value = values[4];
                        priority.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default) values" +
                        " (@name, @dataSpaceId, @type, @typeDesc, @isDefault)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        createLsn.Value = values[17];
                        dropLsn.Value = values[18];
                        readOnlyLsn.Value = values[19];
                        readWriteLsn.Value = values[20];
                        differentialBaseLsn.Value = values[21];
                        differentialBaseGuid.Value = values[22];
                        differentialBaseTime.Value = values[23];
                        redoStartLsn.Value = values[24];
                        redoStartForkGuid.Value = values[25];
                        redoTargetLsn.Value = values[26];
                        redoTargetForkGuid.Value = values[27];
                        backupLsn.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_update" +
                        "_stats_on,is_auto_update_stats_async_on,is_ansi_null_default_on,is_ansi_nulls_on" +
                        ",is_ansi_padding_on,is_ansi_warnings_on,is_arithabort_on,is_concat_null_yields_n" +
                        "ull_on,is_numeric_roundabort_on,is_quoted_identifier_on,is_recursive_triggers_on" +
                        ",is_cursor_close_on_commit_on,is_local_cursor_default,is_fulltext_enabled,is_tru" +
                        "stworthy_on,is_db_chaining_on,is_parameterization_forced,is_master_key_encrypted" +
                        "_by_server,is_published,is_subscribed,is_merge_published,is_distributor,is_sync_" +
                        "with_backup,service_broker_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_" +
                        "desc,is_date_correlation_on,is_cdc_enabled,is_encrypted,is_honor_broker_priority" +
                        "_on) values (@name, @databaseId, @sourceDatabaseId, @ownerSid, @createDate, @com" +
                        "patibilityLevel, @collationName, @userAccess, @userAccessDesc, @isReadOnly, @isA" +
                        "utoCloseOn, @isAutoShrinkOn, @state, @stateDesc, @isInStandby, @isCleanlyShutdow" +
                        "n, @isSupplementalLoggingEnabled, @snapshotIsolationState, @snapshotIsolationSta" +
                        "teDesc, @isReadCommittedSnapshotOn, @recoveryModel, @recoveryModelDesc, @pageVer" +
                        "ifyOption, @pageVerifyOptionDesc, @isAutoCreateStatsOn, @isAutoUpdateStatsOn, @i" +
                        "sAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAnsiNullsOn, @isAnsiPaddingOn," +
                        " @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYieldsNullOn, @isNumericRounda" +
                        "bortOn, @isQuotedIdentifierOn, @isRecursiveTriggersOn, @isCursorCloseOnCommitOn," +
                        " @isLocalCursorDefault, @isFulltextEnabled, @isTrustworthyOn, @isDbChainingOn, @" +
                        "isParameterizationForced, @isMasterKeyEncryptedByServer, @isPublished, @isSubscr" +
                        "ibed, @isMergePublished, @isDistributor, @isSyncWithBackup, @serviceBrokerGuid, " +
                        "@isBrokerEnabled, @logReuseWait, @logReuseWaitDesc, @isDateCorrelationOn, @isCdc" +
                        "Enabled, @isEncrypted, @isHonorBrokerPriorityOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCdcEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isCdcEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCdcEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEncrypted = new Microsoft.Data.Sqlite.SqliteParameter("@isEncrypted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEncrypted);
                    Microsoft.Data.Sqlite.SqliteParameter isHonorBrokerPriorityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isHonorBrokerPriorityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHonorBrokerPriorityOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoUpdateStatsOn.Value = values[25];
                        isAutoUpdateStatsAsyncOn.Value = values[26];
                        isAnsiNullDefaultOn.Value = values[27];
                        isAnsiNullsOn.Value = values[28];
                        isAnsiPaddingOn.Value = values[29];
                        isAnsiWarningsOn.Value = values[30];
                        isArithabortOn.Value = values[31];
                        isConcatNullYieldsNullOn.Value = values[32];
                        isNumericRoundabortOn.Value = values[33];
                        isQuotedIdentifierOn.Value = values[34];
                        isRecursiveTriggersOn.Value = values[35];
                        isCursorCloseOnCommitOn.Value = values[36];
                        isLocalCursorDefault.Value = values[37];
                        isFulltextEnabled.Value = values[38];
                        isTrustworthyOn.Value = values[39];
                        isDbChainingOn.Value = values[40];
                        isParameterizationForced.Value = values[41];
                        isMasterKeyEncryptedByServer.Value = values[42];
                        isPublished.Value = values[43];
                        isSubscribed.Value = values[44];
                        isMergePublished.Value = values[45];
                        isDistributor.Value = values[46];
                        isSyncWithBackup.Value = values[47];
                        serviceBrokerGuid.Value = values[48];
                        isBrokerEnabled.Value = values[49];
                        logReuseWait.Value = values[50];
                        logReuseWaitDesc.Value = values[51];
                        isDateCorrelationOn.Value = values[52];
                        isCdcEnabled.Value = values[53];
                        isEncrypted.Value = values[54];
                        isHonorBrokerPriorityOn.Value = values[55];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event,event_group_typ" +
                        "e,event_group_type_desc) values (@objectId, @type, @typeDesc, @isTriggerEvent, @" +
                        "eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];
                        eventGroupType.Value = values[4];
                        eventGroupTypeDesc.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,filegrou" +
                        "p_guid,log_filegroup_id,is_read_only) values (@name, @dataSpaceId, @type, @typeD" +
                        "esc, @isDefault, @filegroupGuid, @logFilegroupId, @isReadOnly)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        filegroupGuid.Value = values[5];
                        logFilegroupId.Value = values[6];
                        isReadOnly.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_accent_sensitivity_on,data_space_id,file_id,principal_id,is_importing) values (@fulltextCatalogId, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @principalId, @isImporting)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter isImporting = new Microsoft.Data.Sqlite.SqliteParameter("@isImporting", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isImporting);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];
                        isImporting.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id) values (@objectId, @columnId, @typeColumnId, @languageId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp,stoplist_id,data_space_id) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp, @stoplistId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];
                        stoplistId.Value = values[12];
                        dataSpaceId.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_stoplists (stoplist_id,name,create_date,modify_date,prin" +
                        "cipal_id) values (@stoplistId, @name, @createDate, @modifyDate, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter stoplistId = new Microsoft.Data.Sqlite.SqliteParameter("@stoplistId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(stoplistId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        stoplistId.Value = values[0];
                        name.Value = values[1];
                        createDate.Value = values[2];
                        modifyDate.Value = values[3];
                        principalId.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_function_order_columns (object_id,order_column_id,column_id,is_de" +
                        "scending) values (@objectId, @orderColumnId, @columnId, @isDescending)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter orderColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@orderColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(orderColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter isDescending = new Microsoft.Data.Sqlite.SqliteParameter("@isDescending", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescending);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        orderColumnId.Value = values[1];
                        columnId.Value = values[2];
                        isDescending.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication,is_computed,is_sparse,is_column_set) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication, @isComputed, @isSparse, @isColumnSet)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isColumnSet = new Microsoft.Data.Sqlite.SqliteParameter("@isColumnSet", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isColumnSet);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];
                        isComputed.Value = values[26];
                        isSparse.Value = values[27];
                        isColumnSet.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        hasFilter.Value = values[16];
                        filterDefinition.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id,is_readonly) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId, @isReadonly)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadonly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadonly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadonly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];
                        isReadonly.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,create_date,modify_date) values (@name, @functionId, @type, @" +
                        "typeDesc, @fanout, @boundaryValueOnRight, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name,user_type_id) values (@functionId, @param" +
                        "eterId, @systemTypeId, @maxLength, @precision, @scale, @collationName, @userType" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];
                        userTypeId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,f" +
                        "unction_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @function" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        functionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt_id,rows,filestream_filegroup_id,data_compression,data_compression_desc) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, @rows, @filestreamFilegroupId, @dataCompression, @dataCompressionDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamFilegroupId", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(filestreamFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompression = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompression", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(dataCompression);
                    Microsoft.Data.Sqlite.SqliteParameter dataCompressionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@dataCompressionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(dataCompressionDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];
                        filestreamFilegroupId.Value = values[6];
                        dataCompression.Value = values[7];
                        dataCompressionDesc.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled,is_poison_message_handling_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled, @isPoisonMessageHandlingEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isPoisonMessageHandlingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isPoisonMessageHandlingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPoisonMessageHandlingEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];
                        isPoisonMessageHandlingEnabled.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_index_tessellations (object_id,index_id,tessellation_scheme,bounding_box_xmin,bounding_box_ymin,bounding_box_xmax,bounding_box_ymax,level_1_grid,level_1_grid_desc,level_2_grid,level_2_grid_desc,level_3_grid,level_3_grid_desc,level_4_grid,level_4_grid_desc,cells_per_object) values (@objectId, @indexId, @tessellationScheme, @boundingBoxXmin, @boundingBoxYmin, @boundingBoxXmax, @boundingBoxYmax, @level1Grid, @level1GridDesc, @level2Grid, @level2GridDesc, @level3Grid, @level3GridDesc, @level4Grid, @level4GridDesc, @cellsPerObject)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmin = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmin", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmin);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxXmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxXmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxXmax);
                    Microsoft.Data.Sqlite.SqliteParameter boundingBoxYmax = new Microsoft.Data.Sqlite.SqliteParameter("@boundingBoxYmax", System.Data.DbType.Double);
                    sqliteCommand.Parameters.Add(boundingBoxYmax);
                    Microsoft.Data.Sqlite.SqliteParameter level1Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level1Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level1Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level1GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level1GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level1GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level2Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level2Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level2Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level2GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level2GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level2GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level3Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level3Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level3Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level3GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level3GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level3GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter level4Grid = new Microsoft.Data.Sqlite.SqliteParameter("@level4Grid", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(level4Grid);
                    Microsoft.Data.Sqlite.SqliteParameter level4GridDesc = new Microsoft.Data.Sqlite.SqliteParameter("@level4GridDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(level4GridDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cellsPerObject = new Microsoft.Data.Sqlite.SqliteParameter("@cellsPerObject", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(cellsPerObject);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        tessellationScheme.Value = values[2];
                        boundingBoxXmin.Value = values[3];
                        boundingBoxYmin.Value = values[4];
                        boundingBoxXmax.Value = values[5];
                        boundingBoxYmax.Value = values[6];
                        level1Grid.Value = values[7];
                        level1GridDesc.Value = values[8];
                        level2Grid.Value = values[9];
                        level2GridDesc.Value = values[10];
                        level3Grid.Value = values[11];
                        level3GridDesc.Value = values[12];
                        level4Grid.Value = values[13];
                        level4GridDesc.Value = values[14];
                        cellsPerObject.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_spatial_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,spatial_index_type,spatial_index_type_desc,tessellation_scheme,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @spatialIndexType, @spatialIndexTypeDesc, @tessellationScheme, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexType = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(spatialIndexType);
                    Microsoft.Data.Sqlite.SqliteParameter spatialIndexTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@spatialIndexTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(spatialIndexTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter tessellationScheme = new Microsoft.Data.Sqlite.SqliteParameter("@tessellationScheme", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(tessellationScheme);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        spatialIndexType.Value = values[16];
                        spatialIndexTypeDesc.Value = values[17];
                        tessellationScheme.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recom" +
                        "pute,has_filter,filter_definition) values (@objectId, @name, @statsId, @autoCrea" +
                        "ted, @userCreated, @noRecompute, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];
                        hasFilter.Value = values[6];
                        filterDefinition.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid,key_thumbprint,provider_type,cryptographic_provider_guid,cryptographic_provider_algid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid, @keyThumbprint, @providerType, @cryptographicProviderGuid, @cryptographicProviderAlgid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    Microsoft.Data.Sqlite.SqliteParameter keyThumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@keyThumbprint", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(keyThumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter providerType = new Microsoft.Data.Sqlite.SqliteParameter("@providerType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(providerType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderGuid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(cryptographicProviderGuid);
                    Microsoft.Data.Sqlite.SqliteParameter cryptographicProviderAlgid = new Microsoft.Data.Sqlite.SqliteParameter("@cryptographicProviderAlgid", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(cryptographicProviderAlgid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];
                        keyThumbprint.Value = values[9];
                        providerType.Value = values[10];
                        cryptographicProviderGuid.Value = values[11];
                        cryptographicProviderAlgid.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_table_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type,type_table_object_id) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType, @typeTableObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    Microsoft.Data.Sqlite.SqliteParameter typeTableObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@typeTableObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeTableObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];
                        typeTableObjectId.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row,is_tracked_by_cdc,lock_escalation,lock_escalation_desc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow, @isTrackedByCdc, @lockEscalation, @lockEscalationDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalation = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalation", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(lockEscalation);
                    Microsoft.Data.Sqlite.SqliteParameter lockEscalationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@lockEscalationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(lockEscalationDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];
                        isTrackedByCdc.Value = values[24];
                        lockEscalation.Value = values[25];
                        lockEscalationDesc.Value = values[26];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last,event_g" +
                        "roup_type,event_group_type_desc) values (@objectId, @type, @typeDesc, @isFirst, " +
                        "@isLast, @eventGroupType, @eventGroupTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupType = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupType", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(eventGroupType);
                    Microsoft.Data.Sqlite.SqliteParameter eventGroupTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@eventGroupTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(eventGroupTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];
                        eventGroupType.Value = values[5];
                        eventGroupTypeDesc.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,is_table_type) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @isTableType)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter isTableType = new Microsoft.Data.Sqlite.SqliteParameter("@isTableType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTableType);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        isTableType.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view,is_tracked_by_cdc) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView, @isTrackedByCdc)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    Microsoft.Data.Sqlite.SqliteParameter isTrackedByCdc = new Microsoft.Data.Sqlite.SqliteParameter("@isTrackedByCdc", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrackedByCdc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];
                        isTrackedByCdc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc,has_filter,filter_definition) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc, @hasFilter, @filterDefinition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasFilter);
                    Microsoft.Data.Sqlite.SqliteParameter filterDefinition = new Microsoft.Data.Sqlite.SqliteParameter("@filterDefinition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(filterDefinition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        usingXmlIndexId.Value = values[16];
                        secondaryType.Value = values[17];
                        secondaryTypeDesc.Value = values[18];
                        hasFilter.Value = values[19];
                        filterDefinition.Value = values[20];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        private void Load2005(System.Data.SqlClient.SqlConnection connection)
        {
            System.Data.SqlClient.SqlCommand command = null;
            System.Data.SqlClient.SqlDataReader reader = null;
            try
            {
                command = new System.Data.SqlClient.SqlCommand("select * from sys.all_columns;select * from sys.all_objects;select * from sys.all" +
                        "_views;select * from sys.assemblies;select * from sys.assembly_files;select * fr" +
                        "om sys.assembly_modules;select * from sys.assembly_types;select * from sys.asymm" +
                        "etric_keys;select * from sys.certificates;select * from sys.check_constraints;se" +
                        "lect * from sys.columns;select * from sys.computed_columns;select * from sys.cry" +
                        "pt_properties;select * from sys.data_spaces;select * from sys.database_files;sel" +
                        "ect * from sys.database_principals;select * from sys.database_role_members;selec" +
                        "t * from sys.databases;select * from sys.default_constraints;select * from sys.d" +
                        "estination_data_spaces;select * from sys.event_notifications;select * from sys.e" +
                        "vents;select * from sys.extended_properties;select * from sys.filegroups;select " +
                        "* from sys.foreign_key_columns;select * from sys.foreign_keys;select * from sys." +
                        "fulltext_catalogs;select * from sys.fulltext_index_columns;select * from sys.ful" +
                        "ltext_indexes;select * from sys.identity_columns;select * from sys.index_columns" +
                        ";select * from sys.indexes;select * from sys.internal_tables;select * from sys.k" +
                        "ey_constraints;select * from sys.key_encryptions;select * from sys.numbered_proc" +
                        "edure_parameters;select * from sys.numbered_procedures;select * from sys.objects" +
                        ";select * from sys.parameters;select * from sys.partition_functions;select * fro" +
                        "m sys.partition_parameters;select * from sys.partition_range_values;select * fro" +
                        "m sys.partition_schemes;select * from sys.partitions;select * from sys.procedure" +
                        "s;select * from sys.remote_service_bindings;select * from sys.routes;select * fr" +
                        "om sys.schemas;select * from sys.service_contract_message_usages;select * from s" +
                        "ys.service_contract_usages;select * from sys.service_contracts;select * from sys" +
                        ".service_message_types;select * from sys.service_queues;select * from sys.servic" +
                        "es;select * from sys.sql_modules;select * from sys.stats;select * from sys.stats" +
                        "_columns;select * from sys.symmetric_keys;select * from sys.synonyms;select * fr" +
                        "om sys.tables;select * from sys.trigger_events;select * from sys.triggers;select" +
                        " * from sys.types;select * from sys.views;select * from sys.xml_indexes;select *" +
                        " from sys.xml_schema_collections");
                command.Connection = connection;
                reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_all_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assemblies (name,principal_id,assembly_id,clr_name,permission_set,permission_set_desc,is_visible,create_date,modify_date) values (@name, @principalId, @assemblyId, @clrName, @permissionSet, @permissionSetDesc, @isVisible, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter clrName = new Microsoft.Data.Sqlite.SqliteParameter("@clrName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(clrName);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSet = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSet", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(permissionSet);
                    Microsoft.Data.Sqlite.SqliteParameter permissionSetDesc = new Microsoft.Data.Sqlite.SqliteParameter("@permissionSetDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(permissionSetDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isVisible = new Microsoft.Data.Sqlite.SqliteParameter("@isVisible", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isVisible);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        assemblyId.Value = values[2];
                        clrName.Value = values[3];
                        permissionSet.Value = values[4];
                        permissionSetDesc.Value = values[5];
                        isVisible.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_files (assembly_id,name,file_id,content) values (@assemb" +
                        "lyId, @name, @fileId, @content)";

                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter content = new Microsoft.Data.Sqlite.SqliteParameter("@content", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(content);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        assemblyId.Value = values[0];
                        name.Value = values[1];
                        fileId.Value = values[2];
                        content.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_assembly_modules (object_id,assembly_id,assembly_class,assembly_m" +
                        "ethod,null_on_null_input,execute_as_principal_id) values (@objectId, @assemblyId" +
                        ", @assemblyClass, @assemblyMethod, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyMethod = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyMethod", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyMethod);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        assemblyId.Value = values[1];
                        assemblyClass.Value = values[2];
                        assemblyMethod.Value = values[3];
                        nullOnNullInput.Value = values[4];
                        executeAsPrincipalId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_assembly_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id,assembly_id,assembly_class,is_binary_ordered,is_fixed_length,prog_id,assembly_qualified_name) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId, @assemblyId, @assemblyClass, @isBinaryOrdered, @isFixedLength, @progId, @assemblyQualifiedName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyId = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(assemblyId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyClass = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyClass", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyClass);
                    Microsoft.Data.Sqlite.SqliteParameter isBinaryOrdered = new Microsoft.Data.Sqlite.SqliteParameter("@isBinaryOrdered", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBinaryOrdered);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedLength = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedLength", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedLength);
                    Microsoft.Data.Sqlite.SqliteParameter progId = new Microsoft.Data.Sqlite.SqliteParameter("@progId", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(progId);
                    Microsoft.Data.Sqlite.SqliteParameter assemblyQualifiedName = new Microsoft.Data.Sqlite.SqliteParameter("@assemblyQualifiedName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(assemblyQualifiedName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];
                        assemblyId.Value = values[14];
                        assemblyClass.Value = values[15];
                        isBinaryOrdered.Value = values[16];
                        isFixedLength.Value = values[17];
                        progId.Value = values[18];
                        assemblyQualifiedName.Value = values[19];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_asymmetric_keys (name,principal_id,asymmetric_key_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,thumbprint,algorithm,algorithm_desc,key_length,sid,string_sid,public_key,attested_by) values (@name, @principalId, @asymmetricKeyId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @thumbprint, @algorithm, @algorithmDesc, @keyLength, @sid, @stringSid, @publicKey, @attestedBy)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter asymmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@asymmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(asymmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter algorithm = new Microsoft.Data.Sqlite.SqliteParameter("@algorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter publicKey = new Microsoft.Data.Sqlite.SqliteParameter("@publicKey", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(publicKey);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        asymmetricKeyId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        thumbprint.Value = values[5];
                        algorithm.Value = values[6];
                        algorithmDesc.Value = values[7];
                        keyLength.Value = values[8];
                        sid.Value = values[9];
                        stringSid.Value = values[10];
                        publicKey.Value = values[11];
                        attestedBy.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_certificates (name,certificate_id,principal_id,pvt_key_encryption_type,pvt_key_encryption_type_desc,is_active_for_begin_dialog,issuer_name,cert_serial_number,sid,string_sid,subject,expiry_date,start_date,thumbprint,attested_by) values (@name, @certificateId, @principalId, @pvtKeyEncryptionType, @pvtKeyEncryptionTypeDesc, @isActiveForBeginDialog, @issuerName, @certSerialNumber, @sid, @stringSid, @subject, @expiryDate, @startDate, @thumbprint, @attestedBy)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter certificateId = new Microsoft.Data.Sqlite.SqliteParameter("@certificateId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(certificateId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionType = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionType);
                    Microsoft.Data.Sqlite.SqliteParameter pvtKeyEncryptionTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pvtKeyEncryptionTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pvtKeyEncryptionTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isActiveForBeginDialog = new Microsoft.Data.Sqlite.SqliteParameter("@isActiveForBeginDialog", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActiveForBeginDialog);
                    Microsoft.Data.Sqlite.SqliteParameter issuerName = new Microsoft.Data.Sqlite.SqliteParameter("@issuerName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(issuerName);
                    Microsoft.Data.Sqlite.SqliteParameter certSerialNumber = new Microsoft.Data.Sqlite.SqliteParameter("@certSerialNumber", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(certSerialNumber);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter stringSid = new Microsoft.Data.Sqlite.SqliteParameter("@stringSid", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stringSid);
                    Microsoft.Data.Sqlite.SqliteParameter subject = new Microsoft.Data.Sqlite.SqliteParameter("@subject", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(subject);
                    Microsoft.Data.Sqlite.SqliteParameter expiryDate = new Microsoft.Data.Sqlite.SqliteParameter("@expiryDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(expiryDate);
                    Microsoft.Data.Sqlite.SqliteParameter startDate = new Microsoft.Data.Sqlite.SqliteParameter("@startDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(startDate);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter attestedBy = new Microsoft.Data.Sqlite.SqliteParameter("@attestedBy", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(attestedBy);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        certificateId.Value = values[1];
                        principalId.Value = values[2];
                        pvtKeyEncryptionType.Value = values[3];
                        pvtKeyEncryptionTypeDesc.Value = values[4];
                        isActiveForBeginDialog.Value = values[5];
                        issuerName.Value = values[6];
                        certSerialNumber.Value = values[7];
                        sid.Value = values[8];
                        stringSid.Value = values[9];
                        subject.Value = values[10];
                        expiryDate.Value = values[11];
                        startDate.Value = values[12];
                        thumbprint.Value = values[13];
                        attestedBy.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_check_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_disabled,is_not_for_replication,is_not_trusted,parent_column_id,definition,uses_database_collation,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isDisabled, @isNotForReplication, @isNotTrusted, @parentColumnId, @definition, @usesDatabaseCollation, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isDisabled.Value = values[12];
                        isNotForReplication.Value = values[13];
                        isNotTrusted.Value = values[14];
                        parentColumnId.Value = values[15];
                        definition.Value = values[16];
                        usesDatabaseCollation.Value = values[17];
                        isSystemNamed.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_computed,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isComputed, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isComputed = new Microsoft.Data.Sqlite.SqliteParameter("@isComputed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isComputed);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isComputed.Value = values[13];
                        isFilestream.Value = values[14];
                        isReplicated.Value = values[15];
                        isNonSqlSubscribed.Value = values[16];
                        isMergePublished.Value = values[17];
                        isDtsReplicated.Value = values[18];
                        isXmlDocument.Value = values[19];
                        xmlCollectionId.Value = values[20];
                        defaultObjectId.Value = values[21];
                        ruleObjectId.Value = values[22];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_computed_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,definition,uses_database_collation,is_persisted) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @definition, @usesDatabaseCollation, @isPersisted)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isPersisted = new Microsoft.Data.Sqlite.SqliteParameter("@isPersisted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPersisted);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        definition.Value = values[22];
                        usesDatabaseCollation.Value = values[23];
                        isPersisted.Value = values[24];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_crypt_properties (class,class_desc,major_id,thumbprint,crypt_type" +
                        ",crypt_type_desc,crypt_property) values (@class, @classDesc, @majorId, @thumbpri" +
                        "nt, @cryptType, @cryptTypeDesc, @cryptProperty)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        thumbprint.Value = values[3];
                        cryptType.Value = values[4];
                        cryptTypeDesc.Value = values[5];
                        cryptProperty.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_data_spaces (name,data_space_id,type,type_desc,is_default) values" +
                        " (@name, @dataSpaceId, @type, @typeDesc, @isDefault)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_files (file_id,file_guid,type,type_desc,data_space_id,name,physical_name,state,state_desc,size,max_size,growth,is_media_read_only,is_read_only,is_sparse,is_percent_growth,is_name_reserved,create_lsn,drop_lsn,read_only_lsn,read_write_lsn,differential_base_lsn,differential_base_guid,differential_base_time,redo_start_lsn,redo_start_fork_guid,redo_target_lsn,redo_target_fork_guid,backup_lsn) values (@fileId, @fileGuid, @type, @typeDesc, @dataSpaceId, @name, @physicalName, @state, @stateDesc, @size, @maxSize, @growth, @isMediaReadOnly, @isReadOnly, @isSparse, @isPercentGrowth, @isNameReserved, @createLsn, @dropLsn, @readOnlyLsn, @readWriteLsn, @differentialBaseLsn, @differentialBaseGuid, @differentialBaseTime, @redoStartLsn, @redoStartForkGuid, @redoTargetLsn, @redoTargetForkGuid, @backupLsn)";

                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter fileGuid = new Microsoft.Data.Sqlite.SqliteParameter("@fileGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(fileGuid);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter physicalName = new Microsoft.Data.Sqlite.SqliteParameter("@physicalName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(physicalName);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter size = new Microsoft.Data.Sqlite.SqliteParameter("@size", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(size);
                    Microsoft.Data.Sqlite.SqliteParameter maxSize = new Microsoft.Data.Sqlite.SqliteParameter("@maxSize", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxSize);
                    Microsoft.Data.Sqlite.SqliteParameter growth = new Microsoft.Data.Sqlite.SqliteParameter("@growth", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(growth);
                    Microsoft.Data.Sqlite.SqliteParameter isMediaReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isMediaReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMediaReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isSparse = new Microsoft.Data.Sqlite.SqliteParameter("@isSparse", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSparse);
                    Microsoft.Data.Sqlite.SqliteParameter isPercentGrowth = new Microsoft.Data.Sqlite.SqliteParameter("@isPercentGrowth", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPercentGrowth);
                    Microsoft.Data.Sqlite.SqliteParameter isNameReserved = new Microsoft.Data.Sqlite.SqliteParameter("@isNameReserved", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNameReserved);
                    Microsoft.Data.Sqlite.SqliteParameter createLsn = new Microsoft.Data.Sqlite.SqliteParameter("@createLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(createLsn);
                    Microsoft.Data.Sqlite.SqliteParameter dropLsn = new Microsoft.Data.Sqlite.SqliteParameter("@dropLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(dropLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readOnlyLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readOnlyLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readOnlyLsn);
                    Microsoft.Data.Sqlite.SqliteParameter readWriteLsn = new Microsoft.Data.Sqlite.SqliteParameter("@readWriteLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(readWriteLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseLsn = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(differentialBaseLsn);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseGuid = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(differentialBaseGuid);
                    Microsoft.Data.Sqlite.SqliteParameter differentialBaseTime = new Microsoft.Data.Sqlite.SqliteParameter("@differentialBaseTime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(differentialBaseTime);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoStartLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoStartForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoStartForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoStartForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetLsn = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(redoTargetLsn);
                    Microsoft.Data.Sqlite.SqliteParameter redoTargetForkGuid = new Microsoft.Data.Sqlite.SqliteParameter("@redoTargetForkGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(redoTargetForkGuid);
                    Microsoft.Data.Sqlite.SqliteParameter backupLsn = new Microsoft.Data.Sqlite.SqliteParameter("@backupLsn", System.Data.DbType.Decimal);
                    sqliteCommand.Parameters.Add(backupLsn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fileId.Value = values[0];
                        fileGuid.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        dataSpaceId.Value = values[4];
                        name.Value = values[5];
                        physicalName.Value = values[6];
                        state.Value = values[7];
                        stateDesc.Value = values[8];
                        size.Value = values[9];
                        maxSize.Value = values[10];
                        growth.Value = values[11];
                        isMediaReadOnly.Value = values[12];
                        isReadOnly.Value = values[13];
                        isSparse.Value = values[14];
                        isPercentGrowth.Value = values[15];
                        isNameReserved.Value = values[16];
                        createLsn.Value = values[17];
                        dropLsn.Value = values[18];
                        readOnlyLsn.Value = values[19];
                        readWriteLsn.Value = values[20];
                        differentialBaseLsn.Value = values[21];
                        differentialBaseGuid.Value = values[22];
                        differentialBaseTime.Value = values[23];
                        redoStartLsn.Value = values[24];
                        redoStartForkGuid.Value = values[25];
                        redoTargetLsn.Value = values[26];
                        redoTargetForkGuid.Value = values[27];
                        backupLsn.Value = values[28];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_database_principals (name,principal_id,type,type_desc,default_schema_name,create_date,modify_date,owning_principal_id,sid,is_fixed_role) values (@name, @principalId, @type, @typeDesc, @defaultSchemaName, @createDate, @modifyDate, @owningPrincipalId, @sid, @isFixedRole)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter defaultSchemaName = new Microsoft.Data.Sqlite.SqliteParameter("@defaultSchemaName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(defaultSchemaName);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter owningPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@owningPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(owningPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter sid = new Microsoft.Data.Sqlite.SqliteParameter("@sid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(sid);
                    Microsoft.Data.Sqlite.SqliteParameter isFixedRole = new Microsoft.Data.Sqlite.SqliteParameter("@isFixedRole", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFixedRole);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        defaultSchemaName.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        owningPrincipalId.Value = values[7];
                        sid.Value = values[8];
                        isFixedRole.Value = values[9];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_database_role_members (role_principal_id,member_principal_id) val" +
                        "ues (@rolePrincipalId, @memberPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter rolePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@rolePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(rolePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter memberPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@memberPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(memberPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        rolePrincipalId.Value = values[0];
                        memberPrincipalId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_databases (name,database_id,source_database_id,owner_sid,create_d" +
                        "ate,compatibility_level,collation_name,user_access,user_access_desc,is_read_only" +
                        ",is_auto_close_on,is_auto_shrink_on,state,state_desc,is_in_standby,is_cleanly_sh" +
                        "utdown,is_supplemental_logging_enabled,snapshot_isolation_state,snapshot_isolati" +
                        "on_state_desc,is_read_committed_snapshot_on,recovery_model,recovery_model_desc,p" +
                        "age_verify_option,page_verify_option_desc,is_auto_create_stats_on,is_auto_update" +
                        "_stats_on,is_auto_update_stats_async_on,is_ansi_null_default_on,is_ansi_nulls_on" +
                        ",is_ansi_padding_on,is_ansi_warnings_on,is_arithabort_on,is_concat_null_yields_n" +
                        "ull_on,is_numeric_roundabort_on,is_quoted_identifier_on,is_recursive_triggers_on" +
                        ",is_cursor_close_on_commit_on,is_local_cursor_default,is_fulltext_enabled,is_tru" +
                        "stworthy_on,is_db_chaining_on,is_parameterization_forced,is_master_key_encrypted" +
                        "_by_server,is_published,is_subscribed,is_merge_published,is_distributor,is_sync_" +
                        "with_backup,service_broker_guid,is_broker_enabled,log_reuse_wait,log_reuse_wait_" +
                        "desc,is_date_correlation_on) values (@name, @databaseId, @sourceDatabaseId, @own" +
                        "erSid, @createDate, @compatibilityLevel, @collationName, @userAccess, @userAcces" +
                        "sDesc, @isReadOnly, @isAutoCloseOn, @isAutoShrinkOn, @state, @stateDesc, @isInSt" +
                        "andby, @isCleanlyShutdown, @isSupplementalLoggingEnabled, @snapshotIsolationStat" +
                        "e, @snapshotIsolationStateDesc, @isReadCommittedSnapshotOn, @recoveryModel, @rec" +
                        "overyModelDesc, @pageVerifyOption, @pageVerifyOptionDesc, @isAutoCreateStatsOn, " +
                        "@isAutoUpdateStatsOn, @isAutoUpdateStatsAsyncOn, @isAnsiNullDefaultOn, @isAnsiNu" +
                        "llsOn, @isAnsiPaddingOn, @isAnsiWarningsOn, @isArithabortOn, @isConcatNullYields" +
                        "NullOn, @isNumericRoundabortOn, @isQuotedIdentifierOn, @isRecursiveTriggersOn, @" +
                        "isCursorCloseOnCommitOn, @isLocalCursorDefault, @isFulltextEnabled, @isTrustwort" +
                        "hyOn, @isDbChainingOn, @isParameterizationForced, @isMasterKeyEncryptedByServer," +
                        " @isPublished, @isSubscribed, @isMergePublished, @isDistributor, @isSyncWithBack" +
                        "up, @serviceBrokerGuid, @isBrokerEnabled, @logReuseWait, @logReuseWaitDesc, @isD" +
                        "ateCorrelationOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter databaseId = new Microsoft.Data.Sqlite.SqliteParameter("@databaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(databaseId);
                    Microsoft.Data.Sqlite.SqliteParameter sourceDatabaseId = new Microsoft.Data.Sqlite.SqliteParameter("@sourceDatabaseId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(sourceDatabaseId);
                    Microsoft.Data.Sqlite.SqliteParameter ownerSid = new Microsoft.Data.Sqlite.SqliteParameter("@ownerSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(ownerSid);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter compatibilityLevel = new Microsoft.Data.Sqlite.SqliteParameter("@compatibilityLevel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(compatibilityLevel);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter userAccess = new Microsoft.Data.Sqlite.SqliteParameter("@userAccess", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(userAccess);
                    Microsoft.Data.Sqlite.SqliteParameter userAccessDesc = new Microsoft.Data.Sqlite.SqliteParameter("@userAccessDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(userAccessDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCloseOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCloseOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCloseOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoShrinkOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoShrinkOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoShrinkOn);
                    Microsoft.Data.Sqlite.SqliteParameter state = new Microsoft.Data.Sqlite.SqliteParameter("@state", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(state);
                    Microsoft.Data.Sqlite.SqliteParameter stateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@stateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(stateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isInStandby = new Microsoft.Data.Sqlite.SqliteParameter("@isInStandby", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInStandby);
                    Microsoft.Data.Sqlite.SqliteParameter isCleanlyShutdown = new Microsoft.Data.Sqlite.SqliteParameter("@isCleanlyShutdown", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCleanlyShutdown);
                    Microsoft.Data.Sqlite.SqliteParameter isSupplementalLoggingEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isSupplementalLoggingEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSupplementalLoggingEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationState = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationState", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(snapshotIsolationState);
                    Microsoft.Data.Sqlite.SqliteParameter snapshotIsolationStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@snapshotIsolationStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(snapshotIsolationStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isReadCommittedSnapshotOn = new Microsoft.Data.Sqlite.SqliteParameter("@isReadCommittedSnapshotOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadCommittedSnapshotOn);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModel = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModel", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(recoveryModel);
                    Microsoft.Data.Sqlite.SqliteParameter recoveryModelDesc = new Microsoft.Data.Sqlite.SqliteParameter("@recoveryModelDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(recoveryModelDesc);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOption = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOption", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(pageVerifyOption);
                    Microsoft.Data.Sqlite.SqliteParameter pageVerifyOptionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@pageVerifyOptionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(pageVerifyOptionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoCreateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoCreateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoCreateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoUpdateStatsAsyncOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoUpdateStatsAsyncOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoUpdateStatsAsyncOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullDefaultOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullDefaultOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullDefaultOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiNullsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiNullsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiNullsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPaddingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPaddingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPaddingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiWarningsOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiWarningsOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiWarningsOn);
                    Microsoft.Data.Sqlite.SqliteParameter isArithabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isArithabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isArithabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isConcatNullYieldsNullOn = new Microsoft.Data.Sqlite.SqliteParameter("@isConcatNullYieldsNullOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isConcatNullYieldsNullOn);
                    Microsoft.Data.Sqlite.SqliteParameter isNumericRoundabortOn = new Microsoft.Data.Sqlite.SqliteParameter("@isNumericRoundabortOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNumericRoundabortOn);
                    Microsoft.Data.Sqlite.SqliteParameter isQuotedIdentifierOn = new Microsoft.Data.Sqlite.SqliteParameter("@isQuotedIdentifierOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isQuotedIdentifierOn);
                    Microsoft.Data.Sqlite.SqliteParameter isRecursiveTriggersOn = new Microsoft.Data.Sqlite.SqliteParameter("@isRecursiveTriggersOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecursiveTriggersOn);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorCloseOnCommitOn = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorCloseOnCommitOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorCloseOnCommitOn);
                    Microsoft.Data.Sqlite.SqliteParameter isLocalCursorDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isLocalCursorDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLocalCursorDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isFulltextEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isFulltextEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFulltextEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isTrustworthyOn = new Microsoft.Data.Sqlite.SqliteParameter("@isTrustworthyOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTrustworthyOn);
                    Microsoft.Data.Sqlite.SqliteParameter isDbChainingOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDbChainingOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDbChainingOn);
                    Microsoft.Data.Sqlite.SqliteParameter isParameterizationForced = new Microsoft.Data.Sqlite.SqliteParameter("@isParameterizationForced", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isParameterizationForced);
                    Microsoft.Data.Sqlite.SqliteParameter isMasterKeyEncryptedByServer = new Microsoft.Data.Sqlite.SqliteParameter("@isMasterKeyEncryptedByServer", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMasterKeyEncryptedByServer);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDistributor = new Microsoft.Data.Sqlite.SqliteParameter("@isDistributor", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDistributor);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncWithBackup = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncWithBackup", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncWithBackup);
                    Microsoft.Data.Sqlite.SqliteParameter serviceBrokerGuid = new Microsoft.Data.Sqlite.SqliteParameter("@serviceBrokerGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(serviceBrokerGuid);
                    Microsoft.Data.Sqlite.SqliteParameter isBrokerEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isBrokerEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isBrokerEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWait = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWait", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(logReuseWait);
                    Microsoft.Data.Sqlite.SqliteParameter logReuseWaitDesc = new Microsoft.Data.Sqlite.SqliteParameter("@logReuseWaitDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(logReuseWaitDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationOn = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        databaseId.Value = values[1];
                        sourceDatabaseId.Value = values[2];
                        ownerSid.Value = values[3];
                        createDate.Value = values[4];
                        compatibilityLevel.Value = values[5];
                        collationName.Value = values[6];
                        userAccess.Value = values[7];
                        userAccessDesc.Value = values[8];
                        isReadOnly.Value = values[9];
                        isAutoCloseOn.Value = values[10];
                        isAutoShrinkOn.Value = values[11];
                        state.Value = values[12];
                        stateDesc.Value = values[13];
                        isInStandby.Value = values[14];
                        isCleanlyShutdown.Value = values[15];
                        isSupplementalLoggingEnabled.Value = values[16];
                        snapshotIsolationState.Value = values[17];
                        snapshotIsolationStateDesc.Value = values[18];
                        isReadCommittedSnapshotOn.Value = values[19];
                        recoveryModel.Value = values[20];
                        recoveryModelDesc.Value = values[21];
                        pageVerifyOption.Value = values[22];
                        pageVerifyOptionDesc.Value = values[23];
                        isAutoCreateStatsOn.Value = values[24];
                        isAutoUpdateStatsOn.Value = values[25];
                        isAutoUpdateStatsAsyncOn.Value = values[26];
                        isAnsiNullDefaultOn.Value = values[27];
                        isAnsiNullsOn.Value = values[28];
                        isAnsiPaddingOn.Value = values[29];
                        isAnsiWarningsOn.Value = values[30];
                        isArithabortOn.Value = values[31];
                        isConcatNullYieldsNullOn.Value = values[32];
                        isNumericRoundabortOn.Value = values[33];
                        isQuotedIdentifierOn.Value = values[34];
                        isRecursiveTriggersOn.Value = values[35];
                        isCursorCloseOnCommitOn.Value = values[36];
                        isLocalCursorDefault.Value = values[37];
                        isFulltextEnabled.Value = values[38];
                        isTrustworthyOn.Value = values[39];
                        isDbChainingOn.Value = values[40];
                        isParameterizationForced.Value = values[41];
                        isMasterKeyEncryptedByServer.Value = values[42];
                        isPublished.Value = values[43];
                        isSubscribed.Value = values[44];
                        isMergePublished.Value = values[45];
                        isDistributor.Value = values[46];
                        isSyncWithBackup.Value = values[47];
                        serviceBrokerGuid.Value = values[48];
                        isBrokerEnabled.Value = values[49];
                        logReuseWait.Value = values[50];
                        logReuseWaitDesc.Value = values[51];
                        isDateCorrelationOn.Value = values[52];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_default_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,parent_column_id,definition,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @parentColumnId, @definition, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        parentColumnId.Value = values[12];
                        definition.Value = values[13];
                        isSystemNamed.Value = values[14];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_destination_data_spaces (partition_scheme_id,destination_id,data_" +
                        "space_id) values (@partitionSchemeId, @destinationId, @dataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionSchemeId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionSchemeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionSchemeId);
                    Microsoft.Data.Sqlite.SqliteParameter destinationId = new Microsoft.Data.Sqlite.SqliteParameter("@destinationId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(destinationId);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionSchemeId.Value = values[0];
                        destinationId.Value = values[1];
                        dataSpaceId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_event_notifications (name,object_id,parent_class,parent_class_desc,parent_id,create_date,modify_date,service_name,broker_instance,creator_sid,principal_id) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @createDate, @modifyDate, @serviceName, @brokerInstance, @creatorSid, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter serviceName = new Microsoft.Data.Sqlite.SqliteParameter("@serviceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(serviceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter creatorSid = new Microsoft.Data.Sqlite.SqliteParameter("@creatorSid", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(creatorSid);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        createDate.Value = values[5];
                        modifyDate.Value = values[6];
                        serviceName.Value = values[7];
                        brokerInstance.Value = values[8];
                        creatorSid.Value = values[9];
                        principalId.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_events (object_id,type,type_desc,is_trigger_event) values (@objec" +
                        "tId, @type, @typeDesc, @isTriggerEvent)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isTriggerEvent = new Microsoft.Data.Sqlite.SqliteParameter("@isTriggerEvent", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isTriggerEvent);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isTriggerEvent.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_extended_properties (class,class_desc,major_id,minor_id,name,valu" +
                        "e) values (@class, @classDesc, @majorId, @minorId, @name, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter @class = new Microsoft.Data.Sqlite.SqliteParameter("@class", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(@class);
                    Microsoft.Data.Sqlite.SqliteParameter classDesc = new Microsoft.Data.Sqlite.SqliteParameter("@classDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(classDesc);
                    Microsoft.Data.Sqlite.SqliteParameter majorId = new Microsoft.Data.Sqlite.SqliteParameter("@majorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(majorId);
                    Microsoft.Data.Sqlite.SqliteParameter minorId = new Microsoft.Data.Sqlite.SqliteParameter("@minorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(minorId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        @class.Value = values[0];
                        classDesc.Value = values[1];
                        majorId.Value = values[2];
                        minorId.Value = values[3];
                        name.Value = values[4];
                        value.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_filegroups (name,data_space_id,type,type_desc,is_default,filegrou" +
                        "p_guid,log_filegroup_id,is_read_only) values (@name, @dataSpaceId, @type, @typeD" +
                        "esc, @isDefault, @filegroupGuid, @logFilegroupId, @isReadOnly)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter filegroupGuid = new Microsoft.Data.Sqlite.SqliteParameter("@filegroupGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(filegroupGuid);
                    Microsoft.Data.Sqlite.SqliteParameter logFilegroupId = new Microsoft.Data.Sqlite.SqliteParameter("@logFilegroupId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(logFilegroupId);
                    Microsoft.Data.Sqlite.SqliteParameter isReadOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReadOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReadOnly);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        filegroupGuid.Value = values[5];
                        logFilegroupId.Value = values[6];
                        isReadOnly.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_key_columns (constraint_object_id,constraint_column_id,parent_object_id,parent_column_id,referenced_object_id,referenced_column_id) values (@constraintObjectId, @constraintColumnId, @parentObjectId, @parentColumnId, @referencedObjectId, @referencedColumnId)";

                    Microsoft.Data.Sqlite.SqliteParameter constraintObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter constraintColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@constraintColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(constraintColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@parentColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter referencedColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedColumnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        constraintObjectId.Value = values[0];
                        constraintColumnId.Value = values[1];
                        parentObjectId.Value = values[2];
                        parentColumnId.Value = values[3];
                        referencedObjectId.Value = values[4];
                        referencedColumnId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_foreign_keys (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,referenced_object_id,key_index_id,is_disabled,is_not_for_replication,is_not_trusted,delete_referential_action,delete_referential_action_desc,update_referential_action,update_referential_action_desc,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @referencedObjectId, @keyIndexId, @isDisabled, @isNotForReplication, @isNotTrusted, @deleteReferentialAction, @deleteReferentialActionDesc, @updateReferentialAction, @updateReferentialActionDesc, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter referencedObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@referencedObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(referencedObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter keyIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@keyIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isNotTrusted = new Microsoft.Data.Sqlite.SqliteParameter("@isNotTrusted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotTrusted);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(deleteReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter deleteReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@deleteReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(deleteReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialAction = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialAction", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(updateReferentialAction);
                    Microsoft.Data.Sqlite.SqliteParameter updateReferentialActionDesc = new Microsoft.Data.Sqlite.SqliteParameter("@updateReferentialActionDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(updateReferentialActionDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        referencedObjectId.Value = values[12];
                        keyIndexId.Value = values[13];
                        isDisabled.Value = values[14];
                        isNotForReplication.Value = values[15];
                        isNotTrusted.Value = values[16];
                        deleteReferentialAction.Value = values[17];
                        deleteReferentialActionDesc.Value = values[18];
                        updateReferentialAction.Value = values[19];
                        updateReferentialActionDesc.Value = values[20];
                        isSystemNamed.Value = values[21];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_catalogs (fulltext_catalog_id,name,path,is_default,is_ac" +
                        "cent_sensitivity_on,data_space_id,file_id,principal_id) values (@fulltextCatalog" +
                        "Id, @name, @path, @isDefault, @isAccentSensitivityOn, @dataSpaceId, @fileId, @pr" +
                        "incipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter path = new Microsoft.Data.Sqlite.SqliteParameter("@path", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(path);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter isAccentSensitivityOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAccentSensitivityOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAccentSensitivityOn);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter fileId = new Microsoft.Data.Sqlite.SqliteParameter("@fileId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fileId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        fulltextCatalogId.Value = values[0];
                        name.Value = values[1];
                        path.Value = values[2];
                        isDefault.Value = values[3];
                        isAccentSensitivityOn.Value = values[4];
                        dataSpaceId.Value = values[5];
                        fileId.Value = values[6];
                        principalId.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_fulltext_index_columns (object_id,column_id,type_column_id,langua" +
                        "ge_id) values (@objectId, @columnId, @typeColumnId, @languageId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter typeColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@typeColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(typeColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter languageId = new Microsoft.Data.Sqlite.SqliteParameter("@languageId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(languageId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        columnId.Value = values[1];
                        typeColumnId.Value = values[2];
                        languageId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_fulltext_indexes (object_id,unique_index_id,fulltext_catalog_id,is_enabled,change_tracking_state,change_tracking_state_desc,has_crawl_completed,crawl_type,crawl_type_desc,crawl_start_date,crawl_end_date,incremental_timestamp) values (@objectId, @uniqueIndexId, @fulltextCatalogId, @isEnabled, @changeTrackingState, @changeTrackingStateDesc, @hasCrawlCompleted, @crawlType, @crawlTypeDesc, @crawlStartDate, @crawlEndDate, @incrementalTimestamp)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter fulltextCatalogId = new Microsoft.Data.Sqlite.SqliteParameter("@fulltextCatalogId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fulltextCatalogId);
                    Microsoft.Data.Sqlite.SqliteParameter isEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingState = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingState", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingState);
                    Microsoft.Data.Sqlite.SqliteParameter changeTrackingStateDesc = new Microsoft.Data.Sqlite.SqliteParameter("@changeTrackingStateDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(changeTrackingStateDesc);
                    Microsoft.Data.Sqlite.SqliteParameter hasCrawlCompleted = new Microsoft.Data.Sqlite.SqliteParameter("@hasCrawlCompleted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasCrawlCompleted);
                    Microsoft.Data.Sqlite.SqliteParameter crawlType = new Microsoft.Data.Sqlite.SqliteParameter("@crawlType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlType);
                    Microsoft.Data.Sqlite.SqliteParameter crawlTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@crawlTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(crawlTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter crawlStartDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlStartDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlStartDate);
                    Microsoft.Data.Sqlite.SqliteParameter crawlEndDate = new Microsoft.Data.Sqlite.SqliteParameter("@crawlEndDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(crawlEndDate);
                    Microsoft.Data.Sqlite.SqliteParameter incrementalTimestamp = new Microsoft.Data.Sqlite.SqliteParameter("@incrementalTimestamp", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(incrementalTimestamp);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        uniqueIndexId.Value = values[1];
                        fulltextCatalogId.Value = values[2];
                        isEnabled.Value = values[3];
                        changeTrackingState.Value = values[4];
                        changeTrackingStateDesc.Value = values[5];
                        hasCrawlCompleted.Value = values[6];
                        crawlType.Value = values[7];
                        crawlTypeDesc.Value = values[8];
                        crawlStartDate.Value = values[9];
                        crawlEndDate.Value = values[10];
                        incrementalTimestamp.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_identity_columns (object_id,name,column_id,system_type_id,user_type_id,max_length,precision,scale,collation_name,is_nullable,is_ansi_padded,is_rowguidcol,is_identity,is_filestream,is_replicated,is_non_sql_subscribed,is_merge_published,is_dts_replicated,is_xml_document,xml_collection_id,default_object_id,rule_object_id,seed_value,increment_value,last_value,is_not_for_replication) values (@objectId, @name, @columnId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @collationName, @isNullable, @isAnsiPadded, @isRowguidcol, @isIdentity, @isFilestream, @isReplicated, @isNonSqlSubscribed, @isMergePublished, @isDtsReplicated, @isXmlDocument, @xmlCollectionId, @defaultObjectId, @ruleObjectId, @seedValue, @incrementValue, @lastValue, @isNotForReplication)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isAnsiPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isAnsiPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnsiPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isRowguidcol = new Microsoft.Data.Sqlite.SqliteParameter("@isRowguidcol", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRowguidcol);
                    Microsoft.Data.Sqlite.SqliteParameter isIdentity = new Microsoft.Data.Sqlite.SqliteParameter("@isIdentity", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIdentity);
                    Microsoft.Data.Sqlite.SqliteParameter isFilestream = new Microsoft.Data.Sqlite.SqliteParameter("@isFilestream", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFilestream);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isNonSqlSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isNonSqlSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNonSqlSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isDtsReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isDtsReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDtsReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter seedValue = new Microsoft.Data.Sqlite.SqliteParameter("@seedValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(seedValue);
                    Microsoft.Data.Sqlite.SqliteParameter incrementValue = new Microsoft.Data.Sqlite.SqliteParameter("@incrementValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(incrementValue);
                    Microsoft.Data.Sqlite.SqliteParameter lastValue = new Microsoft.Data.Sqlite.SqliteParameter("@lastValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(lastValue);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        columnId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isAnsiPadded.Value = values[10];
                        isRowguidcol.Value = values[11];
                        isIdentity.Value = values[12];
                        isFilestream.Value = values[13];
                        isReplicated.Value = values[14];
                        isNonSqlSubscribed.Value = values[15];
                        isMergePublished.Value = values[16];
                        isDtsReplicated.Value = values[17];
                        isXmlDocument.Value = values[18];
                        xmlCollectionId.Value = values[19];
                        defaultObjectId.Value = values[20];
                        ruleObjectId.Value = values[21];
                        seedValue.Value = values[22];
                        incrementValue.Value = values[23];
                        lastValue.Value = values[24];
                        isNotForReplication.Value = values[25];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_index_columns (object_id,index_id,index_column_id,column_id,key_ordinal,partition_ordinal,is_descending_key,is_included_column) values (@objectId, @indexId, @indexColumnId, @columnId, @keyOrdinal, @partitionOrdinal, @isDescendingKey, @isIncludedColumn)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter indexColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@indexColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    Microsoft.Data.Sqlite.SqliteParameter keyOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@keyOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(keyOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter partitionOrdinal = new Microsoft.Data.Sqlite.SqliteParameter("@partitionOrdinal", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(partitionOrdinal);
                    Microsoft.Data.Sqlite.SqliteParameter isDescendingKey = new Microsoft.Data.Sqlite.SqliteParameter("@isDescendingKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDescendingKey);
                    Microsoft.Data.Sqlite.SqliteParameter isIncludedColumn = new Microsoft.Data.Sqlite.SqliteParameter("@isIncludedColumn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isIncludedColumn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        indexId.Value = values[1];
                        indexColumnId.Value = values[2];
                        columnId.Value = values[3];
                        keyOrdinal.Value = values[4];
                        partitionOrdinal.Value = values[5];
                        isDescendingKey.Value = values[6];
                        isIncludedColumn.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_internal_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,internal_type,internal_type_desc,parent_id,parent_minor_id,lob_data_space_id,filestream_data_space_id) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @internalType, @internalTypeDesc, @parentId, @parentMinorId, @lobDataSpaceId, @filestreamDataSpaceId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter internalType = new Microsoft.Data.Sqlite.SqliteParameter("@internalType", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(internalType);
                    Microsoft.Data.Sqlite.SqliteParameter internalTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@internalTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(internalTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter parentMinorId = new Microsoft.Data.Sqlite.SqliteParameter("@parentMinorId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentMinorId);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        internalType.Value = values[12];
                        internalTypeDesc.Value = values[13];
                        parentId.Value = values[14];
                        parentMinorId.Value = values[15];
                        lobDataSpaceId.Value = values[16];
                        filestreamDataSpaceId.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_key_constraints (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,unique_index_id,is_system_named) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @uniqueIndexId, @isSystemNamed)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter uniqueIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@uniqueIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(uniqueIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter isSystemNamed = new Microsoft.Data.Sqlite.SqliteParameter("@isSystemNamed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSystemNamed);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        uniqueIndexId.Value = values[12];
                        isSystemNamed.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_key_encryptions (key_id,thumbprint,crypt_type,crypt_type_desc,cry" +
                        "pt_property) values (@keyId, @thumbprint, @cryptType, @cryptTypeDesc, @cryptProp" +
                        "erty)";

                    Microsoft.Data.Sqlite.SqliteParameter keyId = new Microsoft.Data.Sqlite.SqliteParameter("@keyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyId);
                    Microsoft.Data.Sqlite.SqliteParameter thumbprint = new Microsoft.Data.Sqlite.SqliteParameter("@thumbprint", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(thumbprint);
                    Microsoft.Data.Sqlite.SqliteParameter cryptType = new Microsoft.Data.Sqlite.SqliteParameter("@cryptType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptType);
                    Microsoft.Data.Sqlite.SqliteParameter cryptTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@cryptTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(cryptTypeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter cryptProperty = new Microsoft.Data.Sqlite.SqliteParameter("@cryptProperty", System.Data.DbType.Binary);
                    sqliteCommand.Parameters.Add(cryptProperty);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        keyId.Value = values[0];
                        thumbprint.Value = values[1];
                        cryptType.Value = values[2];
                        cryptTypeDesc.Value = values[3];
                        cryptProperty.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_numbered_procedure_parameters (object_id,procedure_number,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref) values (@objectId, @procedureNumber, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        name.Value = values[2];
                        parameterId.Value = values[3];
                        systemTypeId.Value = values[4];
                        userTypeId.Value = values[5];
                        maxLength.Value = values[6];
                        precision.Value = values[7];
                        scale.Value = values[8];
                        isOutput.Value = values[9];
                        isCursorRef.Value = values[10];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_numbered_procedures (object_id,procedure_number,definition) value" +
                        "s (@objectId, @procedureNumber, @definition)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter procedureNumber = new Microsoft.Data.Sqlite.SqliteParameter("@procedureNumber", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(procedureNumber);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        procedureNumber.Value = values[1];
                        definition.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_objects (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_parameters (object_id,name,parameter_id,system_type_id,user_type_id,max_length,precision,scale,is_output,is_cursor_ref,has_default_value,is_xml_document,default_value,xml_collection_id) values (@objectId, @name, @parameterId, @systemTypeId, @userTypeId, @maxLength, @precision, @scale, @isOutput, @isCursorRef, @hasDefaultValue, @isXmlDocument, @defaultValue, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter isOutput = new Microsoft.Data.Sqlite.SqliteParameter("@isOutput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isOutput);
                    Microsoft.Data.Sqlite.SqliteParameter isCursorRef = new Microsoft.Data.Sqlite.SqliteParameter("@isCursorRef", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isCursorRef);
                    Microsoft.Data.Sqlite.SqliteParameter hasDefaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@hasDefaultValue", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasDefaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter isXmlDocument = new Microsoft.Data.Sqlite.SqliteParameter("@isXmlDocument", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isXmlDocument);
                    Microsoft.Data.Sqlite.SqliteParameter defaultValue = new Microsoft.Data.Sqlite.SqliteParameter("@defaultValue", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(defaultValue);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        parameterId.Value = values[2];
                        systemTypeId.Value = values[3];
                        userTypeId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        isOutput.Value = values[8];
                        isCursorRef.Value = values[9];
                        hasDefaultValue.Value = values[10];
                        isXmlDocument.Value = values[11];
                        defaultValue.Value = values[12];
                        xmlCollectionId.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_functions (name,function_id,type,type_desc,fanout,bound" +
                        "ary_value_on_right,create_date,modify_date) values (@name, @functionId, @type, @" +
                        "typeDesc, @fanout, @boundaryValueOnRight, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter fanout = new Microsoft.Data.Sqlite.SqliteParameter("@fanout", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(fanout);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryValueOnRight = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryValueOnRight", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(boundaryValueOnRight);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        functionId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        fanout.Value = values[4];
                        boundaryValueOnRight.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_parameters (function_id,parameter_id,system_type_id,max" +
                        "_length,precision,scale,collation_name) values (@functionId, @parameterId, @syst" +
                        "emTypeId, @maxLength, @precision, @scale, @collationName)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        parameterId.Value = values[1];
                        systemTypeId.Value = values[2];
                        maxLength.Value = values[3];
                        precision.Value = values[4];
                        scale.Value = values[5];
                        collationName.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_range_values (function_id,boundary_id,parameter_id,valu" +
                        "e) values (@functionId, @boundaryId, @parameterId, @value)";

                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    Microsoft.Data.Sqlite.SqliteParameter boundaryId = new Microsoft.Data.Sqlite.SqliteParameter("@boundaryId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(boundaryId);
                    Microsoft.Data.Sqlite.SqliteParameter parameterId = new Microsoft.Data.Sqlite.SqliteParameter("@parameterId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parameterId);
                    Microsoft.Data.Sqlite.SqliteParameter value = new Microsoft.Data.Sqlite.SqliteParameter("@value", System.Data.DbType.Object);
                    sqliteCommand.Parameters.Add(value);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        functionId.Value = values[0];
                        boundaryId.Value = values[1];
                        parameterId.Value = values[2];
                        value.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partition_schemes (name,data_space_id,type,type_desc,is_default,f" +
                        "unction_id) values (@name, @dataSpaceId, @type, @typeDesc, @isDefault, @function" +
                        "Id)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isDefault = new Microsoft.Data.Sqlite.SqliteParameter("@isDefault", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDefault);
                    Microsoft.Data.Sqlite.SqliteParameter functionId = new Microsoft.Data.Sqlite.SqliteParameter("@functionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(functionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        dataSpaceId.Value = values[1];
                        type.Value = values[2];
                        typeDesc.Value = values[3];
                        isDefault.Value = values[4];
                        functionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_partitions (partition_id,object_id,index_id,partition_number,hobt" +
                        "_id,rows) values (@partitionId, @objectId, @indexId, @partitionNumber, @hobtId, " +
                        "@rows)";

                    Microsoft.Data.Sqlite.SqliteParameter partitionId = new Microsoft.Data.Sqlite.SqliteParameter("@partitionId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(partitionId);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter partitionNumber = new Microsoft.Data.Sqlite.SqliteParameter("@partitionNumber", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(partitionNumber);
                    Microsoft.Data.Sqlite.SqliteParameter hobtId = new Microsoft.Data.Sqlite.SqliteParameter("@hobtId", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(hobtId);
                    Microsoft.Data.Sqlite.SqliteParameter rows = new Microsoft.Data.Sqlite.SqliteParameter("@rows", System.Data.DbType.Int64);
                    sqliteCommand.Parameters.Add(rows);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        partitionId.Value = values[0];
                        objectId.Value = values[1];
                        indexId.Value = values[2];
                        partitionNumber.Value = values[3];
                        hobtId.Value = values[4];
                        rows.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_procedures (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_auto_executed,is_execution_replicated,is_repl_serializable_only,skips_repl_constraints) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isAutoExecuted, @isExecutionReplicated, @isReplSerializableOnly, @skipsReplConstraints)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isAutoExecuted = new Microsoft.Data.Sqlite.SqliteParameter("@isAutoExecuted", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAutoExecuted);
                    Microsoft.Data.Sqlite.SqliteParameter isExecutionReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isExecutionReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isExecutionReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter isReplSerializableOnly = new Microsoft.Data.Sqlite.SqliteParameter("@isReplSerializableOnly", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplSerializableOnly);
                    Microsoft.Data.Sqlite.SqliteParameter skipsReplConstraints = new Microsoft.Data.Sqlite.SqliteParameter("@skipsReplConstraints", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(skipsReplConstraints);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isAutoExecuted.Value = values[12];
                        isExecutionReplicated.Value = values[13];
                        isReplSerializableOnly.Value = values[14];
                        skipsReplConstraints.Value = values[15];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_remote_service_bindings (name,remote_service_binding_id,principal_id,remote_service_name,service_contract_id,remote_principal_id,is_anonymous_on) values (@name, @remoteServiceBindingId, @principalId, @remoteServiceName, @serviceContractId, @remotePrincipalId, @isAnonymousOn)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceBindingId = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceBindingId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remoteServiceBindingId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter remotePrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@remotePrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(remotePrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isAnonymousOn = new Microsoft.Data.Sqlite.SqliteParameter("@isAnonymousOn", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAnonymousOn);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        remoteServiceBindingId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        serviceContractId.Value = values[4];
                        remotePrincipalId.Value = values[5];
                        isAnonymousOn.Value = values[6];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_routes (name,route_id,principal_id,remote_service_name,broker_ins" +
                        "tance,lifetime,address,mirror_address) values (@name, @routeId, @principalId, @r" +
                        "emoteServiceName, @brokerInstance, @lifetime, @address, @mirrorAddress)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter routeId = new Microsoft.Data.Sqlite.SqliteParameter("@routeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(routeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter remoteServiceName = new Microsoft.Data.Sqlite.SqliteParameter("@remoteServiceName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(remoteServiceName);
                    Microsoft.Data.Sqlite.SqliteParameter brokerInstance = new Microsoft.Data.Sqlite.SqliteParameter("@brokerInstance", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(brokerInstance);
                    Microsoft.Data.Sqlite.SqliteParameter lifetime = new Microsoft.Data.Sqlite.SqliteParameter("@lifetime", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(lifetime);
                    Microsoft.Data.Sqlite.SqliteParameter address = new Microsoft.Data.Sqlite.SqliteParameter("@address", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(address);
                    Microsoft.Data.Sqlite.SqliteParameter mirrorAddress = new Microsoft.Data.Sqlite.SqliteParameter("@mirrorAddress", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(mirrorAddress);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        routeId.Value = values[1];
                        principalId.Value = values[2];
                        remoteServiceName.Value = values[3];
                        brokerInstance.Value = values[4];
                        lifetime.Value = values[5];
                        address.Value = values[6];
                        mirrorAddress.Value = values[7];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_schemas (name,schema_id,principal_id) values (@name, @schemaId, @" +
                        "principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_message_usages (service_contract_id,message_type" +
                        "_id,is_sent_by_initiator,is_sent_by_target) values (@serviceContractId, @message" +
                        "TypeId, @isSentByInitiator, @isSentByTarget)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByInitiator = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByInitiator", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByInitiator);
                    Microsoft.Data.Sqlite.SqliteParameter isSentByTarget = new Microsoft.Data.Sqlite.SqliteParameter("@isSentByTarget", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSentByTarget);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceContractId.Value = values[0];
                        messageTypeId.Value = values[1];
                        isSentByInitiator.Value = values[2];
                        isSentByTarget.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contract_usages (service_id,service_contract_id) values (" +
                        "@serviceId, @serviceContractId)";

                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        serviceId.Value = values[0];
                        serviceContractId.Value = values[1];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_contracts (name,service_contract_id,principal_id) values " +
                        "(@name, @serviceContractId, @principalId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceContractId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceContractId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceContractId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceContractId.Value = values[1];
                        principalId.Value = values[2];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_service_message_types (name,message_type_id,principal_id,validati" +
                        "on,validation_desc,xml_collection_id) values (@name, @messageTypeId, @principalI" +
                        "d, @validation, @validationDesc, @xmlCollectionId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter messageTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@messageTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(messageTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter validation = new Microsoft.Data.Sqlite.SqliteParameter("@validation", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validation);
                    Microsoft.Data.Sqlite.SqliteParameter validationDesc = new Microsoft.Data.Sqlite.SqliteParameter("@validationDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(validationDesc);
                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        messageTypeId.Value = values[1];
                        principalId.Value = values[2];
                        validation.Value = values[3];
                        validationDesc.Value = values[4];
                        xmlCollectionId.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_service_queues (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,max_readers,activation_procedure,execute_as_principal_id,is_activation_enabled,is_receive_enabled,is_enqueue_enabled,is_retention_enabled) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @maxReaders, @activationProcedure, @executeAsPrincipalId, @isActivationEnabled, @isReceiveEnabled, @isEnqueueEnabled, @isRetentionEnabled)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter maxReaders = new Microsoft.Data.Sqlite.SqliteParameter("@maxReaders", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxReaders);
                    Microsoft.Data.Sqlite.SqliteParameter activationProcedure = new Microsoft.Data.Sqlite.SqliteParameter("@activationProcedure", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(activationProcedure);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    Microsoft.Data.Sqlite.SqliteParameter isActivationEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isActivationEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isActivationEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isReceiveEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isReceiveEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReceiveEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isEnqueueEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isEnqueueEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isEnqueueEnabled);
                    Microsoft.Data.Sqlite.SqliteParameter isRetentionEnabled = new Microsoft.Data.Sqlite.SqliteParameter("@isRetentionEnabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRetentionEnabled);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        maxReaders.Value = values[12];
                        activationProcedure.Value = values[13];
                        executeAsPrincipalId.Value = values[14];
                        isActivationEnabled.Value = values[15];
                        isReceiveEnabled.Value = values[16];
                        isEnqueueEnabled.Value = values[17];
                        isRetentionEnabled.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_services (name,service_id,principal_id,service_queue_id) values (" +
                        "@name, @serviceId, @principalId, @serviceQueueId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter serviceId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter serviceQueueId = new Microsoft.Data.Sqlite.SqliteParameter("@serviceQueueId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(serviceQueueId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        serviceId.Value = values[1];
                        principalId.Value = values[2];
                        serviceQueueId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_sql_modules (object_id,definition,uses_ansi_nulls,uses_quoted_identifier,is_schema_bound,uses_database_collation,is_recompiled,null_on_null_input,execute_as_principal_id) values (@objectId, @definition, @usesAnsiNulls, @usesQuotedIdentifier, @isSchemaBound, @usesDatabaseCollation, @isRecompiled, @nullOnNullInput, @executeAsPrincipalId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter definition = new Microsoft.Data.Sqlite.SqliteParameter("@definition", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(definition);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter usesQuotedIdentifier = new Microsoft.Data.Sqlite.SqliteParameter("@usesQuotedIdentifier", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesQuotedIdentifier);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaBound = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaBound", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaBound);
                    Microsoft.Data.Sqlite.SqliteParameter usesDatabaseCollation = new Microsoft.Data.Sqlite.SqliteParameter("@usesDatabaseCollation", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesDatabaseCollation);
                    Microsoft.Data.Sqlite.SqliteParameter isRecompiled = new Microsoft.Data.Sqlite.SqliteParameter("@isRecompiled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isRecompiled);
                    Microsoft.Data.Sqlite.SqliteParameter nullOnNullInput = new Microsoft.Data.Sqlite.SqliteParameter("@nullOnNullInput", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(nullOnNullInput);
                    Microsoft.Data.Sqlite.SqliteParameter executeAsPrincipalId = new Microsoft.Data.Sqlite.SqliteParameter("@executeAsPrincipalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(executeAsPrincipalId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        definition.Value = values[1];
                        usesAnsiNulls.Value = values[2];
                        usesQuotedIdentifier.Value = values[3];
                        isSchemaBound.Value = values[4];
                        usesDatabaseCollation.Value = values[5];
                        isRecompiled.Value = values[6];
                        nullOnNullInput.Value = values[7];
                        executeAsPrincipalId.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats (object_id,name,stats_id,auto_created,user_created,no_recom" +
                        "pute) values (@objectId, @name, @statsId, @autoCreated, @userCreated, @noRecompu" +
                        "te)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter autoCreated = new Microsoft.Data.Sqlite.SqliteParameter("@autoCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(autoCreated);
                    Microsoft.Data.Sqlite.SqliteParameter userCreated = new Microsoft.Data.Sqlite.SqliteParameter("@userCreated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(userCreated);
                    Microsoft.Data.Sqlite.SqliteParameter noRecompute = new Microsoft.Data.Sqlite.SqliteParameter("@noRecompute", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(noRecompute);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        statsId.Value = values[2];
                        autoCreated.Value = values[3];
                        userCreated.Value = values[4];
                        noRecompute.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_stats_columns (object_id,stats_id,stats_column_id,column_id) valu" +
                        "es (@objectId, @statsId, @statsColumnId, @columnId)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter statsId = new Microsoft.Data.Sqlite.SqliteParameter("@statsId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsId);
                    Microsoft.Data.Sqlite.SqliteParameter statsColumnId = new Microsoft.Data.Sqlite.SqliteParameter("@statsColumnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(statsColumnId);
                    Microsoft.Data.Sqlite.SqliteParameter columnId = new Microsoft.Data.Sqlite.SqliteParameter("@columnId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(columnId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        statsId.Value = values[1];
                        statsColumnId.Value = values[2];
                        columnId.Value = values[3];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_symmetric_keys (name,principal_id,symmetric_key_id,key_length,key_algorithm,algorithm_desc,create_date,modify_date,key_guid) values (@name, @principalId, @symmetricKeyId, @keyLength, @keyAlgorithm, @algorithmDesc, @createDate, @modifyDate, @keyGuid)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter symmetricKeyId = new Microsoft.Data.Sqlite.SqliteParameter("@symmetricKeyId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(symmetricKeyId);
                    Microsoft.Data.Sqlite.SqliteParameter keyLength = new Microsoft.Data.Sqlite.SqliteParameter("@keyLength", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(keyLength);
                    Microsoft.Data.Sqlite.SqliteParameter keyAlgorithm = new Microsoft.Data.Sqlite.SqliteParameter("@keyAlgorithm", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(keyAlgorithm);
                    Microsoft.Data.Sqlite.SqliteParameter algorithmDesc = new Microsoft.Data.Sqlite.SqliteParameter("@algorithmDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(algorithmDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter keyGuid = new Microsoft.Data.Sqlite.SqliteParameter("@keyGuid", System.Data.DbType.Guid);
                    sqliteCommand.Parameters.Add(keyGuid);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        principalId.Value = values[1];
                        symmetricKeyId.Value = values[2];
                        keyLength.Value = values[3];
                        keyAlgorithm.Value = values[4];
                        algorithmDesc.Value = values[5];
                        createDate.Value = values[6];
                        modifyDate.Value = values[7];
                        keyGuid.Value = values[8];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_synonyms (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,base_object_name) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @baseObjectName)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter baseObjectName = new Microsoft.Data.Sqlite.SqliteParameter("@baseObjectName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(baseObjectName);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        baseObjectName.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_tables (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,lob_data_space_id,filestream_data_space_id,max_column_id_used,lock_on_bulk_load,uses_ansi_nulls,is_replicated,has_replication_filter,is_merge_published,is_sync_tran_subscribed,has_unchecked_assembly_data,text_in_row_limit,large_value_types_out_of_row) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @lobDataSpaceId, @filestreamDataSpaceId, @maxColumnIdUsed, @lockOnBulkLoad, @usesAnsiNulls, @isReplicated, @hasReplicationFilter, @isMergePublished, @isSyncTranSubscribed, @hasUncheckedAssemblyData, @textInRowLimit, @largeValueTypesOutOfRow)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter lobDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@lobDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(lobDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter filestreamDataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@filestreamDataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(filestreamDataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter maxColumnIdUsed = new Microsoft.Data.Sqlite.SqliteParameter("@maxColumnIdUsed", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(maxColumnIdUsed);
                    Microsoft.Data.Sqlite.SqliteParameter lockOnBulkLoad = new Microsoft.Data.Sqlite.SqliteParameter("@lockOnBulkLoad", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(lockOnBulkLoad);
                    Microsoft.Data.Sqlite.SqliteParameter usesAnsiNulls = new Microsoft.Data.Sqlite.SqliteParameter("@usesAnsiNulls", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(usesAnsiNulls);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter isMergePublished = new Microsoft.Data.Sqlite.SqliteParameter("@isMergePublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMergePublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSyncTranSubscribed = new Microsoft.Data.Sqlite.SqliteParameter("@isSyncTranSubscribed", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSyncTranSubscribed);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter textInRowLimit = new Microsoft.Data.Sqlite.SqliteParameter("@textInRowLimit", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(textInRowLimit);
                    Microsoft.Data.Sqlite.SqliteParameter largeValueTypesOutOfRow = new Microsoft.Data.Sqlite.SqliteParameter("@largeValueTypesOutOfRow", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(largeValueTypesOutOfRow);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        lobDataSpaceId.Value = values[12];
                        filestreamDataSpaceId.Value = values[13];
                        maxColumnIdUsed.Value = values[14];
                        lockOnBulkLoad.Value = values[15];
                        usesAnsiNulls.Value = values[16];
                        isReplicated.Value = values[17];
                        hasReplicationFilter.Value = values[18];
                        isMergePublished.Value = values[19];
                        isSyncTranSubscribed.Value = values[20];
                        hasUncheckedAssemblyData.Value = values[21];
                        textInRowLimit.Value = values[22];
                        largeValueTypesOutOfRow.Value = values[23];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_trigger_events (object_id,type,type_desc,is_first,is_last) values" +
                        " (@objectId, @type, @typeDesc, @isFirst, @isLast)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isFirst = new Microsoft.Data.Sqlite.SqliteParameter("@isFirst", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isFirst);
                    Microsoft.Data.Sqlite.SqliteParameter isLast = new Microsoft.Data.Sqlite.SqliteParameter("@isLast", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isLast);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        type.Value = values[1];
                        typeDesc.Value = values[2];
                        isFirst.Value = values[3];
                        isLast.Value = values[4];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_triggers (name,object_id,parent_class,parent_class_desc,parent_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_disabled,is_not_for_replication,is_instead_of_trigger) values (@name, @objectId, @parentClass, @parentClassDesc, @parentId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isDisabled, @isNotForReplication, @isInsteadOfTrigger)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter parentClass = new Microsoft.Data.Sqlite.SqliteParameter("@parentClass", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(parentClass);
                    Microsoft.Data.Sqlite.SqliteParameter parentClassDesc = new Microsoft.Data.Sqlite.SqliteParameter("@parentClassDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(parentClassDesc);
                    Microsoft.Data.Sqlite.SqliteParameter parentId = new Microsoft.Data.Sqlite.SqliteParameter("@parentId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isNotForReplication = new Microsoft.Data.Sqlite.SqliteParameter("@isNotForReplication", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNotForReplication);
                    Microsoft.Data.Sqlite.SqliteParameter isInsteadOfTrigger = new Microsoft.Data.Sqlite.SqliteParameter("@isInsteadOfTrigger", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isInsteadOfTrigger);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        parentClass.Value = values[2];
                        parentClassDesc.Value = values[3];
                        parentId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isDisabled.Value = values[10];
                        isNotForReplication.Value = values[11];
                        isInsteadOfTrigger.Value = values[12];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_types (name,system_type_id,user_type_id,schema_id,principal_id,max_length,precision,scale,collation_name,is_nullable,is_user_defined,is_assembly_type,default_object_id,rule_object_id) values (@name, @systemTypeId, @userTypeId, @schemaId, @principalId, @maxLength, @precision, @scale, @collationName, @isNullable, @isUserDefined, @isAssemblyType, @defaultObjectId, @ruleObjectId)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter systemTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@systemTypeId", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(systemTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter userTypeId = new Microsoft.Data.Sqlite.SqliteParameter("@userTypeId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(userTypeId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter maxLength = new Microsoft.Data.Sqlite.SqliteParameter("@maxLength", System.Data.DbType.Int16);
                    sqliteCommand.Parameters.Add(maxLength);
                    Microsoft.Data.Sqlite.SqliteParameter precision = new Microsoft.Data.Sqlite.SqliteParameter("@precision", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(precision);
                    Microsoft.Data.Sqlite.SqliteParameter scale = new Microsoft.Data.Sqlite.SqliteParameter("@scale", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(scale);
                    Microsoft.Data.Sqlite.SqliteParameter collationName = new Microsoft.Data.Sqlite.SqliteParameter("@collationName", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(collationName);
                    Microsoft.Data.Sqlite.SqliteParameter isNullable = new Microsoft.Data.Sqlite.SqliteParameter("@isNullable", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isNullable);
                    Microsoft.Data.Sqlite.SqliteParameter isUserDefined = new Microsoft.Data.Sqlite.SqliteParameter("@isUserDefined", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUserDefined);
                    Microsoft.Data.Sqlite.SqliteParameter isAssemblyType = new Microsoft.Data.Sqlite.SqliteParameter("@isAssemblyType", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isAssemblyType);
                    Microsoft.Data.Sqlite.SqliteParameter defaultObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@defaultObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(defaultObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter ruleObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@ruleObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(ruleObjectId);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        systemTypeId.Value = values[1];
                        userTypeId.Value = values[2];
                        schemaId.Value = values[3];
                        principalId.Value = values[4];
                        maxLength.Value = values[5];
                        precision.Value = values[6];
                        scale.Value = values[7];
                        collationName.Value = values[8];
                        isNullable.Value = values[9];
                        isUserDefined.Value = values[10];
                        isAssemblyType.Value = values[11];
                        defaultObjectId.Value = values[12];
                        ruleObjectId.Value = values[13];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_views (name,object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published,is_replicated,has_replication_filter,has_opaque_metadata,has_unchecked_assembly_data,with_check_option,is_date_correlation_view) values (@name, @objectId, @principalId, @schemaId, @parentObjectId, @type, @typeDesc, @createDate, @modifyDate, @isMsShipped, @isPublished, @isSchemaPublished, @isReplicated, @hasReplicationFilter, @hasOpaqueMetadata, @hasUncheckedAssemblyData, @withCheckOption, @isDateCorrelationView)";

                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter parentObjectId = new Microsoft.Data.Sqlite.SqliteParameter("@parentObjectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(parentObjectId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    Microsoft.Data.Sqlite.SqliteParameter isMsShipped = new Microsoft.Data.Sqlite.SqliteParameter("@isMsShipped", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isMsShipped);
                    Microsoft.Data.Sqlite.SqliteParameter isPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isSchemaPublished = new Microsoft.Data.Sqlite.SqliteParameter("@isSchemaPublished", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isSchemaPublished);
                    Microsoft.Data.Sqlite.SqliteParameter isReplicated = new Microsoft.Data.Sqlite.SqliteParameter("@isReplicated", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isReplicated);
                    Microsoft.Data.Sqlite.SqliteParameter hasReplicationFilter = new Microsoft.Data.Sqlite.SqliteParameter("@hasReplicationFilter", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasReplicationFilter);
                    Microsoft.Data.Sqlite.SqliteParameter hasOpaqueMetadata = new Microsoft.Data.Sqlite.SqliteParameter("@hasOpaqueMetadata", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasOpaqueMetadata);
                    Microsoft.Data.Sqlite.SqliteParameter hasUncheckedAssemblyData = new Microsoft.Data.Sqlite.SqliteParameter("@hasUncheckedAssemblyData", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(hasUncheckedAssemblyData);
                    Microsoft.Data.Sqlite.SqliteParameter withCheckOption = new Microsoft.Data.Sqlite.SqliteParameter("@withCheckOption", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(withCheckOption);
                    Microsoft.Data.Sqlite.SqliteParameter isDateCorrelationView = new Microsoft.Data.Sqlite.SqliteParameter("@isDateCorrelationView", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDateCorrelationView);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        name.Value = values[0];
                        objectId.Value = values[1];
                        principalId.Value = values[2];
                        schemaId.Value = values[3];
                        parentObjectId.Value = values[4];
                        type.Value = values[5];
                        typeDesc.Value = values[6];
                        createDate.Value = values[7];
                        modifyDate.Value = values[8];
                        isMsShipped.Value = values[9];
                        isPublished.Value = values[10];
                        isSchemaPublished.Value = values[11];
                        isReplicated.Value = values[12];
                        hasReplicationFilter.Value = values[13];
                        hasOpaqueMetadata.Value = values[14];
                        hasUncheckedAssemblyData.Value = values[15];
                        withCheckOption.Value = values[16];
                        isDateCorrelationView.Value = values[17];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = @"insert into sys_xml_indexes (object_id,name,index_id,type,type_desc,is_unique,data_space_id,ignore_dup_key,is_primary_key,is_unique_constraint,fill_factor,is_padded,is_disabled,is_hypothetical,allow_row_locks,allow_page_locks,using_xml_index_id,secondary_type,secondary_type_desc) values (@objectId, @name, @indexId, @type, @typeDesc, @isUnique, @dataSpaceId, @ignoreDupKey, @isPrimaryKey, @isUniqueConstraint, @fillFactor, @isPadded, @isDisabled, @isHypothetical, @allowRowLocks, @allowPageLocks, @usingXmlIndexId, @secondaryType, @secondaryTypeDesc)";

                    Microsoft.Data.Sqlite.SqliteParameter objectId = new Microsoft.Data.Sqlite.SqliteParameter("@objectId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(objectId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter indexId = new Microsoft.Data.Sqlite.SqliteParameter("@indexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(indexId);
                    Microsoft.Data.Sqlite.SqliteParameter type = new Microsoft.Data.Sqlite.SqliteParameter("@type", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(type);
                    Microsoft.Data.Sqlite.SqliteParameter typeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@typeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(typeDesc);
                    Microsoft.Data.Sqlite.SqliteParameter isUnique = new Microsoft.Data.Sqlite.SqliteParameter("@isUnique", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUnique);
                    Microsoft.Data.Sqlite.SqliteParameter dataSpaceId = new Microsoft.Data.Sqlite.SqliteParameter("@dataSpaceId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(dataSpaceId);
                    Microsoft.Data.Sqlite.SqliteParameter ignoreDupKey = new Microsoft.Data.Sqlite.SqliteParameter("@ignoreDupKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(ignoreDupKey);
                    Microsoft.Data.Sqlite.SqliteParameter isPrimaryKey = new Microsoft.Data.Sqlite.SqliteParameter("@isPrimaryKey", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPrimaryKey);
                    Microsoft.Data.Sqlite.SqliteParameter isUniqueConstraint = new Microsoft.Data.Sqlite.SqliteParameter("@isUniqueConstraint", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isUniqueConstraint);
                    Microsoft.Data.Sqlite.SqliteParameter fillFactor = new Microsoft.Data.Sqlite.SqliteParameter("@fillFactor", System.Data.DbType.Byte);
                    sqliteCommand.Parameters.Add(fillFactor);
                    Microsoft.Data.Sqlite.SqliteParameter isPadded = new Microsoft.Data.Sqlite.SqliteParameter("@isPadded", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isPadded);
                    Microsoft.Data.Sqlite.SqliteParameter isDisabled = new Microsoft.Data.Sqlite.SqliteParameter("@isDisabled", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isDisabled);
                    Microsoft.Data.Sqlite.SqliteParameter isHypothetical = new Microsoft.Data.Sqlite.SqliteParameter("@isHypothetical", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(isHypothetical);
                    Microsoft.Data.Sqlite.SqliteParameter allowRowLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowRowLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowRowLocks);
                    Microsoft.Data.Sqlite.SqliteParameter allowPageLocks = new Microsoft.Data.Sqlite.SqliteParameter("@allowPageLocks", System.Data.DbType.Boolean);
                    sqliteCommand.Parameters.Add(allowPageLocks);
                    Microsoft.Data.Sqlite.SqliteParameter usingXmlIndexId = new Microsoft.Data.Sqlite.SqliteParameter("@usingXmlIndexId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(usingXmlIndexId);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryType = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryType", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryType);
                    Microsoft.Data.Sqlite.SqliteParameter secondaryTypeDesc = new Microsoft.Data.Sqlite.SqliteParameter("@secondaryTypeDesc", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(secondaryTypeDesc);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        objectId.Value = values[0];
                        name.Value = values[1];
                        indexId.Value = values[2];
                        type.Value = values[3];
                        typeDesc.Value = values[4];
                        isUnique.Value = values[5];
                        dataSpaceId.Value = values[6];
                        ignoreDupKey.Value = values[7];
                        isPrimaryKey.Value = values[8];
                        isUniqueConstraint.Value = values[9];
                        fillFactor.Value = values[10];
                        isPadded.Value = values[11];
                        isDisabled.Value = values[12];
                        isHypothetical.Value = values[13];
                        allowRowLocks.Value = values[14];
                        allowPageLocks.Value = values[15];
                        usingXmlIndexId.Value = values[16];
                        secondaryType.Value = values[17];
                        secondaryTypeDesc.Value = values[18];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
                if (reader.HasRows)
                {
                    object[] values = new object[reader.FieldCount];
                    Microsoft.Data.Sqlite.SqliteCommand sqliteCommand = this._sqliteConnection.CreateCommand();
                    sqliteCommand.CommandText = "insert into sys_xml_schema_collections (xml_collection_id,schema_id,principal_id," +
                        "name,create_date,modify_date) values (@xmlCollectionId, @schemaId, @principalId," +
                        " @name, @createDate, @modifyDate)";

                    Microsoft.Data.Sqlite.SqliteParameter xmlCollectionId = new Microsoft.Data.Sqlite.SqliteParameter("@xmlCollectionId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(xmlCollectionId);
                    Microsoft.Data.Sqlite.SqliteParameter schemaId = new Microsoft.Data.Sqlite.SqliteParameter("@schemaId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(schemaId);
                    Microsoft.Data.Sqlite.SqliteParameter principalId = new Microsoft.Data.Sqlite.SqliteParameter("@principalId", System.Data.DbType.Int32);
                    sqliteCommand.Parameters.Add(principalId);
                    Microsoft.Data.Sqlite.SqliteParameter name = new Microsoft.Data.Sqlite.SqliteParameter("@name", System.Data.DbType.String);
                    sqliteCommand.Parameters.Add(name);
                    Microsoft.Data.Sqlite.SqliteParameter createDate = new Microsoft.Data.Sqlite.SqliteParameter("@createDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(createDate);
                    Microsoft.Data.Sqlite.SqliteParameter modifyDate = new Microsoft.Data.Sqlite.SqliteParameter("@modifyDate", System.Data.DbType.DateTime);
                    sqliteCommand.Parameters.Add(modifyDate);
                    sqliteCommand.Prepare();

                    for (
                    ; reader.Read(); 
                    )
                    {
                        reader.GetValues(values);

                        xmlCollectionId.Value = values[0];
                        schemaId.Value = values[1];
                        principalId.Value = values[2];
                        name.Value = values[3];
                        createDate.Value = values[4];
                        modifyDate.Value = values[5];

                        sqliteCommand.ExecuteNonQuery();
                    }
                    sqliteCommand.Dispose();
                }

                reader.NextResult();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                if ((command != null))
                {
                    command.Dispose();
                }
            }
            this.SetupSqliteFunctions();
        }
        
        public override void Dispose()
        {
            base.Dispose();
            if ((_sqliteConnection != null))
            {
                _sqliteConnection.Dispose();
                _sqliteConnection = null;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_all_columns")]
    public partial class SysAllColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_ansi_padded;
        
        private System.Nullable<bool> _is_rowguidcol;
        
        private System.Nullable<bool> _is_identity;
        
        private System.Nullable<bool> _is_computed;
        
        private System.Nullable<bool> _is_filestream;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _is_non_sql_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_dts_replicated;
        
        private System.Nullable<bool> _is_xml_document;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_column_set;
        
        private System.Nullable<byte> _generated_always_type;
        
        private string _generated_always_type_desc;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        private System.Nullable<bool> _is_hidden;
        
        private System.Nullable<bool> _is_masked;
        
        private System.Nullable<int> _graph_type;
        
        private string _graph_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padded")]
        public System.Nullable<bool> IsAnsiPadded
        {
            get
            {
                return this._is_ansi_padded;
            }
            set
            {
                this._is_ansi_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_rowguidcol")]
        public System.Nullable<bool> IsRowguidcol
        {
            get
            {
                return this._is_rowguidcol;
            }
            set
            {
                this._is_rowguidcol = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_identity")]
        public System.Nullable<bool> IsIdentity
        {
            get
            {
                return this._is_identity;
            }
            set
            {
                this._is_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_computed")]
        public System.Nullable<bool> IsComputed
        {
            get
            {
                return this._is_computed;
            }
            set
            {
                this._is_computed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filestream")]
        public System.Nullable<bool> IsFilestream
        {
            get
            {
                return this._is_filestream;
            }
            set
            {
                this._is_filestream = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_non_sql_subscribed")]
        public System.Nullable<bool> IsNonSqlSubscribed
        {
            get
            {
                return this._is_non_sql_subscribed;
            }
            set
            {
                this._is_non_sql_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_dts_replicated")]
        public System.Nullable<bool> IsDtsReplicated
        {
            get
            {
                return this._is_dts_replicated;
            }
            set
            {
                this._is_dts_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_column_set")]
        public System.Nullable<bool> IsColumnSet
        {
            get
            {
                return this._is_column_set;
            }
            set
            {
                this._is_column_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type")]
        public System.Nullable<byte> GeneratedAlwaysType
        {
            get
            {
                return this._generated_always_type;
            }
            set
            {
                this._generated_always_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type_desc")]
        public string GeneratedAlwaysTypeDesc
        {
            get
            {
                return this._generated_always_type_desc;
            }
            set
            {
                this._generated_always_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hidden")]
        public System.Nullable<bool> IsHidden
        {
            get
            {
                return this._is_hidden;
            }
            set
            {
                this._is_hidden = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_masked")]
        public System.Nullable<bool> IsMasked
        {
            get
            {
                return this._is_masked;
            }
            set
            {
                this._is_masked = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type")]
        public System.Nullable<int> GraphType
        {
            get
            {
                return this._graph_type;
            }
            set
            {
                this._graph_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type_desc")]
        public string GraphTypeDesc
        {
            get
            {
                return this._graph_type_desc;
            }
            set
            {
                this._graph_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_all_objects")]
    public partial class SysAllObjectCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_all_views")]
    public partial class SysAllViewCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _has_replication_filter;
        
        private System.Nullable<bool> _has_opaque_metadata;
        
        private System.Nullable<bool> _has_unchecked_assembly_data;
        
        private System.Nullable<bool> _with_check_option;
        
        private System.Nullable<bool> _is_date_correlation_view;
        
        private System.Nullable<bool> _is_tracked_by_cdc;
        
        private System.Nullable<bool> _has_snapshot;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_replication_filter")]
        public System.Nullable<bool> HasReplicationFilter
        {
            get
            {
                return this._has_replication_filter;
            }
            set
            {
                this._has_replication_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_opaque_metadata")]
        public System.Nullable<bool> HasOpaqueMetadata
        {
            get
            {
                return this._has_opaque_metadata;
            }
            set
            {
                this._has_opaque_metadata = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_unchecked_assembly_data")]
        public System.Nullable<bool> HasUncheckedAssemblyData
        {
            get
            {
                return this._has_unchecked_assembly_data;
            }
            set
            {
                this._has_unchecked_assembly_data = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("with_check_option")]
        public System.Nullable<bool> WithCheckOption
        {
            get
            {
                return this._with_check_option;
            }
            set
            {
                this._with_check_option = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_date_correlation_view")]
        public System.Nullable<bool> IsDateCorrelationView
        {
            get
            {
                return this._is_date_correlation_view;
            }
            set
            {
                this._is_date_correlation_view = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_tracked_by_cdc")]
        public System.Nullable<bool> IsTrackedByCdc
        {
            get
            {
                return this._is_tracked_by_cdc;
            }
            set
            {
                this._is_tracked_by_cdc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_snapshot")]
        public System.Nullable<bool> HasSnapshot
        {
            get
            {
                return this._has_snapshot;
            }
            set
            {
                this._has_snapshot = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_assemblies")]
    public partial class SysAssemblyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _assembly_id;
        
        private string _clr_name;
        
        private System.Nullable<byte> _permission_set;
        
        private string _permission_set_desc;
        
        private System.Nullable<bool> _is_visible;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_user_defined;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_id")]
        public System.Nullable<int> AssemblyId
        {
            get
            {
                return this._assembly_id;
            }
            set
            {
                this._assembly_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("clr_name")]
        public string ClrName
        {
            get
            {
                return this._clr_name;
            }
            set
            {
                this._clr_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("permission_set")]
        public System.Nullable<byte> PermissionSet
        {
            get
            {
                return this._permission_set;
            }
            set
            {
                this._permission_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("permission_set_desc")]
        public string PermissionSetDesc
        {
            get
            {
                return this._permission_set_desc;
            }
            set
            {
                this._permission_set_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_visible")]
        public System.Nullable<bool> IsVisible
        {
            get
            {
                return this._is_visible;
            }
            set
            {
                this._is_visible = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_user_defined")]
        public System.Nullable<bool> IsUserDefined
        {
            get
            {
                return this._is_user_defined;
            }
            set
            {
                this._is_user_defined = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_assembly_files")]
    public partial class SysAssemblyFileCatalog
    {
        
        private System.Nullable<int> _assembly_id;
        
        private string _name;
        
        private System.Nullable<int> _file_id;
        
        private byte[] _content;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_id")]
        public System.Nullable<int> AssemblyId
        {
            get
            {
                return this._assembly_id;
            }
            set
            {
                this._assembly_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("file_id")]
        public System.Nullable<int> FileId
        {
            get
            {
                return this._file_id;
            }
            set
            {
                this._file_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("content")]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_assembly_modules")]
    public partial class SysAssemblyModuleCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _assembly_id;
        
        private string _assembly_class;
        
        private string _assembly_method;
        
        private System.Nullable<bool> _null_on_null_input;
        
        private System.Nullable<int> _execute_as_principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_id")]
        public System.Nullable<int> AssemblyId
        {
            get
            {
                return this._assembly_id;
            }
            set
            {
                this._assembly_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_class")]
        public string AssemblyClass
        {
            get
            {
                return this._assembly_class;
            }
            set
            {
                this._assembly_class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_method")]
        public string AssemblyMethod
        {
            get
            {
                return this._assembly_method;
            }
            set
            {
                this._assembly_method = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("null_on_null_input")]
        public System.Nullable<bool> NullOnNullInput
        {
            get
            {
                return this._null_on_null_input;
            }
            set
            {
                this._null_on_null_input = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("execute_as_principal_id")]
        public System.Nullable<int> ExecuteAsPrincipalId
        {
            get
            {
                return this._execute_as_principal_id;
            }
            set
            {
                this._execute_as_principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_assembly_types")]
    public partial class SysAssemblyTypeCatalog
    {
        
        private string _name;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_user_defined;
        
        private System.Nullable<bool> _is_assembly_type;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private System.Nullable<int> _assembly_id;
        
        private string _assembly_class;
        
        private System.Nullable<bool> _is_binary_ordered;
        
        private System.Nullable<bool> _is_fixed_length;
        
        private string _prog_id;
        
        private string _assembly_qualified_name;
        
        private System.Nullable<bool> _is_table_type;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_user_defined")]
        public System.Nullable<bool> IsUserDefined
        {
            get
            {
                return this._is_user_defined;
            }
            set
            {
                this._is_user_defined = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_assembly_type")]
        public System.Nullable<bool> IsAssemblyType
        {
            get
            {
                return this._is_assembly_type;
            }
            set
            {
                this._is_assembly_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_id")]
        public System.Nullable<int> AssemblyId
        {
            get
            {
                return this._assembly_id;
            }
            set
            {
                this._assembly_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_class")]
        public string AssemblyClass
        {
            get
            {
                return this._assembly_class;
            }
            set
            {
                this._assembly_class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_binary_ordered")]
        public System.Nullable<bool> IsBinaryOrdered
        {
            get
            {
                return this._is_binary_ordered;
            }
            set
            {
                this._is_binary_ordered = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_fixed_length")]
        public System.Nullable<bool> IsFixedLength
        {
            get
            {
                return this._is_fixed_length;
            }
            set
            {
                this._is_fixed_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("prog_id")]
        public string ProgId
        {
            get
            {
                return this._prog_id;
            }
            set
            {
                this._prog_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("assembly_qualified_name")]
        public string AssemblyQualifiedName
        {
            get
            {
                return this._assembly_qualified_name;
            }
            set
            {
                this._assembly_qualified_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_table_type")]
        public System.Nullable<bool> IsTableType
        {
            get
            {
                return this._is_table_type;
            }
            set
            {
                this._is_table_type = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_asymmetric_keys")]
    public partial class SysAsymmetricKeyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _asymmetric_key_id;
        
        private string _pvt_key_encryption_type;
        
        private string _pvt_key_encryption_type_desc;
        
        private byte[] _thumbprint;
        
        private string _algorithm;
        
        private string _algorithm_desc;
        
        private System.Nullable<int> _key_length;
        
        private byte[] _sid;
        
        private string _string_sid;
        
        private byte[] _public_key;
        
        private string _attested_by;
        
        private string _provider_type;
        
        private System.Nullable<System.Guid> _cryptographic_provider_guid;
        
        private object _cryptographic_provider_algid;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("asymmetric_key_id")]
        public System.Nullable<int> AsymmetricKeyId
        {
            get
            {
                return this._asymmetric_key_id;
            }
            set
            {
                this._asymmetric_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pvt_key_encryption_type")]
        public string PvtKeyEncryptionType
        {
            get
            {
                return this._pvt_key_encryption_type;
            }
            set
            {
                this._pvt_key_encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pvt_key_encryption_type_desc")]
        public string PvtKeyEncryptionTypeDesc
        {
            get
            {
                return this._pvt_key_encryption_type_desc;
            }
            set
            {
                this._pvt_key_encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("thumbprint")]
        public byte[] Thumbprint
        {
            get
            {
                return this._thumbprint;
            }
            set
            {
                this._thumbprint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("algorithm")]
        public string Algorithm
        {
            get
            {
                return this._algorithm;
            }
            set
            {
                this._algorithm = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("algorithm_desc")]
        public string AlgorithmDesc
        {
            get
            {
                return this._algorithm_desc;
            }
            set
            {
                this._algorithm_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_length")]
        public System.Nullable<int> KeyLength
        {
            get
            {
                return this._key_length;
            }
            set
            {
                this._key_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("sid")]
        public byte[] Sid
        {
            get
            {
                return this._sid;
            }
            set
            {
                this._sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("string_sid")]
        public string StringSid
        {
            get
            {
                return this._string_sid;
            }
            set
            {
                this._string_sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("public_key")]
        public byte[] PublicKey
        {
            get
            {
                return this._public_key;
            }
            set
            {
                this._public_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("attested_by")]
        public string AttestedBy
        {
            get
            {
                return this._attested_by;
            }
            set
            {
                this._attested_by = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("provider_type")]
        public string ProviderType
        {
            get
            {
                return this._provider_type;
            }
            set
            {
                this._provider_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cryptographic_provider_guid")]
        public System.Nullable<System.Guid> CryptographicProviderGuid
        {
            get
            {
                return this._cryptographic_provider_guid;
            }
            set
            {
                this._cryptographic_provider_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object CryptographicProviderAlgid
        {
            get
            {
                return this._cryptographic_provider_algid;
            }
            set
            {
                this._cryptographic_provider_algid = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_certificates")]
    public partial class SysCertificateCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _certificate_id;
        
        private System.Nullable<int> _principal_id;
        
        private string _pvt_key_encryption_type;
        
        private string _pvt_key_encryption_type_desc;
        
        private System.Nullable<bool> _is_active_for_begin_dialog;
        
        private string _issuer_name;
        
        private string _cert_serial_number;
        
        private byte[] _sid;
        
        private string _string_sid;
        
        private string _subject;
        
        private System.Nullable<System.DateTime> _expiry_date;
        
        private System.Nullable<System.DateTime> _start_date;
        
        private byte[] _thumbprint;
        
        private string _attested_by;
        
        private System.Nullable<System.DateTime> _pvt_key_last_backup_date;
        
        private System.Nullable<int> _key_length;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("certificate_id")]
        public System.Nullable<int> CertificateId
        {
            get
            {
                return this._certificate_id;
            }
            set
            {
                this._certificate_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pvt_key_encryption_type")]
        public string PvtKeyEncryptionType
        {
            get
            {
                return this._pvt_key_encryption_type;
            }
            set
            {
                this._pvt_key_encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pvt_key_encryption_type_desc")]
        public string PvtKeyEncryptionTypeDesc
        {
            get
            {
                return this._pvt_key_encryption_type_desc;
            }
            set
            {
                this._pvt_key_encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_active_for_begin_dialog")]
        public System.Nullable<bool> IsActiveForBeginDialog
        {
            get
            {
                return this._is_active_for_begin_dialog;
            }
            set
            {
                this._is_active_for_begin_dialog = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("issuer_name")]
        public string IssuerName
        {
            get
            {
                return this._issuer_name;
            }
            set
            {
                this._issuer_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cert_serial_number")]
        public string CertSerialNumber
        {
            get
            {
                return this._cert_serial_number;
            }
            set
            {
                this._cert_serial_number = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("sid")]
        public byte[] Sid
        {
            get
            {
                return this._sid;
            }
            set
            {
                this._sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("string_sid")]
        public string StringSid
        {
            get
            {
                return this._string_sid;
            }
            set
            {
                this._string_sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("subject")]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                this._subject = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("expiry_date")]
        public System.Nullable<System.DateTime> ExpiryDate
        {
            get
            {
                return this._expiry_date;
            }
            set
            {
                this._expiry_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("start_date")]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._start_date;
            }
            set
            {
                this._start_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("thumbprint")]
        public byte[] Thumbprint
        {
            get
            {
                return this._thumbprint;
            }
            set
            {
                this._thumbprint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("attested_by")]
        public string AttestedBy
        {
            get
            {
                return this._attested_by;
            }
            set
            {
                this._attested_by = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pvt_key_last_backup_date")]
        public System.Nullable<System.DateTime> PvtKeyLastBackupDate
        {
            get
            {
                return this._pvt_key_last_backup_date;
            }
            set
            {
                this._pvt_key_last_backup_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_length")]
        public System.Nullable<int> KeyLength
        {
            get
            {
                return this._key_length;
            }
            set
            {
                this._key_length = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_change_tracking_databases")]
    public partial class SysChangeTrackingDatabaseCatalog
    {
        
        private System.Nullable<int> _database_id;
        
        private System.Nullable<byte> _is_auto_cleanup_on;
        
        private System.Nullable<int> _retention_period;
        
        private System.Nullable<byte> _retention_period_units;
        
        private string _retention_period_units_desc;
        
        private System.Nullable<long> _max_cleanup_version;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("database_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> DatabaseId
        {
            get
            {
                return this._database_id;
            }
            set
            {
                this._database_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_cleanup_on")]
        public System.Nullable<byte> IsAutoCleanupOn
        {
            get
            {
                return this._is_auto_cleanup_on;
            }
            set
            {
                this._is_auto_cleanup_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("retention_period")]
        public System.Nullable<int> RetentionPeriod
        {
            get
            {
                return this._retention_period;
            }
            set
            {
                this._retention_period = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("retention_period_units")]
        public System.Nullable<byte> RetentionPeriodUnits
        {
            get
            {
                return this._retention_period_units;
            }
            set
            {
                this._retention_period_units = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("retention_period_units_desc")]
        public string RetentionPeriodUnitsDesc
        {
            get
            {
                return this._retention_period_units_desc;
            }
            set
            {
                this._retention_period_units_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_cleanup_version")]
        public System.Nullable<long> MaxCleanupVersion
        {
            get
            {
                return this._max_cleanup_version;
            }
            set
            {
                this._max_cleanup_version = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_change_tracking_tables")]
    public partial class SysChangeTrackingTableCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<bool> _is_track_columns_updated_on;
        
        private System.Nullable<long> _min_valid_version;
        
        private System.Nullable<long> _begin_version;
        
        private System.Nullable<long> _cleanup_version;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_track_columns_updated_on")]
        public System.Nullable<bool> IsTrackColumnsUpdatedOn
        {
            get
            {
                return this._is_track_columns_updated_on;
            }
            set
            {
                this._is_track_columns_updated_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("min_valid_version")]
        public System.Nullable<long> MinValidVersion
        {
            get
            {
                return this._min_valid_version;
            }
            set
            {
                this._min_valid_version = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("begin_version")]
        public System.Nullable<long> BeginVersion
        {
            get
            {
                return this._begin_version;
            }
            set
            {
                this._begin_version = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cleanup_version")]
        public System.Nullable<long> CleanupVersion
        {
            get
            {
                return this._cleanup_version;
            }
            set
            {
                this._cleanup_version = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_check_constraints")]
    public partial class SysCheckConstraintCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_not_for_replication;
        
        private System.Nullable<bool> _is_not_trusted;
        
        private System.Nullable<int> _parent_column_id;
        
        private string _definition;
        
        private System.Nullable<bool> _uses_database_collation;
        
        private System.Nullable<bool> _is_system_named;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_for_replication")]
        public System.Nullable<bool> IsNotForReplication
        {
            get
            {
                return this._is_not_for_replication;
            }
            set
            {
                this._is_not_for_replication = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_trusted")]
        public System.Nullable<bool> IsNotTrusted
        {
            get
            {
                return this._is_not_trusted;
            }
            set
            {
                this._is_not_trusted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_column_id")]
        public System.Nullable<int> ParentColumnId
        {
            get
            {
                return this._parent_column_id;
            }
            set
            {
                this._parent_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_database_collation")]
        public System.Nullable<bool> UsesDatabaseCollation
        {
            get
            {
                return this._uses_database_collation;
            }
            set
            {
                this._uses_database_collation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system_named")]
        public System.Nullable<bool> IsSystemNamed
        {
            get
            {
                return this._is_system_named;
            }
            set
            {
                this._is_system_named = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_column_encryption_key_values")]
    public partial class SysColumnEncryptionKeyValueCatalog
    {
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private System.Nullable<int> _column_master_key_id;
        
        private byte[] _encrypted_value;
        
        private string _encryption_algorithm_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_master_key_id")]
        public System.Nullable<int> ColumnMasterKeyId
        {
            get
            {
                return this._column_master_key_id;
            }
            set
            {
                this._column_master_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encrypted_value")]
        public byte[] EncryptedValue
        {
            get
            {
                return this._encrypted_value;
            }
            set
            {
                this._encrypted_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_column_encryption_keys")]
    public partial class SysColumnEncryptionKeyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_columns")]
    public partial class SysColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_ansi_padded;
        
        private System.Nullable<bool> _is_rowguidcol;
        
        private System.Nullable<bool> _is_identity;
        
        private System.Nullable<bool> _is_computed;
        
        private System.Nullable<bool> _is_filestream;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _is_non_sql_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_dts_replicated;
        
        private System.Nullable<bool> _is_xml_document;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_column_set;
        
        private System.Nullable<byte> _generated_always_type;
        
        private string _generated_always_type_desc;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        private System.Nullable<bool> _is_hidden;
        
        private System.Nullable<bool> _is_masked;
        
        private System.Nullable<int> _graph_type;
        
        private string _graph_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padded")]
        public System.Nullable<bool> IsAnsiPadded
        {
            get
            {
                return this._is_ansi_padded;
            }
            set
            {
                this._is_ansi_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_rowguidcol")]
        public System.Nullable<bool> IsRowguidcol
        {
            get
            {
                return this._is_rowguidcol;
            }
            set
            {
                this._is_rowguidcol = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_identity")]
        public System.Nullable<bool> IsIdentity
        {
            get
            {
                return this._is_identity;
            }
            set
            {
                this._is_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_computed")]
        public System.Nullable<bool> IsComputed
        {
            get
            {
                return this._is_computed;
            }
            set
            {
                this._is_computed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filestream")]
        public System.Nullable<bool> IsFilestream
        {
            get
            {
                return this._is_filestream;
            }
            set
            {
                this._is_filestream = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_non_sql_subscribed")]
        public System.Nullable<bool> IsNonSqlSubscribed
        {
            get
            {
                return this._is_non_sql_subscribed;
            }
            set
            {
                this._is_non_sql_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_dts_replicated")]
        public System.Nullable<bool> IsDtsReplicated
        {
            get
            {
                return this._is_dts_replicated;
            }
            set
            {
                this._is_dts_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_column_set")]
        public System.Nullable<bool> IsColumnSet
        {
            get
            {
                return this._is_column_set;
            }
            set
            {
                this._is_column_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type")]
        public System.Nullable<byte> GeneratedAlwaysType
        {
            get
            {
                return this._generated_always_type;
            }
            set
            {
                this._generated_always_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type_desc")]
        public string GeneratedAlwaysTypeDesc
        {
            get
            {
                return this._generated_always_type_desc;
            }
            set
            {
                this._generated_always_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hidden")]
        public System.Nullable<bool> IsHidden
        {
            get
            {
                return this._is_hidden;
            }
            set
            {
                this._is_hidden = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_masked")]
        public System.Nullable<bool> IsMasked
        {
            get
            {
                return this._is_masked;
            }
            set
            {
                this._is_masked = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type")]
        public System.Nullable<int> GraphType
        {
            get
            {
                return this._graph_type;
            }
            set
            {
                this._graph_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type_desc")]
        public string GraphTypeDesc
        {
            get
            {
                return this._graph_type_desc;
            }
            set
            {
                this._graph_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_computed_columns")]
    public partial class SysComputedColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_ansi_padded;
        
        private System.Nullable<bool> _is_rowguidcol;
        
        private System.Nullable<bool> _is_identity;
        
        private System.Nullable<bool> _is_filestream;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _is_non_sql_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_dts_replicated;
        
        private System.Nullable<bool> _is_xml_document;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private string _definition;
        
        private System.Nullable<bool> _uses_database_collation;
        
        private System.Nullable<bool> _is_persisted;
        
        private System.Nullable<bool> _is_computed;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_column_set;
        
        private System.Nullable<byte> _generated_always_type;
        
        private string _generated_always_type_desc;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        private System.Nullable<bool> _is_hidden;
        
        private System.Nullable<bool> _is_masked;
        
        private System.Nullable<int> _graph_type;
        
        private string _graph_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padded")]
        public System.Nullable<bool> IsAnsiPadded
        {
            get
            {
                return this._is_ansi_padded;
            }
            set
            {
                this._is_ansi_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_rowguidcol")]
        public System.Nullable<bool> IsRowguidcol
        {
            get
            {
                return this._is_rowguidcol;
            }
            set
            {
                this._is_rowguidcol = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_identity")]
        public System.Nullable<bool> IsIdentity
        {
            get
            {
                return this._is_identity;
            }
            set
            {
                this._is_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filestream")]
        public System.Nullable<bool> IsFilestream
        {
            get
            {
                return this._is_filestream;
            }
            set
            {
                this._is_filestream = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_non_sql_subscribed")]
        public System.Nullable<bool> IsNonSqlSubscribed
        {
            get
            {
                return this._is_non_sql_subscribed;
            }
            set
            {
                this._is_non_sql_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_dts_replicated")]
        public System.Nullable<bool> IsDtsReplicated
        {
            get
            {
                return this._is_dts_replicated;
            }
            set
            {
                this._is_dts_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_database_collation")]
        public System.Nullable<bool> UsesDatabaseCollation
        {
            get
            {
                return this._uses_database_collation;
            }
            set
            {
                this._uses_database_collation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_persisted")]
        public System.Nullable<bool> IsPersisted
        {
            get
            {
                return this._is_persisted;
            }
            set
            {
                this._is_persisted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_computed")]
        public System.Nullable<bool> IsComputed
        {
            get
            {
                return this._is_computed;
            }
            set
            {
                this._is_computed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_column_set")]
        public System.Nullable<bool> IsColumnSet
        {
            get
            {
                return this._is_column_set;
            }
            set
            {
                this._is_column_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type")]
        public System.Nullable<byte> GeneratedAlwaysType
        {
            get
            {
                return this._generated_always_type;
            }
            set
            {
                this._generated_always_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type_desc")]
        public string GeneratedAlwaysTypeDesc
        {
            get
            {
                return this._generated_always_type_desc;
            }
            set
            {
                this._generated_always_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hidden")]
        public System.Nullable<bool> IsHidden
        {
            get
            {
                return this._is_hidden;
            }
            set
            {
                this._is_hidden = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_masked")]
        public System.Nullable<bool> IsMasked
        {
            get
            {
                return this._is_masked;
            }
            set
            {
                this._is_masked = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type")]
        public System.Nullable<int> GraphType
        {
            get
            {
                return this._graph_type;
            }
            set
            {
                this._graph_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type_desc")]
        public string GraphTypeDesc
        {
            get
            {
                return this._graph_type_desc;
            }
            set
            {
                this._graph_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_conversation_priorities")]
    public partial class SysConversationPriorityCatalog
    {
        
        private System.Nullable<int> _priority_id;
        
        private string _name;
        
        private System.Nullable<int> _service_contract_id;
        
        private System.Nullable<int> _local_service_id;
        
        private string _remote_service_name;
        
        private System.Nullable<byte> _priority;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("priority_id")]
        public System.Nullable<int> PriorityId
        {
            get
            {
                return this._priority_id;
            }
            set
            {
                this._priority_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_contract_id")]
        public System.Nullable<int> ServiceContractId
        {
            get
            {
                return this._service_contract_id;
            }
            set
            {
                this._service_contract_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("local_service_id")]
        public System.Nullable<int> LocalServiceId
        {
            get
            {
                return this._local_service_id;
            }
            set
            {
                this._local_service_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_service_name")]
        public string RemoteServiceName
        {
            get
            {
                return this._remote_service_name;
            }
            set
            {
                this._remote_service_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("priority")]
        public System.Nullable<byte> Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                this._priority = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_crypt_properties")]
    public partial class SysCryptPropertyCatalog
    {
        
        private System.Nullable<byte> _class;
        
        private string _class_desc;
        
        private System.Nullable<int> _major_id;
        
        private byte[] _thumbprint;
        
        private string _crypt_type;
        
        private string _crypt_type_desc;
        
        private byte[] _crypt_property;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("class")]
        public System.Nullable<byte> Class
        {
            get
            {
                return this._class;
            }
            set
            {
                this._class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("class_desc")]
        public string ClassDesc
        {
            get
            {
                return this._class_desc;
            }
            set
            {
                this._class_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("major_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> MajorId
        {
            get
            {
                return this._major_id;
            }
            set
            {
                this._major_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("thumbprint")]
        public byte[] Thumbprint
        {
            get
            {
                return this._thumbprint;
            }
            set
            {
                this._thumbprint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_type")]
        public string CryptType
        {
            get
            {
                return this._crypt_type;
            }
            set
            {
                this._crypt_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_type_desc")]
        public string CryptTypeDesc
        {
            get
            {
                return this._crypt_type_desc;
            }
            set
            {
                this._crypt_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_property")]
        public byte[] CryptProperty
        {
            get
            {
                return this._crypt_property;
            }
            set
            {
                this._crypt_property = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_data_spaces")]
    public partial class SysDatumSpaceCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _data_space_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_default;
        
        private System.Nullable<bool> _is_system;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_default")]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this._is_default;
            }
            set
            {
                this._is_default = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system")]
        public System.Nullable<bool> IsSystem
        {
            get
            {
                return this._is_system;
            }
            set
            {
                this._is_system = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_files")]
    public partial class SysDatabaseFileCatalog
    {
        
        private System.Nullable<int> _file_id;
        
        private System.Nullable<System.Guid> _file_guid;
        
        private System.Nullable<byte> _type;
        
        private string _type_desc;
        
        private System.Nullable<int> _data_space_id;
        
        private string _name;
        
        private string _physical_name;
        
        private System.Nullable<byte> _state;
        
        private string _state_desc;
        
        private System.Nullable<int> _size;
        
        private System.Nullable<int> _max_size;
        
        private System.Nullable<int> _growth;
        
        private System.Nullable<bool> _is_media_read_only;
        
        private System.Nullable<bool> _is_read_only;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_percent_growth;
        
        private System.Nullable<bool> _is_name_reserved;
        
        private System.Nullable<bool> _is_persistent_log_buffer;
        
        private System.Nullable<decimal> _create_lsn;
        
        private System.Nullable<decimal> _drop_lsn;
        
        private System.Nullable<decimal> _read_only_lsn;
        
        private System.Nullable<decimal> _read_write_lsn;
        
        private System.Nullable<decimal> _differential_base_lsn;
        
        private System.Nullable<System.Guid> _differential_base_guid;
        
        private System.Nullable<System.DateTime> _differential_base_time;
        
        private System.Nullable<decimal> _redo_start_lsn;
        
        private System.Nullable<System.Guid> _redo_start_fork_guid;
        
        private System.Nullable<decimal> _redo_target_lsn;
        
        private System.Nullable<System.Guid> _redo_target_fork_guid;
        
        private System.Nullable<decimal> _backup_lsn;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("file_id")]
        public System.Nullable<int> FileId
        {
            get
            {
                return this._file_id;
            }
            set
            {
                this._file_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("file_guid")]
        public System.Nullable<System.Guid> FileGuid
        {
            get
            {
                return this._file_guid;
            }
            set
            {
                this._file_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("physical_name")]
        public string PhysicalName
        {
            get
            {
                return this._physical_name;
            }
            set
            {
                this._physical_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("state")]
        public System.Nullable<byte> State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("state_desc")]
        public string StateDesc
        {
            get
            {
                return this._state_desc;
            }
            set
            {
                this._state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("size")]
        public System.Nullable<int> Size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_size")]
        public System.Nullable<int> MaxSize
        {
            get
            {
                return this._max_size;
            }
            set
            {
                this._max_size = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("growth")]
        public System.Nullable<int> Growth
        {
            get
            {
                return this._growth;
            }
            set
            {
                this._growth = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_media_read_only")]
        public System.Nullable<bool> IsMediaReadOnly
        {
            get
            {
                return this._is_media_read_only;
            }
            set
            {
                this._is_media_read_only = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_read_only")]
        public System.Nullable<bool> IsReadOnly
        {
            get
            {
                return this._is_read_only;
            }
            set
            {
                this._is_read_only = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_percent_growth")]
        public System.Nullable<bool> IsPercentGrowth
        {
            get
            {
                return this._is_percent_growth;
            }
            set
            {
                this._is_percent_growth = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_name_reserved")]
        public System.Nullable<bool> IsNameReserved
        {
            get
            {
                return this._is_name_reserved;
            }
            set
            {
                this._is_name_reserved = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_persistent_log_buffer")]
        public System.Nullable<bool> IsPersistentLogBuffer
        {
            get
            {
                return this._is_persistent_log_buffer;
            }
            set
            {
                this._is_persistent_log_buffer = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_lsn")]
        public System.Nullable<decimal> CreateLsn
        {
            get
            {
                return this._create_lsn;
            }
            set
            {
                this._create_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("drop_lsn")]
        public System.Nullable<decimal> DropLsn
        {
            get
            {
                return this._drop_lsn;
            }
            set
            {
                this._drop_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("read_only_lsn")]
        public System.Nullable<decimal> ReadOnlyLsn
        {
            get
            {
                return this._read_only_lsn;
            }
            set
            {
                this._read_only_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("read_write_lsn")]
        public System.Nullable<decimal> ReadWriteLsn
        {
            get
            {
                return this._read_write_lsn;
            }
            set
            {
                this._read_write_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("differential_base_lsn")]
        public System.Nullable<decimal> DifferentialBaseLsn
        {
            get
            {
                return this._differential_base_lsn;
            }
            set
            {
                this._differential_base_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("differential_base_guid")]
        public System.Nullable<System.Guid> DifferentialBaseGuid
        {
            get
            {
                return this._differential_base_guid;
            }
            set
            {
                this._differential_base_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("differential_base_time")]
        public System.Nullable<System.DateTime> DifferentialBaseTime
        {
            get
            {
                return this._differential_base_time;
            }
            set
            {
                this._differential_base_time = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("redo_start_lsn")]
        public System.Nullable<decimal> RedoStartLsn
        {
            get
            {
                return this._redo_start_lsn;
            }
            set
            {
                this._redo_start_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("redo_start_fork_guid")]
        public System.Nullable<System.Guid> RedoStartForkGuid
        {
            get
            {
                return this._redo_start_fork_guid;
            }
            set
            {
                this._redo_start_fork_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("redo_target_lsn")]
        public System.Nullable<decimal> RedoTargetLsn
        {
            get
            {
                return this._redo_target_lsn;
            }
            set
            {
                this._redo_target_lsn = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("redo_target_fork_guid")]
        public System.Nullable<System.Guid> RedoTargetForkGuid
        {
            get
            {
                return this._redo_target_fork_guid;
            }
            set
            {
                this._redo_target_fork_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("backup_lsn")]
        public System.Nullable<decimal> BackupLsn
        {
            get
            {
                return this._backup_lsn;
            }
            set
            {
                this._backup_lsn = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_filestream_options")]
    public partial class SysDatabaseFilestreamOptionCatalog
    {
        
        private System.Nullable<int> _database_id;
        
        private System.Nullable<byte> _non_transacted_access;
        
        private string _non_transacted_access_desc;
        
        private string _directory_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("database_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> DatabaseId
        {
            get
            {
                return this._database_id;
            }
            set
            {
                this._database_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("non_transacted_access")]
        public System.Nullable<byte> NonTransactedAccess
        {
            get
            {
                return this._non_transacted_access;
            }
            set
            {
                this._non_transacted_access = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("non_transacted_access_desc")]
        public string NonTransactedAccessDesc
        {
            get
            {
                return this._non_transacted_access_desc;
            }
            set
            {
                this._non_transacted_access_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("directory_name")]
        public string DirectoryName
        {
            get
            {
                return this._directory_name;
            }
            set
            {
                this._directory_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_principals")]
    public partial class SysDatabasePrincipalCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _principal_id;
        
        private string _type;
        
        private string _type_desc;
        
        private string _default_schema_name;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<int> _owning_principal_id;
        
        private byte[] _sid;
        
        private System.Nullable<bool> _is_fixed_role;
        
        private System.Nullable<int> _authentication_type;
        
        private string _authentication_type_desc;
        
        private string _default_language_name;
        
        private System.Nullable<int> _default_language_lcid;
        
        private System.Nullable<bool> _allow_encrypted_value_modifications;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_schema_name")]
        public string DefaultSchemaName
        {
            get
            {
                return this._default_schema_name;
            }
            set
            {
                this._default_schema_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("owning_principal_id")]
        public System.Nullable<int> OwningPrincipalId
        {
            get
            {
                return this._owning_principal_id;
            }
            set
            {
                this._owning_principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("sid")]
        public byte[] Sid
        {
            get
            {
                return this._sid;
            }
            set
            {
                this._sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_fixed_role")]
        public System.Nullable<bool> IsFixedRole
        {
            get
            {
                return this._is_fixed_role;
            }
            set
            {
                this._is_fixed_role = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("authentication_type")]
        public System.Nullable<int> AuthenticationType
        {
            get
            {
                return this._authentication_type;
            }
            set
            {
                this._authentication_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("authentication_type_desc")]
        public string AuthenticationTypeDesc
        {
            get
            {
                return this._authentication_type_desc;
            }
            set
            {
                this._authentication_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_language_name")]
        public string DefaultLanguageName
        {
            get
            {
                return this._default_language_name;
            }
            set
            {
                this._default_language_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_language_lcid")]
        public System.Nullable<int> DefaultLanguageLcid
        {
            get
            {
                return this._default_language_lcid;
            }
            set
            {
                this._default_language_lcid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_encrypted_value_modifications")]
        public System.Nullable<bool> AllowEncryptedValueModifications
        {
            get
            {
                return this._allow_encrypted_value_modifications;
            }
            set
            {
                this._allow_encrypted_value_modifications = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_query_store_options")]
    public partial class SysDatabaseQueryStoreOptionCatalog
    {
        
        private System.Nullable<short> _desired_state;
        
        private string _desired_state_desc;
        
        private System.Nullable<short> _actual_state;
        
        private string _actual_state_desc;
        
        private System.Nullable<int> _readonly_reason;
        
        private System.Nullable<long> _current_storage_size_mb;
        
        private System.Nullable<long> _flush_interval_seconds;
        
        private System.Nullable<long> _interval_length_minutes;
        
        private System.Nullable<long> _max_storage_size_mb;
        
        private System.Nullable<long> _stale_query_threshold_days;
        
        private System.Nullable<long> _max_plans_per_query;
        
        private System.Nullable<short> _query_capture_mode;
        
        private string _query_capture_mode_desc;
        
        private System.Nullable<short> _size_based_cleanup_mode;
        
        private string _size_based_cleanup_mode_desc;
        
        private System.Nullable<short> _wait_stats_capture_mode;
        
        private string _wait_stats_capture_mode_desc;
        
        private string _actual_state_additional_info;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("desired_state")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<short> DesiredState
        {
            get
            {
                return this._desired_state;
            }
            set
            {
                this._desired_state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("desired_state_desc")]
        public string DesiredStateDesc
        {
            get
            {
                return this._desired_state_desc;
            }
            set
            {
                this._desired_state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("actual_state")]
        public System.Nullable<short> ActualState
        {
            get
            {
                return this._actual_state;
            }
            set
            {
                this._actual_state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("actual_state_desc")]
        public string ActualStateDesc
        {
            get
            {
                return this._actual_state_desc;
            }
            set
            {
                this._actual_state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("readonly_reason")]
        public System.Nullable<int> ReadonlyReason
        {
            get
            {
                return this._readonly_reason;
            }
            set
            {
                this._readonly_reason = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("current_storage_size_mb")]
        public System.Nullable<long> CurrentStorageSizeMb
        {
            get
            {
                return this._current_storage_size_mb;
            }
            set
            {
                this._current_storage_size_mb = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("flush_interval_seconds")]
        public System.Nullable<long> FlushIntervalSeconds
        {
            get
            {
                return this._flush_interval_seconds;
            }
            set
            {
                this._flush_interval_seconds = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("interval_length_minutes")]
        public System.Nullable<long> IntervalLengthMinutes
        {
            get
            {
                return this._interval_length_minutes;
            }
            set
            {
                this._interval_length_minutes = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_storage_size_mb")]
        public System.Nullable<long> MaxStorageSizeMb
        {
            get
            {
                return this._max_storage_size_mb;
            }
            set
            {
                this._max_storage_size_mb = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stale_query_threshold_days")]
        public System.Nullable<long> StaleQueryThresholdDays
        {
            get
            {
                return this._stale_query_threshold_days;
            }
            set
            {
                this._stale_query_threshold_days = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_plans_per_query")]
        public System.Nullable<long> MaxPlansPerQuery
        {
            get
            {
                return this._max_plans_per_query;
            }
            set
            {
                this._max_plans_per_query = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("query_capture_mode")]
        public System.Nullable<short> QueryCaptureMode
        {
            get
            {
                return this._query_capture_mode;
            }
            set
            {
                this._query_capture_mode = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("query_capture_mode_desc")]
        public string QueryCaptureModeDesc
        {
            get
            {
                return this._query_capture_mode_desc;
            }
            set
            {
                this._query_capture_mode_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("size_based_cleanup_mode")]
        public System.Nullable<short> SizeBasedCleanupMode
        {
            get
            {
                return this._size_based_cleanup_mode;
            }
            set
            {
                this._size_based_cleanup_mode = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("size_based_cleanup_mode_desc")]
        public string SizeBasedCleanupModeDesc
        {
            get
            {
                return this._size_based_cleanup_mode_desc;
            }
            set
            {
                this._size_based_cleanup_mode_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("wait_stats_capture_mode")]
        public System.Nullable<short> WaitStatsCaptureMode
        {
            get
            {
                return this._wait_stats_capture_mode;
            }
            set
            {
                this._wait_stats_capture_mode = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("wait_stats_capture_mode_desc")]
        public string WaitStatsCaptureModeDesc
        {
            get
            {
                return this._wait_stats_capture_mode_desc;
            }
            set
            {
                this._wait_stats_capture_mode_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("actual_state_additional_info")]
        public string ActualStateAdditionalInfo
        {
            get
            {
                return this._actual_state_additional_info;
            }
            set
            {
                this._actual_state_additional_info = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_role_members")]
    public partial class SysDatabaseRoleMemberCatalog
    {
        
        private System.Nullable<int> _role_principal_id;
        
        private System.Nullable<int> _member_principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("role_principal_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> RolePrincipalId
        {
            get
            {
                return this._role_principal_id;
            }
            set
            {
                this._role_principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("member_principal_id")]
        public System.Nullable<int> MemberPrincipalId
        {
            get
            {
                return this._member_principal_id;
            }
            set
            {
                this._member_principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_scoped_configurations")]
    public partial class SysDatabaseScopedConfigurationCatalog
    {
        
        private System.Nullable<int> _configuration_id;
        
        private string _name;
        
        private object _value;
        
        private object _value_for_secondary;
        
        private System.Nullable<bool> _is_value_default;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("configuration_id")]
        public System.Nullable<int> ConfigurationId
        {
            get
            {
                return this._configuration_id;
            }
            set
            {
                this._configuration_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object ValueForSecondary
        {
            get
            {
                return this._value_for_secondary;
            }
            set
            {
                this._value_for_secondary = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_value_default")]
        public System.Nullable<bool> IsValueDefault
        {
            get
            {
                return this._is_value_default;
            }
            set
            {
                this._is_value_default = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_database_scoped_credentials")]
    public partial class SysDatabaseScopedCredentialCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _credential_id;
        
        private string _credential_identity;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private string _target_type;
        
        private System.Nullable<int> _target_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("credential_id")]
        public System.Nullable<int> CredentialId
        {
            get
            {
                return this._credential_id;
            }
            set
            {
                this._credential_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("credential_identity")]
        public string CredentialIdentity
        {
            get
            {
                return this._credential_identity;
            }
            set
            {
                this._credential_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("target_type")]
        public string TargetType
        {
            get
            {
                return this._target_type;
            }
            set
            {
                this._target_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("target_id")]
        public System.Nullable<int> TargetId
        {
            get
            {
                return this._target_id;
            }
            set
            {
                this._target_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_databases")]
    public partial class SysDatabaseCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _database_id;
        
        private System.Nullable<int> _source_database_id;
        
        private byte[] _owner_sid;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<byte> _compatibility_level;
        
        private string _collation_name;
        
        private System.Nullable<byte> _user_access;
        
        private string _user_access_desc;
        
        private System.Nullable<bool> _is_read_only;
        
        private System.Nullable<bool> _is_auto_close_on;
        
        private System.Nullable<bool> _is_auto_shrink_on;
        
        private System.Nullable<byte> _state;
        
        private string _state_desc;
        
        private System.Nullable<bool> _is_in_standby;
        
        private System.Nullable<bool> _is_cleanly_shutdown;
        
        private System.Nullable<bool> _is_supplemental_logging_enabled;
        
        private System.Nullable<byte> _snapshot_isolation_state;
        
        private string _snapshot_isolation_state_desc;
        
        private System.Nullable<bool> _is_read_committed_snapshot_on;
        
        private System.Nullable<byte> _recovery_model;
        
        private string _recovery_model_desc;
        
        private System.Nullable<byte> _page_verify_option;
        
        private string _page_verify_option_desc;
        
        private System.Nullable<bool> _is_auto_create_stats_on;
        
        private System.Nullable<bool> _is_auto_create_stats_incremental_on;
        
        private System.Nullable<bool> _is_auto_update_stats_on;
        
        private System.Nullable<bool> _is_auto_update_stats_async_on;
        
        private System.Nullable<bool> _is_ansi_null_default_on;
        
        private System.Nullable<bool> _is_ansi_nulls_on;
        
        private System.Nullable<bool> _is_ansi_padding_on;
        
        private System.Nullable<bool> _is_ansi_warnings_on;
        
        private System.Nullable<bool> _is_arithabort_on;
        
        private System.Nullable<bool> _is_concat_null_yields_null_on;
        
        private System.Nullable<bool> _is_numeric_roundabort_on;
        
        private System.Nullable<bool> _is_quoted_identifier_on;
        
        private System.Nullable<bool> _is_recursive_triggers_on;
        
        private System.Nullable<bool> _is_cursor_close_on_commit_on;
        
        private System.Nullable<bool> _is_local_cursor_default;
        
        private System.Nullable<bool> _is_fulltext_enabled;
        
        private System.Nullable<bool> _is_trustworthy_on;
        
        private System.Nullable<bool> _is_db_chaining_on;
        
        private System.Nullable<bool> _is_parameterization_forced;
        
        private System.Nullable<bool> _is_master_key_encrypted_by_server;
        
        private System.Nullable<bool> _is_query_store_on;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_distributor;
        
        private System.Nullable<bool> _is_sync_with_backup;
        
        private System.Nullable<System.Guid> _service_broker_guid;
        
        private System.Nullable<bool> _is_broker_enabled;
        
        private System.Nullable<byte> _log_reuse_wait;
        
        private string _log_reuse_wait_desc;
        
        private System.Nullable<bool> _is_date_correlation_on;
        
        private System.Nullable<bool> _is_cdc_enabled;
        
        private System.Nullable<bool> _is_encrypted;
        
        private System.Nullable<bool> _is_honor_broker_priority_on;
        
        private System.Nullable<System.Guid> _replica_id;
        
        private System.Nullable<System.Guid> _group_database_id;
        
        private System.Nullable<int> _resource_pool_id;
        
        private System.Nullable<short> _default_language_lcid;
        
        private string _default_language_name;
        
        private System.Nullable<int> _default_fulltext_language_lcid;
        
        private string _default_fulltext_language_name;
        
        private System.Nullable<bool> _is_nested_triggers_on;
        
        private System.Nullable<bool> _is_transform_noise_words_on;
        
        private System.Nullable<short> _two_digit_year_cutoff;
        
        private System.Nullable<byte> _containment;
        
        private string _containment_desc;
        
        private System.Nullable<int> _target_recovery_time_in_seconds;
        
        private System.Nullable<int> _delayed_durability;
        
        private string _delayed_durability_desc;
        
        private System.Nullable<bool> _is_memory_optimized_elevate_to_snapshot_on;
        
        private System.Nullable<bool> _is_federation_member;
        
        private System.Nullable<bool> _is_remote_data_archive_enabled;
        
        private System.Nullable<bool> _is_mixed_page_allocation_on;
        
        private System.Nullable<bool> _is_temporal_history_retention_enabled;
        
        private System.Nullable<int> _catalog_collation_type;
        
        private string _catalog_collation_type_desc;
        
        private string _physical_database_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("database_id")]
        public System.Nullable<int> DatabaseId
        {
            get
            {
                return this._database_id;
            }
            set
            {
                this._database_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("source_database_id")]
        public System.Nullable<int> SourceDatabaseId
        {
            get
            {
                return this._source_database_id;
            }
            set
            {
                this._source_database_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("owner_sid")]
        public byte[] OwnerSid
        {
            get
            {
                return this._owner_sid;
            }
            set
            {
                this._owner_sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("compatibility_level")]
        public System.Nullable<byte> CompatibilityLevel
        {
            get
            {
                return this._compatibility_level;
            }
            set
            {
                this._compatibility_level = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_access")]
        public System.Nullable<byte> UserAccess
        {
            get
            {
                return this._user_access;
            }
            set
            {
                this._user_access = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_access_desc")]
        public string UserAccessDesc
        {
            get
            {
                return this._user_access_desc;
            }
            set
            {
                this._user_access_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_read_only")]
        public System.Nullable<bool> IsReadOnly
        {
            get
            {
                return this._is_read_only;
            }
            set
            {
                this._is_read_only = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_close_on")]
        public System.Nullable<bool> IsAutoCloseOn
        {
            get
            {
                return this._is_auto_close_on;
            }
            set
            {
                this._is_auto_close_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_shrink_on")]
        public System.Nullable<bool> IsAutoShrinkOn
        {
            get
            {
                return this._is_auto_shrink_on;
            }
            set
            {
                this._is_auto_shrink_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("state")]
        public System.Nullable<byte> State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("state_desc")]
        public string StateDesc
        {
            get
            {
                return this._state_desc;
            }
            set
            {
                this._state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_in_standby")]
        public System.Nullable<bool> IsInStandby
        {
            get
            {
                return this._is_in_standby;
            }
            set
            {
                this._is_in_standby = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cleanly_shutdown")]
        public System.Nullable<bool> IsCleanlyShutdown
        {
            get
            {
                return this._is_cleanly_shutdown;
            }
            set
            {
                this._is_cleanly_shutdown = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_supplemental_logging_enabled")]
        public System.Nullable<bool> IsSupplementalLoggingEnabled
        {
            get
            {
                return this._is_supplemental_logging_enabled;
            }
            set
            {
                this._is_supplemental_logging_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("snapshot_isolation_state")]
        public System.Nullable<byte> SnapshotIsolationState
        {
            get
            {
                return this._snapshot_isolation_state;
            }
            set
            {
                this._snapshot_isolation_state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("snapshot_isolation_state_desc")]
        public string SnapshotIsolationStateDesc
        {
            get
            {
                return this._snapshot_isolation_state_desc;
            }
            set
            {
                this._snapshot_isolation_state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_read_committed_snapshot_on")]
        public System.Nullable<bool> IsReadCommittedSnapshotOn
        {
            get
            {
                return this._is_read_committed_snapshot_on;
            }
            set
            {
                this._is_read_committed_snapshot_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("recovery_model")]
        public System.Nullable<byte> RecoveryModel
        {
            get
            {
                return this._recovery_model;
            }
            set
            {
                this._recovery_model = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("recovery_model_desc")]
        public string RecoveryModelDesc
        {
            get
            {
                return this._recovery_model_desc;
            }
            set
            {
                this._recovery_model_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("page_verify_option")]
        public System.Nullable<byte> PageVerifyOption
        {
            get
            {
                return this._page_verify_option;
            }
            set
            {
                this._page_verify_option = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("page_verify_option_desc")]
        public string PageVerifyOptionDesc
        {
            get
            {
                return this._page_verify_option_desc;
            }
            set
            {
                this._page_verify_option_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_create_stats_on")]
        public System.Nullable<bool> IsAutoCreateStatsOn
        {
            get
            {
                return this._is_auto_create_stats_on;
            }
            set
            {
                this._is_auto_create_stats_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_create_stats_incremental_on")]
        public System.Nullable<bool> IsAutoCreateStatsIncrementalOn
        {
            get
            {
                return this._is_auto_create_stats_incremental_on;
            }
            set
            {
                this._is_auto_create_stats_incremental_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_update_stats_on")]
        public System.Nullable<bool> IsAutoUpdateStatsOn
        {
            get
            {
                return this._is_auto_update_stats_on;
            }
            set
            {
                this._is_auto_update_stats_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_update_stats_async_on")]
        public System.Nullable<bool> IsAutoUpdateStatsAsyncOn
        {
            get
            {
                return this._is_auto_update_stats_async_on;
            }
            set
            {
                this._is_auto_update_stats_async_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_null_default_on")]
        public System.Nullable<bool> IsAnsiNullDefaultOn
        {
            get
            {
                return this._is_ansi_null_default_on;
            }
            set
            {
                this._is_ansi_null_default_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_nulls_on")]
        public System.Nullable<bool> IsAnsiNullsOn
        {
            get
            {
                return this._is_ansi_nulls_on;
            }
            set
            {
                this._is_ansi_nulls_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padding_on")]
        public System.Nullable<bool> IsAnsiPaddingOn
        {
            get
            {
                return this._is_ansi_padding_on;
            }
            set
            {
                this._is_ansi_padding_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_warnings_on")]
        public System.Nullable<bool> IsAnsiWarningsOn
        {
            get
            {
                return this._is_ansi_warnings_on;
            }
            set
            {
                this._is_ansi_warnings_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_arithabort_on")]
        public System.Nullable<bool> IsArithabortOn
        {
            get
            {
                return this._is_arithabort_on;
            }
            set
            {
                this._is_arithabort_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_concat_null_yields_null_on")]
        public System.Nullable<bool> IsConcatNullYieldsNullOn
        {
            get
            {
                return this._is_concat_null_yields_null_on;
            }
            set
            {
                this._is_concat_null_yields_null_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_numeric_roundabort_on")]
        public System.Nullable<bool> IsNumericRoundabortOn
        {
            get
            {
                return this._is_numeric_roundabort_on;
            }
            set
            {
                this._is_numeric_roundabort_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_quoted_identifier_on")]
        public System.Nullable<bool> IsQuotedIdentifierOn
        {
            get
            {
                return this._is_quoted_identifier_on;
            }
            set
            {
                this._is_quoted_identifier_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_recursive_triggers_on")]
        public System.Nullable<bool> IsRecursiveTriggersOn
        {
            get
            {
                return this._is_recursive_triggers_on;
            }
            set
            {
                this._is_recursive_triggers_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cursor_close_on_commit_on")]
        public System.Nullable<bool> IsCursorCloseOnCommitOn
        {
            get
            {
                return this._is_cursor_close_on_commit_on;
            }
            set
            {
                this._is_cursor_close_on_commit_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_local_cursor_default")]
        public System.Nullable<bool> IsLocalCursorDefault
        {
            get
            {
                return this._is_local_cursor_default;
            }
            set
            {
                this._is_local_cursor_default = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_fulltext_enabled")]
        public System.Nullable<bool> IsFulltextEnabled
        {
            get
            {
                return this._is_fulltext_enabled;
            }
            set
            {
                this._is_fulltext_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_trustworthy_on")]
        public System.Nullable<bool> IsTrustworthyOn
        {
            get
            {
                return this._is_trustworthy_on;
            }
            set
            {
                this._is_trustworthy_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_db_chaining_on")]
        public System.Nullable<bool> IsDbChainingOn
        {
            get
            {
                return this._is_db_chaining_on;
            }
            set
            {
                this._is_db_chaining_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_parameterization_forced")]
        public System.Nullable<bool> IsParameterizationForced
        {
            get
            {
                return this._is_parameterization_forced;
            }
            set
            {
                this._is_parameterization_forced = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_master_key_encrypted_by_server")]
        public System.Nullable<bool> IsMasterKeyEncryptedByServer
        {
            get
            {
                return this._is_master_key_encrypted_by_server;
            }
            set
            {
                this._is_master_key_encrypted_by_server = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_query_store_on")]
        public System.Nullable<bool> IsQueryStoreOn
        {
            get
            {
                return this._is_query_store_on;
            }
            set
            {
                this._is_query_store_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_subscribed")]
        public System.Nullable<bool> IsSubscribed
        {
            get
            {
                return this._is_subscribed;
            }
            set
            {
                this._is_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_distributor")]
        public System.Nullable<bool> IsDistributor
        {
            get
            {
                return this._is_distributor;
            }
            set
            {
                this._is_distributor = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sync_with_backup")]
        public System.Nullable<bool> IsSyncWithBackup
        {
            get
            {
                return this._is_sync_with_backup;
            }
            set
            {
                this._is_sync_with_backup = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_broker_guid")]
        public System.Nullable<System.Guid> ServiceBrokerGuid
        {
            get
            {
                return this._service_broker_guid;
            }
            set
            {
                this._service_broker_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_broker_enabled")]
        public System.Nullable<bool> IsBrokerEnabled
        {
            get
            {
                return this._is_broker_enabled;
            }
            set
            {
                this._is_broker_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("log_reuse_wait")]
        public System.Nullable<byte> LogReuseWait
        {
            get
            {
                return this._log_reuse_wait;
            }
            set
            {
                this._log_reuse_wait = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("log_reuse_wait_desc")]
        public string LogReuseWaitDesc
        {
            get
            {
                return this._log_reuse_wait_desc;
            }
            set
            {
                this._log_reuse_wait_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_date_correlation_on")]
        public System.Nullable<bool> IsDateCorrelationOn
        {
            get
            {
                return this._is_date_correlation_on;
            }
            set
            {
                this._is_date_correlation_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cdc_enabled")]
        public System.Nullable<bool> IsCdcEnabled
        {
            get
            {
                return this._is_cdc_enabled;
            }
            set
            {
                this._is_cdc_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_encrypted")]
        public System.Nullable<bool> IsEncrypted
        {
            get
            {
                return this._is_encrypted;
            }
            set
            {
                this._is_encrypted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_honor_broker_priority_on")]
        public System.Nullable<bool> IsHonorBrokerPriorityOn
        {
            get
            {
                return this._is_honor_broker_priority_on;
            }
            set
            {
                this._is_honor_broker_priority_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("replica_id")]
        public System.Nullable<System.Guid> ReplicaId
        {
            get
            {
                return this._replica_id;
            }
            set
            {
                this._replica_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("group_database_id")]
        public System.Nullable<System.Guid> GroupDatabaseId
        {
            get
            {
                return this._group_database_id;
            }
            set
            {
                this._group_database_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("resource_pool_id")]
        public System.Nullable<int> ResourcePoolId
        {
            get
            {
                return this._resource_pool_id;
            }
            set
            {
                this._resource_pool_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_language_lcid")]
        public System.Nullable<short> DefaultLanguageLcid
        {
            get
            {
                return this._default_language_lcid;
            }
            set
            {
                this._default_language_lcid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_language_name")]
        public string DefaultLanguageName
        {
            get
            {
                return this._default_language_name;
            }
            set
            {
                this._default_language_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_fulltext_language_lcid")]
        public System.Nullable<int> DefaultFulltextLanguageLcid
        {
            get
            {
                return this._default_fulltext_language_lcid;
            }
            set
            {
                this._default_fulltext_language_lcid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_fulltext_language_name")]
        public string DefaultFulltextLanguageName
        {
            get
            {
                return this._default_fulltext_language_name;
            }
            set
            {
                this._default_fulltext_language_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nested_triggers_on")]
        public System.Nullable<bool> IsNestedTriggersOn
        {
            get
            {
                return this._is_nested_triggers_on;
            }
            set
            {
                this._is_nested_triggers_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_transform_noise_words_on")]
        public System.Nullable<bool> IsTransformNoiseWordsOn
        {
            get
            {
                return this._is_transform_noise_words_on;
            }
            set
            {
                this._is_transform_noise_words_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("two_digit_year_cutoff")]
        public System.Nullable<short> TwoDigitYearCutoff
        {
            get
            {
                return this._two_digit_year_cutoff;
            }
            set
            {
                this._two_digit_year_cutoff = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("containment")]
        public System.Nullable<byte> Containment
        {
            get
            {
                return this._containment;
            }
            set
            {
                this._containment = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("containment_desc")]
        public string ContainmentDesc
        {
            get
            {
                return this._containment_desc;
            }
            set
            {
                this._containment_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("target_recovery_time_in_seconds")]
        public System.Nullable<int> TargetRecoveryTimeInSeconds
        {
            get
            {
                return this._target_recovery_time_in_seconds;
            }
            set
            {
                this._target_recovery_time_in_seconds = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("delayed_durability")]
        public System.Nullable<int> DelayedDurability
        {
            get
            {
                return this._delayed_durability;
            }
            set
            {
                this._delayed_durability = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("delayed_durability_desc")]
        public string DelayedDurabilityDesc
        {
            get
            {
                return this._delayed_durability_desc;
            }
            set
            {
                this._delayed_durability_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_memory_optimized_elevate_to_snapshot_on")]
        public System.Nullable<bool> IsMemoryOptimizedElevateToSnapshotOn
        {
            get
            {
                return this._is_memory_optimized_elevate_to_snapshot_on;
            }
            set
            {
                this._is_memory_optimized_elevate_to_snapshot_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_federation_member")]
        public System.Nullable<bool> IsFederationMember
        {
            get
            {
                return this._is_federation_member;
            }
            set
            {
                this._is_federation_member = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_remote_data_archive_enabled")]
        public System.Nullable<bool> IsRemoteDataArchiveEnabled
        {
            get
            {
                return this._is_remote_data_archive_enabled;
            }
            set
            {
                this._is_remote_data_archive_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_mixed_page_allocation_on")]
        public System.Nullable<bool> IsMixedPageAllocationOn
        {
            get
            {
                return this._is_mixed_page_allocation_on;
            }
            set
            {
                this._is_mixed_page_allocation_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_temporal_history_retention_enabled")]
        public System.Nullable<bool> IsTemporalHistoryRetentionEnabled
        {
            get
            {
                return this._is_temporal_history_retention_enabled;
            }
            set
            {
                this._is_temporal_history_retention_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("catalog_collation_type")]
        public System.Nullable<int> CatalogCollationType
        {
            get
            {
                return this._catalog_collation_type;
            }
            set
            {
                this._catalog_collation_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("catalog_collation_type_desc")]
        public string CatalogCollationTypeDesc
        {
            get
            {
                return this._catalog_collation_type_desc;
            }
            set
            {
                this._catalog_collation_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("physical_database_name")]
        public string PhysicalDatabaseName
        {
            get
            {
                return this._physical_database_name;
            }
            set
            {
                this._physical_database_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_default_constraints")]
    public partial class SysDefaultConstraintCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<int> _parent_column_id;
        
        private string _definition;
        
        private System.Nullable<bool> _is_system_named;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_column_id")]
        public System.Nullable<int> ParentColumnId
        {
            get
            {
                return this._parent_column_id;
            }
            set
            {
                this._parent_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system_named")]
        public System.Nullable<bool> IsSystemNamed
        {
            get
            {
                return this._is_system_named;
            }
            set
            {
                this._is_system_named = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_destination_data_spaces")]
    public partial class SysDestinationDatumSpaceCatalog
    {
        
        private System.Nullable<int> _partition_scheme_id;
        
        private System.Nullable<int> _destination_id;
        
        private System.Nullable<int> _data_space_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("partition_scheme_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> PartitionSchemeId
        {
            get
            {
                return this._partition_scheme_id;
            }
            set
            {
                this._partition_scheme_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("destination_id")]
        public System.Nullable<int> DestinationId
        {
            get
            {
                return this._destination_id;
            }
            set
            {
                this._destination_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_event_notifications")]
    public partial class SysEventNotificationCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<byte> _parent_class;
        
        private string _parent_class_desc;
        
        private System.Nullable<int> _parent_id;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private string _service_name;
        
        private string _broker_instance;
        
        private byte[] _creator_sid;
        
        private System.Nullable<int> _principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_class")]
        public System.Nullable<byte> ParentClass
        {
            get
            {
                return this._parent_class;
            }
            set
            {
                this._parent_class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_class_desc")]
        public string ParentClassDesc
        {
            get
            {
                return this._parent_class_desc;
            }
            set
            {
                this._parent_class_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_id")]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._parent_id;
            }
            set
            {
                this._parent_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_name")]
        public string ServiceName
        {
            get
            {
                return this._service_name;
            }
            set
            {
                this._service_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("broker_instance")]
        public string BrokerInstance
        {
            get
            {
                return this._broker_instance;
            }
            set
            {
                this._broker_instance = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("creator_sid")]
        public byte[] CreatorSid
        {
            get
            {
                return this._creator_sid;
            }
            set
            {
                this._creator_sid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_events")]
    public partial class SysEventCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_trigger_event;
        
        private System.Nullable<int> _event_group_type;
        
        private string _event_group_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<int> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_trigger_event")]
        public System.Nullable<bool> IsTriggerEvent
        {
            get
            {
                return this._is_trigger_event;
            }
            set
            {
                this._is_trigger_event = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("event_group_type")]
        public System.Nullable<int> EventGroupType
        {
            get
            {
                return this._event_group_type;
            }
            set
            {
                this._event_group_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("event_group_type_desc")]
        public string EventGroupTypeDesc
        {
            get
            {
                return this._event_group_type_desc;
            }
            set
            {
                this._event_group_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_extended_properties")]
    public partial class SysExtendedPropertyCatalog
    {
        
        private System.Nullable<byte> _class;
        
        private string _class_desc;
        
        private System.Nullable<int> _major_id;
        
        private System.Nullable<int> _minor_id;
        
        private string _name;
        
        private object _value;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("class")]
        public System.Nullable<byte> Class
        {
            get
            {
                return this._class;
            }
            set
            {
                this._class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("class_desc")]
        public string ClassDesc
        {
            get
            {
                return this._class_desc;
            }
            set
            {
                this._class_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("major_id")]
        public System.Nullable<int> MajorId
        {
            get
            {
                return this._major_id;
            }
            set
            {
                this._major_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("minor_id")]
        public System.Nullable<int> MinorId
        {
            get
            {
                return this._minor_id;
            }
            set
            {
                this._minor_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_external_data_sources")]
    public partial class SysExternalDatumSourceCatalog
    {
        
        private System.Nullable<int> _data_source_id;
        
        private string _name;
        
        private string _location;
        
        private string _type_desc;
        
        private System.Nullable<byte> _type;
        
        private string _resource_manager_location;
        
        private System.Nullable<int> _credential_id;
        
        private string _database_name;
        
        private string _shard_map_name;
        
        private string _connection_options;
        
        private string _pushdown;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_source_id")]
        public System.Nullable<int> DataSourceId
        {
            get
            {
                return this._data_source_id;
            }
            set
            {
                this._data_source_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("location")]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                this._location = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("resource_manager_location")]
        public string ResourceManagerLocation
        {
            get
            {
                return this._resource_manager_location;
            }
            set
            {
                this._resource_manager_location = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("credential_id")]
        public System.Nullable<int> CredentialId
        {
            get
            {
                return this._credential_id;
            }
            set
            {
                this._credential_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("database_name")]
        public string DatabaseName
        {
            get
            {
                return this._database_name;
            }
            set
            {
                this._database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("shard_map_name")]
        public string ShardMapName
        {
            get
            {
                return this._shard_map_name;
            }
            set
            {
                this._shard_map_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("connection_options")]
        public string ConnectionOptions
        {
            get
            {
                return this._connection_options;
            }
            set
            {
                this._connection_options = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("pushdown")]
        public string Pushdown
        {
            get
            {
                return this._pushdown;
            }
            set
            {
                this._pushdown = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_external_tables")]
    public partial class SysExternalTableCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<int> _max_column_id_used;
        
        private System.Nullable<bool> _uses_ansi_nulls;
        
        private System.Nullable<int> _data_source_id;
        
        private System.Nullable<int> _file_format_id;
        
        private string _location;
        
        private string _reject_type;
        
        private System.Nullable<double> _reject_value;
        
        private System.Nullable<double> _reject_sample_value;
        
        private System.Nullable<byte> _distribution_type;
        
        private string _distribution_desc;
        
        private System.Nullable<int> _sharding_col_id;
        
        private string _remote_schema_name;
        
        private string _remote_object_name;
        
        private string _rejected_row_location;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_column_id_used")]
        public System.Nullable<int> MaxColumnIdUsed
        {
            get
            {
                return this._max_column_id_used;
            }
            set
            {
                this._max_column_id_used = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_ansi_nulls")]
        public System.Nullable<bool> UsesAnsiNulls
        {
            get
            {
                return this._uses_ansi_nulls;
            }
            set
            {
                this._uses_ansi_nulls = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_source_id")]
        public System.Nullable<int> DataSourceId
        {
            get
            {
                return this._data_source_id;
            }
            set
            {
                this._data_source_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("file_format_id")]
        public System.Nullable<int> FileFormatId
        {
            get
            {
                return this._file_format_id;
            }
            set
            {
                this._file_format_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("location")]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                this._location = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("reject_type")]
        public string RejectType
        {
            get
            {
                return this._reject_type;
            }
            set
            {
                this._reject_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("reject_value")]
        public System.Nullable<double> RejectValue
        {
            get
            {
                return this._reject_value;
            }
            set
            {
                this._reject_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("reject_sample_value")]
        public System.Nullable<double> RejectSampleValue
        {
            get
            {
                return this._reject_sample_value;
            }
            set
            {
                this._reject_sample_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("distribution_type")]
        public System.Nullable<byte> DistributionType
        {
            get
            {
                return this._distribution_type;
            }
            set
            {
                this._distribution_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("distribution_desc")]
        public string DistributionDesc
        {
            get
            {
                return this._distribution_desc;
            }
            set
            {
                this._distribution_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("sharding_col_id")]
        public System.Nullable<int> ShardingColId
        {
            get
            {
                return this._sharding_col_id;
            }
            set
            {
                this._sharding_col_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_schema_name")]
        public string RemoteSchemaName
        {
            get
            {
                return this._remote_schema_name;
            }
            set
            {
                this._remote_schema_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_object_name")]
        public string RemoteObjectName
        {
            get
            {
                return this._remote_object_name;
            }
            set
            {
                this._remote_object_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rejected_row_location")]
        public string RejectedRowLocation
        {
            get
            {
                return this._rejected_row_location;
            }
            set
            {
                this._rejected_row_location = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_filegroups")]
    public partial class SysFilegroupCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _data_space_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_default;
        
        private System.Nullable<bool> _is_system;
        
        private System.Nullable<System.Guid> _filegroup_guid;
        
        private System.Nullable<int> _log_filegroup_id;
        
        private System.Nullable<bool> _is_read_only;
        
        private System.Nullable<bool> _is_autogrow_all_files;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_default")]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this._is_default;
            }
            set
            {
                this._is_default = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system")]
        public System.Nullable<bool> IsSystem
        {
            get
            {
                return this._is_system;
            }
            set
            {
                this._is_system = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filegroup_guid")]
        public System.Nullable<System.Guid> FilegroupGuid
        {
            get
            {
                return this._filegroup_guid;
            }
            set
            {
                this._filegroup_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("log_filegroup_id")]
        public System.Nullable<int> LogFilegroupId
        {
            get
            {
                return this._log_filegroup_id;
            }
            set
            {
                this._log_filegroup_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_read_only")]
        public System.Nullable<bool> IsReadOnly
        {
            get
            {
                return this._is_read_only;
            }
            set
            {
                this._is_read_only = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_autogrow_all_files")]
        public System.Nullable<bool> IsAutogrowAllFiles
        {
            get
            {
                return this._is_autogrow_all_files;
            }
            set
            {
                this._is_autogrow_all_files = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_filetable_system_defined_objects")]
    public partial class SysFiletableSystemDefinedObjectCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _parent_object_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_filetables")]
    public partial class SysFiletableCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<bool> _is_enabled;
        
        private string _directory_name;
        
        private System.Nullable<int> _filename_collation_id;
        
        private string _filename_collation_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_enabled")]
        public System.Nullable<bool> IsEnabled
        {
            get
            {
                return this._is_enabled;
            }
            set
            {
                this._is_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("directory_name")]
        public string DirectoryName
        {
            get
            {
                return this._directory_name;
            }
            set
            {
                this._directory_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filename_collation_id")]
        public System.Nullable<int> FilenameCollationId
        {
            get
            {
                return this._filename_collation_id;
            }
            set
            {
                this._filename_collation_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filename_collation_name")]
        public string FilenameCollationName
        {
            get
            {
                return this._filename_collation_name;
            }
            set
            {
                this._filename_collation_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_foreign_key_columns")]
    public partial class SysForeignKeyColumnCatalog
    {
        
        private System.Nullable<int> _constraint_object_id;
        
        private System.Nullable<int> _constraint_column_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private System.Nullable<int> _parent_column_id;
        
        private System.Nullable<int> _referenced_object_id;
        
        private System.Nullable<int> _referenced_column_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("constraint_object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ConstraintObjectId
        {
            get
            {
                return this._constraint_object_id;
            }
            set
            {
                this._constraint_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("constraint_column_id")]
        public System.Nullable<int> ConstraintColumnId
        {
            get
            {
                return this._constraint_column_id;
            }
            set
            {
                this._constraint_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_column_id")]
        public System.Nullable<int> ParentColumnId
        {
            get
            {
                return this._parent_column_id;
            }
            set
            {
                this._parent_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("referenced_object_id")]
        public System.Nullable<int> ReferencedObjectId
        {
            get
            {
                return this._referenced_object_id;
            }
            set
            {
                this._referenced_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("referenced_column_id")]
        public System.Nullable<int> ReferencedColumnId
        {
            get
            {
                return this._referenced_column_id;
            }
            set
            {
                this._referenced_column_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_foreign_keys")]
    public partial class SysForeignKeyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<int> _referenced_object_id;
        
        private System.Nullable<int> _key_index_id;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_not_for_replication;
        
        private System.Nullable<bool> _is_not_trusted;
        
        private System.Nullable<byte> _delete_referential_action;
        
        private string _delete_referential_action_desc;
        
        private System.Nullable<byte> _update_referential_action;
        
        private string _update_referential_action_desc;
        
        private System.Nullable<bool> _is_system_named;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("referenced_object_id")]
        public System.Nullable<int> ReferencedObjectId
        {
            get
            {
                return this._referenced_object_id;
            }
            set
            {
                this._referenced_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_index_id")]
        public System.Nullable<int> KeyIndexId
        {
            get
            {
                return this._key_index_id;
            }
            set
            {
                this._key_index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_for_replication")]
        public System.Nullable<bool> IsNotForReplication
        {
            get
            {
                return this._is_not_for_replication;
            }
            set
            {
                this._is_not_for_replication = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_trusted")]
        public System.Nullable<bool> IsNotTrusted
        {
            get
            {
                return this._is_not_trusted;
            }
            set
            {
                this._is_not_trusted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("delete_referential_action")]
        public System.Nullable<byte> DeleteReferentialAction
        {
            get
            {
                return this._delete_referential_action;
            }
            set
            {
                this._delete_referential_action = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("delete_referential_action_desc")]
        public string DeleteReferentialActionDesc
        {
            get
            {
                return this._delete_referential_action_desc;
            }
            set
            {
                this._delete_referential_action_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("update_referential_action")]
        public System.Nullable<byte> UpdateReferentialAction
        {
            get
            {
                return this._update_referential_action;
            }
            set
            {
                this._update_referential_action = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("update_referential_action_desc")]
        public string UpdateReferentialActionDesc
        {
            get
            {
                return this._update_referential_action_desc;
            }
            set
            {
                this._update_referential_action_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system_named")]
        public System.Nullable<bool> IsSystemNamed
        {
            get
            {
                return this._is_system_named;
            }
            set
            {
                this._is_system_named = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_fulltext_catalogs")]
    public partial class SysFulltextCatalogCatalog
    {
        
        private System.Nullable<int> _fulltext_catalog_id;
        
        private string _name;
        
        private string _path;
        
        private System.Nullable<bool> _is_default;
        
        private System.Nullable<bool> _is_accent_sensitivity_on;
        
        private System.Nullable<int> _data_space_id;
        
        private System.Nullable<int> _file_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<bool> _is_importing;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fulltext_catalog_id")]
        public System.Nullable<int> FulltextCatalogId
        {
            get
            {
                return this._fulltext_catalog_id;
            }
            set
            {
                this._fulltext_catalog_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path")]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_default")]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this._is_default;
            }
            set
            {
                this._is_default = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_accent_sensitivity_on")]
        public System.Nullable<bool> IsAccentSensitivityOn
        {
            get
            {
                return this._is_accent_sensitivity_on;
            }
            set
            {
                this._is_accent_sensitivity_on = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("file_id")]
        public System.Nullable<int> FileId
        {
            get
            {
                return this._file_id;
            }
            set
            {
                this._file_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_importing")]
        public System.Nullable<bool> IsImporting
        {
            get
            {
                return this._is_importing;
            }
            set
            {
                this._is_importing = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_fulltext_index_columns")]
    public partial class SysFulltextIndexColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<int> _type_column_id;
        
        private System.Nullable<int> _language_id;
        
        private System.Nullable<int> _statistical_semantics;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_column_id")]
        public System.Nullable<int> TypeColumnId
        {
            get
            {
                return this._type_column_id;
            }
            set
            {
                this._type_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("language_id")]
        public System.Nullable<int> LanguageId
        {
            get
            {
                return this._language_id;
            }
            set
            {
                this._language_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("statistical_semantics")]
        public System.Nullable<int> StatisticalSemantics
        {
            get
            {
                return this._statistical_semantics;
            }
            set
            {
                this._statistical_semantics = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_fulltext_indexes")]
    public partial class SysFulltextIndexCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _unique_index_id;
        
        private System.Nullable<int> _fulltext_catalog_id;
        
        private System.Nullable<bool> _is_enabled;
        
        private string _change_tracking_state;
        
        private string _change_tracking_state_desc;
        
        private System.Nullable<bool> _has_crawl_completed;
        
        private string _crawl_type;
        
        private string _crawl_type_desc;
        
        private System.Nullable<System.DateTime> _crawl_start_date;
        
        private System.Nullable<System.DateTime> _crawl_end_date;
        
        private byte[] _incremental_timestamp;
        
        private System.Nullable<int> _stoplist_id;
        
        private System.Nullable<int> _property_list_id;
        
        private System.Nullable<int> _data_space_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("unique_index_id")]
        public System.Nullable<int> UniqueIndexId
        {
            get
            {
                return this._unique_index_id;
            }
            set
            {
                this._unique_index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fulltext_catalog_id")]
        public System.Nullable<int> FulltextCatalogId
        {
            get
            {
                return this._fulltext_catalog_id;
            }
            set
            {
                this._fulltext_catalog_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_enabled")]
        public System.Nullable<bool> IsEnabled
        {
            get
            {
                return this._is_enabled;
            }
            set
            {
                this._is_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("change_tracking_state")]
        public string ChangeTrackingState
        {
            get
            {
                return this._change_tracking_state;
            }
            set
            {
                this._change_tracking_state = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("change_tracking_state_desc")]
        public string ChangeTrackingStateDesc
        {
            get
            {
                return this._change_tracking_state_desc;
            }
            set
            {
                this._change_tracking_state_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_crawl_completed")]
        public System.Nullable<bool> HasCrawlCompleted
        {
            get
            {
                return this._has_crawl_completed;
            }
            set
            {
                this._has_crawl_completed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crawl_type")]
        public string CrawlType
        {
            get
            {
                return this._crawl_type;
            }
            set
            {
                this._crawl_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crawl_type_desc")]
        public string CrawlTypeDesc
        {
            get
            {
                return this._crawl_type_desc;
            }
            set
            {
                this._crawl_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crawl_start_date")]
        public System.Nullable<System.DateTime> CrawlStartDate
        {
            get
            {
                return this._crawl_start_date;
            }
            set
            {
                this._crawl_start_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crawl_end_date")]
        public System.Nullable<System.DateTime> CrawlEndDate
        {
            get
            {
                return this._crawl_end_date;
            }
            set
            {
                this._crawl_end_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("incremental_timestamp")]
        public byte[] IncrementalTimestamp
        {
            get
            {
                return this._incremental_timestamp;
            }
            set
            {
                this._incremental_timestamp = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stoplist_id")]
        public System.Nullable<int> StoplistId
        {
            get
            {
                return this._stoplist_id;
            }
            set
            {
                this._stoplist_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_list_id")]
        public System.Nullable<int> PropertyListId
        {
            get
            {
                return this._property_list_id;
            }
            set
            {
                this._property_list_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_fulltext_stoplists")]
    public partial class SysFulltextStoplistCatalog
    {
        
        private System.Nullable<int> _stoplist_id;
        
        private string _name;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<int> _principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stoplist_id")]
        public System.Nullable<int> StoplistId
        {
            get
            {
                return this._stoplist_id;
            }
            set
            {
                this._stoplist_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_function_order_columns")]
    public partial class SysFunctionOrderColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _order_column_id;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<bool> _is_descending;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("order_column_id")]
        public System.Nullable<int> OrderColumnId
        {
            get
            {
                return this._order_column_id;
            }
            set
            {
                this._order_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_descending")]
        public System.Nullable<bool> IsDescending
        {
            get
            {
                return this._is_descending;
            }
            set
            {
                this._is_descending = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_hash_indexes")]
    public partial class SysHashIndexCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<byte> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_unique;
        
        private System.Nullable<int> _data_space_id;
        
        private System.Nullable<bool> _ignore_dup_key;
        
        private System.Nullable<bool> _is_primary_key;
        
        private System.Nullable<bool> _is_unique_constraint;
        
        private System.Nullable<byte> _fill_factor;
        
        private System.Nullable<bool> _is_padded;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_hypothetical;
        
        private System.Nullable<bool> _is_ignored_in_optimization;
        
        private System.Nullable<bool> _allow_row_locks;
        
        private System.Nullable<bool> _allow_page_locks;
        
        private System.Nullable<bool> _has_filter;
        
        private string _filter_definition;
        
        private System.Nullable<int> _bucket_count;
        
        private System.Nullable<bool> _auto_created;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique")]
        public System.Nullable<bool> IsUnique
        {
            get
            {
                return this._is_unique;
            }
            set
            {
                this._is_unique = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("ignore_dup_key")]
        public System.Nullable<bool> IgnoreDupKey
        {
            get
            {
                return this._ignore_dup_key;
            }
            set
            {
                this._ignore_dup_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_primary_key")]
        public System.Nullable<bool> IsPrimaryKey
        {
            get
            {
                return this._is_primary_key;
            }
            set
            {
                this._is_primary_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique_constraint")]
        public System.Nullable<bool> IsUniqueConstraint
        {
            get
            {
                return this._is_unique_constraint;
            }
            set
            {
                this._is_unique_constraint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fill_factor")]
        public System.Nullable<byte> FillFactor
        {
            get
            {
                return this._fill_factor;
            }
            set
            {
                this._fill_factor = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_padded")]
        public System.Nullable<bool> IsPadded
        {
            get
            {
                return this._is_padded;
            }
            set
            {
                this._is_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hypothetical")]
        public System.Nullable<bool> IsHypothetical
        {
            get
            {
                return this._is_hypothetical;
            }
            set
            {
                this._is_hypothetical = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ignored_in_optimization")]
        public System.Nullable<bool> IsIgnoredInOptimization
        {
            get
            {
                return this._is_ignored_in_optimization;
            }
            set
            {
                this._is_ignored_in_optimization = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_row_locks")]
        public System.Nullable<bool> AllowRowLocks
        {
            get
            {
                return this._allow_row_locks;
            }
            set
            {
                this._allow_row_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_page_locks")]
        public System.Nullable<bool> AllowPageLocks
        {
            get
            {
                return this._allow_page_locks;
            }
            set
            {
                this._allow_page_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_filter")]
        public System.Nullable<bool> HasFilter
        {
            get
            {
                return this._has_filter;
            }
            set
            {
                this._has_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filter_definition")]
        public string FilterDefinition
        {
            get
            {
                return this._filter_definition;
            }
            set
            {
                this._filter_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("bucket_count")]
        public System.Nullable<int> BucketCount
        {
            get
            {
                return this._bucket_count;
            }
            set
            {
                this._bucket_count = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("auto_created")]
        public System.Nullable<bool> AutoCreated
        {
            get
            {
                return this._auto_created;
            }
            set
            {
                this._auto_created = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_identity_columns")]
    public partial class SysIdentityColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_ansi_padded;
        
        private System.Nullable<bool> _is_rowguidcol;
        
        private System.Nullable<bool> _is_identity;
        
        private System.Nullable<bool> _is_filestream;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _is_non_sql_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_dts_replicated;
        
        private System.Nullable<bool> _is_xml_document;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private object _seed_value;
        
        private object _increment_value;
        
        private object _last_value;
        
        private System.Nullable<bool> _is_not_for_replication;
        
        private System.Nullable<bool> _is_computed;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_column_set;
        
        private System.Nullable<byte> _generated_always_type;
        
        private string _generated_always_type_desc;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        private System.Nullable<bool> _is_hidden;
        
        private System.Nullable<bool> _is_masked;
        
        private System.Nullable<int> _graph_type;
        
        private string _graph_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padded")]
        public System.Nullable<bool> IsAnsiPadded
        {
            get
            {
                return this._is_ansi_padded;
            }
            set
            {
                this._is_ansi_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_rowguidcol")]
        public System.Nullable<bool> IsRowguidcol
        {
            get
            {
                return this._is_rowguidcol;
            }
            set
            {
                this._is_rowguidcol = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_identity")]
        public System.Nullable<bool> IsIdentity
        {
            get
            {
                return this._is_identity;
            }
            set
            {
                this._is_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filestream")]
        public System.Nullable<bool> IsFilestream
        {
            get
            {
                return this._is_filestream;
            }
            set
            {
                this._is_filestream = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_non_sql_subscribed")]
        public System.Nullable<bool> IsNonSqlSubscribed
        {
            get
            {
                return this._is_non_sql_subscribed;
            }
            set
            {
                this._is_non_sql_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_dts_replicated")]
        public System.Nullable<bool> IsDtsReplicated
        {
            get
            {
                return this._is_dts_replicated;
            }
            set
            {
                this._is_dts_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object SeedValue
        {
            get
            {
                return this._seed_value;
            }
            set
            {
                this._seed_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object IncrementValue
        {
            get
            {
                return this._increment_value;
            }
            set
            {
                this._increment_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object LastValue
        {
            get
            {
                return this._last_value;
            }
            set
            {
                this._last_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_for_replication")]
        public System.Nullable<bool> IsNotForReplication
        {
            get
            {
                return this._is_not_for_replication;
            }
            set
            {
                this._is_not_for_replication = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_computed")]
        public System.Nullable<bool> IsComputed
        {
            get
            {
                return this._is_computed;
            }
            set
            {
                this._is_computed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_column_set")]
        public System.Nullable<bool> IsColumnSet
        {
            get
            {
                return this._is_column_set;
            }
            set
            {
                this._is_column_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type")]
        public System.Nullable<byte> GeneratedAlwaysType
        {
            get
            {
                return this._generated_always_type;
            }
            set
            {
                this._generated_always_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type_desc")]
        public string GeneratedAlwaysTypeDesc
        {
            get
            {
                return this._generated_always_type_desc;
            }
            set
            {
                this._generated_always_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hidden")]
        public System.Nullable<bool> IsHidden
        {
            get
            {
                return this._is_hidden;
            }
            set
            {
                this._is_hidden = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_masked")]
        public System.Nullable<bool> IsMasked
        {
            get
            {
                return this._is_masked;
            }
            set
            {
                this._is_masked = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type")]
        public System.Nullable<int> GraphType
        {
            get
            {
                return this._graph_type;
            }
            set
            {
                this._graph_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type_desc")]
        public string GraphTypeDesc
        {
            get
            {
                return this._graph_type_desc;
            }
            set
            {
                this._graph_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_index_columns")]
    public partial class SysIndexColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<int> _index_column_id;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _key_ordinal;
        
        private System.Nullable<byte> _partition_ordinal;
        
        private System.Nullable<bool> _is_descending_key;
        
        private System.Nullable<bool> _is_included_column;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_column_id")]
        public System.Nullable<int> IndexColumnId
        {
            get
            {
                return this._index_column_id;
            }
            set
            {
                this._index_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_ordinal")]
        public System.Nullable<byte> KeyOrdinal
        {
            get
            {
                return this._key_ordinal;
            }
            set
            {
                this._key_ordinal = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("partition_ordinal")]
        public System.Nullable<byte> PartitionOrdinal
        {
            get
            {
                return this._partition_ordinal;
            }
            set
            {
                this._partition_ordinal = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_descending_key")]
        public System.Nullable<bool> IsDescendingKey
        {
            get
            {
                return this._is_descending_key;
            }
            set
            {
                this._is_descending_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_included_column")]
        public System.Nullable<bool> IsIncludedColumn
        {
            get
            {
                return this._is_included_column;
            }
            set
            {
                this._is_included_column = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_indexes")]
    public partial class SysIndexCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<byte> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_unique;
        
        private System.Nullable<int> _data_space_id;
        
        private System.Nullable<bool> _ignore_dup_key;
        
        private System.Nullable<bool> _is_primary_key;
        
        private System.Nullable<bool> _is_unique_constraint;
        
        private System.Nullable<byte> _fill_factor;
        
        private System.Nullable<bool> _is_padded;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_hypothetical;
        
        private System.Nullable<bool> _is_ignored_in_optimization;
        
        private System.Nullable<bool> _allow_row_locks;
        
        private System.Nullable<bool> _allow_page_locks;
        
        private System.Nullable<bool> _has_filter;
        
        private string _filter_definition;
        
        private System.Nullable<int> _compression_delay;
        
        private System.Nullable<bool> _suppress_dup_key_messages;
        
        private System.Nullable<bool> _auto_created;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique")]
        public System.Nullable<bool> IsUnique
        {
            get
            {
                return this._is_unique;
            }
            set
            {
                this._is_unique = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("ignore_dup_key")]
        public System.Nullable<bool> IgnoreDupKey
        {
            get
            {
                return this._ignore_dup_key;
            }
            set
            {
                this._ignore_dup_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_primary_key")]
        public System.Nullable<bool> IsPrimaryKey
        {
            get
            {
                return this._is_primary_key;
            }
            set
            {
                this._is_primary_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique_constraint")]
        public System.Nullable<bool> IsUniqueConstraint
        {
            get
            {
                return this._is_unique_constraint;
            }
            set
            {
                this._is_unique_constraint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fill_factor")]
        public System.Nullable<byte> FillFactor
        {
            get
            {
                return this._fill_factor;
            }
            set
            {
                this._fill_factor = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_padded")]
        public System.Nullable<bool> IsPadded
        {
            get
            {
                return this._is_padded;
            }
            set
            {
                this._is_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hypothetical")]
        public System.Nullable<bool> IsHypothetical
        {
            get
            {
                return this._is_hypothetical;
            }
            set
            {
                this._is_hypothetical = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ignored_in_optimization")]
        public System.Nullable<bool> IsIgnoredInOptimization
        {
            get
            {
                return this._is_ignored_in_optimization;
            }
            set
            {
                this._is_ignored_in_optimization = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_row_locks")]
        public System.Nullable<bool> AllowRowLocks
        {
            get
            {
                return this._allow_row_locks;
            }
            set
            {
                this._allow_row_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_page_locks")]
        public System.Nullable<bool> AllowPageLocks
        {
            get
            {
                return this._allow_page_locks;
            }
            set
            {
                this._allow_page_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_filter")]
        public System.Nullable<bool> HasFilter
        {
            get
            {
                return this._has_filter;
            }
            set
            {
                this._has_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filter_definition")]
        public string FilterDefinition
        {
            get
            {
                return this._filter_definition;
            }
            set
            {
                this._filter_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("compression_delay")]
        public System.Nullable<int> CompressionDelay
        {
            get
            {
                return this._compression_delay;
            }
            set
            {
                this._compression_delay = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("suppress_dup_key_messages")]
        public System.Nullable<bool> SuppressDupKeyMessages
        {
            get
            {
                return this._suppress_dup_key_messages;
            }
            set
            {
                this._suppress_dup_key_messages = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("auto_created")]
        public System.Nullable<bool> AutoCreated
        {
            get
            {
                return this._auto_created;
            }
            set
            {
                this._auto_created = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_internal_tables")]
    public partial class SysInternalTableCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<byte> _internal_type;
        
        private string _internal_type_desc;
        
        private System.Nullable<int> _parent_id;
        
        private System.Nullable<int> _parent_minor_id;
        
        private System.Nullable<int> _lob_data_space_id;
        
        private System.Nullable<int> _filestream_data_space_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("internal_type")]
        public System.Nullable<byte> InternalType
        {
            get
            {
                return this._internal_type;
            }
            set
            {
                this._internal_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("internal_type_desc")]
        public string InternalTypeDesc
        {
            get
            {
                return this._internal_type_desc;
            }
            set
            {
                this._internal_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_id")]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._parent_id;
            }
            set
            {
                this._parent_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_minor_id")]
        public System.Nullable<int> ParentMinorId
        {
            get
            {
                return this._parent_minor_id;
            }
            set
            {
                this._parent_minor_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lob_data_space_id")]
        public System.Nullable<int> LobDataSpaceId
        {
            get
            {
                return this._lob_data_space_id;
            }
            set
            {
                this._lob_data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filestream_data_space_id")]
        public System.Nullable<int> FilestreamDataSpaceId
        {
            get
            {
                return this._filestream_data_space_id;
            }
            set
            {
                this._filestream_data_space_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_key_constraints")]
    public partial class SysKeyConstraintCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<int> _unique_index_id;
        
        private System.Nullable<bool> _is_system_named;
        
        private System.Nullable<bool> _is_enforced;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("unique_index_id")]
        public System.Nullable<int> UniqueIndexId
        {
            get
            {
                return this._unique_index_id;
            }
            set
            {
                this._unique_index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system_named")]
        public System.Nullable<bool> IsSystemNamed
        {
            get
            {
                return this._is_system_named;
            }
            set
            {
                this._is_system_named = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_enforced")]
        public System.Nullable<bool> IsEnforced
        {
            get
            {
                return this._is_enforced;
            }
            set
            {
                this._is_enforced = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_key_encryptions")]
    public partial class SysKeyEncryptionCatalog
    {
        
        private System.Nullable<int> _key_id;
        
        private byte[] _thumbprint;
        
        private string _crypt_type;
        
        private string _crypt_type_desc;
        
        private byte[] _crypt_property;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> KeyId
        {
            get
            {
                return this._key_id;
            }
            set
            {
                this._key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("thumbprint")]
        public byte[] Thumbprint
        {
            get
            {
                return this._thumbprint;
            }
            set
            {
                this._thumbprint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_type")]
        public string CryptType
        {
            get
            {
                return this._crypt_type;
            }
            set
            {
                this._crypt_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_type_desc")]
        public string CryptTypeDesc
        {
            get
            {
                return this._crypt_type_desc;
            }
            set
            {
                this._crypt_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("crypt_property")]
        public byte[] CryptProperty
        {
            get
            {
                return this._crypt_property;
            }
            set
            {
                this._crypt_property = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_masked_columns")]
    public partial class SysMaskedColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _column_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_ansi_padded;
        
        private System.Nullable<bool> _is_rowguidcol;
        
        private System.Nullable<bool> _is_identity;
        
        private System.Nullable<bool> _is_filestream;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _is_non_sql_subscribed;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_dts_replicated;
        
        private System.Nullable<bool> _is_xml_document;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private string _definition;
        
        private System.Nullable<bool> _uses_database_collation;
        
        private System.Nullable<bool> _is_persisted;
        
        private System.Nullable<bool> _is_computed;
        
        private System.Nullable<bool> _is_sparse;
        
        private System.Nullable<bool> _is_column_set;
        
        private System.Nullable<byte> _generated_always_type;
        
        private string _generated_always_type_desc;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        private System.Nullable<bool> _is_hidden;
        
        private System.Nullable<bool> _is_masked;
        
        private string _masking_function;
        
        private System.Nullable<int> _graph_type;
        
        private string _graph_type_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ansi_padded")]
        public System.Nullable<bool> IsAnsiPadded
        {
            get
            {
                return this._is_ansi_padded;
            }
            set
            {
                this._is_ansi_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_rowguidcol")]
        public System.Nullable<bool> IsRowguidcol
        {
            get
            {
                return this._is_rowguidcol;
            }
            set
            {
                this._is_rowguidcol = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_identity")]
        public System.Nullable<bool> IsIdentity
        {
            get
            {
                return this._is_identity;
            }
            set
            {
                this._is_identity = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filestream")]
        public System.Nullable<bool> IsFilestream
        {
            get
            {
                return this._is_filestream;
            }
            set
            {
                this._is_filestream = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_non_sql_subscribed")]
        public System.Nullable<bool> IsNonSqlSubscribed
        {
            get
            {
                return this._is_non_sql_subscribed;
            }
            set
            {
                this._is_non_sql_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_dts_replicated")]
        public System.Nullable<bool> IsDtsReplicated
        {
            get
            {
                return this._is_dts_replicated;
            }
            set
            {
                this._is_dts_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_database_collation")]
        public System.Nullable<bool> UsesDatabaseCollation
        {
            get
            {
                return this._uses_database_collation;
            }
            set
            {
                this._uses_database_collation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_persisted")]
        public System.Nullable<bool> IsPersisted
        {
            get
            {
                return this._is_persisted;
            }
            set
            {
                this._is_persisted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_computed")]
        public System.Nullable<bool> IsComputed
        {
            get
            {
                return this._is_computed;
            }
            set
            {
                this._is_computed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sparse")]
        public System.Nullable<bool> IsSparse
        {
            get
            {
                return this._is_sparse;
            }
            set
            {
                this._is_sparse = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_column_set")]
        public System.Nullable<bool> IsColumnSet
        {
            get
            {
                return this._is_column_set;
            }
            set
            {
                this._is_column_set = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type")]
        public System.Nullable<byte> GeneratedAlwaysType
        {
            get
            {
                return this._generated_always_type;
            }
            set
            {
                this._generated_always_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("generated_always_type_desc")]
        public string GeneratedAlwaysTypeDesc
        {
            get
            {
                return this._generated_always_type_desc;
            }
            set
            {
                this._generated_always_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hidden")]
        public System.Nullable<bool> IsHidden
        {
            get
            {
                return this._is_hidden;
            }
            set
            {
                this._is_hidden = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_masked")]
        public System.Nullable<bool> IsMasked
        {
            get
            {
                return this._is_masked;
            }
            set
            {
                this._is_masked = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("masking_function")]
        public string MaskingFunction
        {
            get
            {
                return this._masking_function;
            }
            set
            {
                this._masking_function = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type")]
        public System.Nullable<int> GraphType
        {
            get
            {
                return this._graph_type;
            }
            set
            {
                this._graph_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("graph_type_desc")]
        public string GraphTypeDesc
        {
            get
            {
                return this._graph_type_desc;
            }
            set
            {
                this._graph_type_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_numbered_procedure_parameters")]
    public partial class SysNumberedProcedureParameterCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<short> _procedure_number;
        
        private string _name;
        
        private System.Nullable<int> _parameter_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private System.Nullable<bool> _is_output;
        
        private System.Nullable<bool> _is_cursor_ref;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("procedure_number")]
        public System.Nullable<short> ProcedureNumber
        {
            get
            {
                return this._procedure_number;
            }
            set
            {
                this._procedure_number = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parameter_id")]
        public System.Nullable<int> ParameterId
        {
            get
            {
                return this._parameter_id;
            }
            set
            {
                this._parameter_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_output")]
        public System.Nullable<bool> IsOutput
        {
            get
            {
                return this._is_output;
            }
            set
            {
                this._is_output = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cursor_ref")]
        public System.Nullable<bool> IsCursorRef
        {
            get
            {
                return this._is_cursor_ref;
            }
            set
            {
                this._is_cursor_ref = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_numbered_procedures")]
    public partial class SysNumberedProcedureCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<short> _procedure_number;
        
        private string _definition;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("procedure_number")]
        public System.Nullable<short> ProcedureNumber
        {
            get
            {
                return this._procedure_number;
            }
            set
            {
                this._procedure_number = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_objects")]
    public partial class SysObjectCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_parameters")]
    public partial class SysParameterCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _parameter_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private System.Nullable<bool> _is_output;
        
        private System.Nullable<bool> _is_cursor_ref;
        
        private System.Nullable<bool> _has_default_value;
        
        private System.Nullable<bool> _is_xml_document;
        
        private object _default_value;
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<bool> _is_readonly;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<int> _encryption_type;
        
        private string _encryption_type_desc;
        
        private string _encryption_algorithm_name;
        
        private System.Nullable<int> _column_encryption_key_id;
        
        private string _column_encryption_key_database_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parameter_id")]
        public System.Nullable<int> ParameterId
        {
            get
            {
                return this._parameter_id;
            }
            set
            {
                this._parameter_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_output")]
        public System.Nullable<bool> IsOutput
        {
            get
            {
                return this._is_output;
            }
            set
            {
                this._is_output = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cursor_ref")]
        public System.Nullable<bool> IsCursorRef
        {
            get
            {
                return this._is_cursor_ref;
            }
            set
            {
                this._is_cursor_ref = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_default_value")]
        public System.Nullable<bool> HasDefaultValue
        {
            get
            {
                return this._has_default_value;
            }
            set
            {
                this._has_default_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xml_document")]
        public System.Nullable<bool> IsXmlDocument
        {
            get
            {
                return this._is_xml_document;
            }
            set
            {
                this._is_xml_document = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object DefaultValue
        {
            get
            {
                return this._default_value;
            }
            set
            {
                this._default_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_readonly")]
        public System.Nullable<bool> IsReadonly
        {
            get
            {
                return this._is_readonly;
            }
            set
            {
                this._is_readonly = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type")]
        public System.Nullable<int> EncryptionType
        {
            get
            {
                return this._encryption_type;
            }
            set
            {
                this._encryption_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_type_desc")]
        public string EncryptionTypeDesc
        {
            get
            {
                return this._encryption_type_desc;
            }
            set
            {
                this._encryption_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("encryption_algorithm_name")]
        public string EncryptionAlgorithmName
        {
            get
            {
                return this._encryption_algorithm_name;
            }
            set
            {
                this._encryption_algorithm_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_id")]
        public System.Nullable<int> ColumnEncryptionKeyId
        {
            get
            {
                return this._column_encryption_key_id;
            }
            set
            {
                this._column_encryption_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_encryption_key_database_name")]
        public string ColumnEncryptionKeyDatabaseName
        {
            get
            {
                return this._column_encryption_key_database_name;
            }
            set
            {
                this._column_encryption_key_database_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_partition_functions")]
    public partial class SysPartitionFunctionCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _function_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<int> _fanout;
        
        private System.Nullable<bool> _boundary_value_on_right;
        
        private System.Nullable<bool> _is_system;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("function_id")]
        public System.Nullable<int> FunctionId
        {
            get
            {
                return this._function_id;
            }
            set
            {
                this._function_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fanout")]
        public System.Nullable<int> Fanout
        {
            get
            {
                return this._fanout;
            }
            set
            {
                this._fanout = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("boundary_value_on_right")]
        public System.Nullable<bool> BoundaryValueOnRight
        {
            get
            {
                return this._boundary_value_on_right;
            }
            set
            {
                this._boundary_value_on_right = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system")]
        public System.Nullable<bool> IsSystem
        {
            get
            {
                return this._is_system;
            }
            set
            {
                this._is_system = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_partition_parameters")]
    public partial class SysPartitionParameterCatalog
    {
        
        private System.Nullable<int> _function_id;
        
        private System.Nullable<int> _parameter_id;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<int> _user_type_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("function_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> FunctionId
        {
            get
            {
                return this._function_id;
            }
            set
            {
                this._function_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parameter_id")]
        public System.Nullable<int> ParameterId
        {
            get
            {
                return this._parameter_id;
            }
            set
            {
                this._parameter_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_partition_range_values")]
    public partial class SysPartitionRangeValueCatalog
    {
        
        private System.Nullable<int> _function_id;
        
        private System.Nullable<int> _boundary_id;
        
        private System.Nullable<int> _parameter_id;
        
        private object _value;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("function_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> FunctionId
        {
            get
            {
                return this._function_id;
            }
            set
            {
                this._function_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("boundary_id")]
        public System.Nullable<int> BoundaryId
        {
            get
            {
                return this._boundary_id;
            }
            set
            {
                this._boundary_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parameter_id")]
        public System.Nullable<int> ParameterId
        {
            get
            {
                return this._parameter_id;
            }
            set
            {
                this._parameter_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_partition_schemes")]
    public partial class SysPartitionSchemeCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _data_space_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_default;
        
        private System.Nullable<bool> _is_system;
        
        private System.Nullable<int> _function_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_default")]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this._is_default;
            }
            set
            {
                this._is_default = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_system")]
        public System.Nullable<bool> IsSystem
        {
            get
            {
                return this._is_system;
            }
            set
            {
                this._is_system = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("function_id")]
        public System.Nullable<int> FunctionId
        {
            get
            {
                return this._function_id;
            }
            set
            {
                this._function_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_partitions")]
    public partial class SysPartitionCatalog
    {
        
        private System.Nullable<long> _partition_id;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<int> _partition_number;
        
        private System.Nullable<long> _hobt_id;
        
        private System.Nullable<long> _rows;
        
        private System.Nullable<short> _filestream_filegroup_id;
        
        private System.Nullable<byte> _data_compression;
        
        private string _data_compression_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("partition_id")]
        public System.Nullable<long> PartitionId
        {
            get
            {
                return this._partition_id;
            }
            set
            {
                this._partition_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("partition_number")]
        public System.Nullable<int> PartitionNumber
        {
            get
            {
                return this._partition_number;
            }
            set
            {
                this._partition_number = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("hobt_id")]
        public System.Nullable<long> HobtId
        {
            get
            {
                return this._hobt_id;
            }
            set
            {
                this._hobt_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rows")]
        public System.Nullable<long> Rows
        {
            get
            {
                return this._rows;
            }
            set
            {
                this._rows = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filestream_filegroup_id")]
        public System.Nullable<short> FilestreamFilegroupId
        {
            get
            {
                return this._filestream_filegroup_id;
            }
            set
            {
                this._filestream_filegroup_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_compression")]
        public System.Nullable<byte> DataCompression
        {
            get
            {
                return this._data_compression;
            }
            set
            {
                this._data_compression = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_compression_desc")]
        public string DataCompressionDesc
        {
            get
            {
                return this._data_compression_desc;
            }
            set
            {
                this._data_compression_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_periods")]
    public partial class SysPeriodCatalog
    {
        
        private string _name;
        
        private System.Nullable<byte> _period_type;
        
        private string _period_type_desc;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _start_column_id;
        
        private System.Nullable<int> _end_column_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("period_type")]
        public System.Nullable<byte> PeriodType
        {
            get
            {
                return this._period_type;
            }
            set
            {
                this._period_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("period_type_desc")]
        public string PeriodTypeDesc
        {
            get
            {
                return this._period_type_desc;
            }
            set
            {
                this._period_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("start_column_id")]
        public System.Nullable<int> StartColumnId
        {
            get
            {
                return this._start_column_id;
            }
            set
            {
                this._start_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("end_column_id")]
        public System.Nullable<int> EndColumnId
        {
            get
            {
                return this._end_column_id;
            }
            set
            {
                this._end_column_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_procedures")]
    public partial class SysProcedureCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<bool> _is_auto_executed;
        
        private System.Nullable<bool> _is_execution_replicated;
        
        private System.Nullable<bool> _is_repl_serializable_only;
        
        private System.Nullable<bool> _skips_repl_constraints;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_auto_executed")]
        public System.Nullable<bool> IsAutoExecuted
        {
            get
            {
                return this._is_auto_executed;
            }
            set
            {
                this._is_auto_executed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_execution_replicated")]
        public System.Nullable<bool> IsExecutionReplicated
        {
            get
            {
                return this._is_execution_replicated;
            }
            set
            {
                this._is_execution_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_repl_serializable_only")]
        public System.Nullable<bool> IsReplSerializableOnly
        {
            get
            {
                return this._is_repl_serializable_only;
            }
            set
            {
                this._is_repl_serializable_only = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("skips_repl_constraints")]
        public System.Nullable<bool> SkipsReplConstraints
        {
            get
            {
                return this._skips_repl_constraints;
            }
            set
            {
                this._skips_repl_constraints = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_registered_search_properties")]
    public partial class SysRegisteredSearchPropertyCatalog
    {
        
        private System.Nullable<int> _property_list_id;
        
        private System.Nullable<int> _property_id;
        
        private string _property_name;
        
        private System.Nullable<System.Guid> _property_set_guid;
        
        private System.Nullable<int> _property_int_id;
        
        private string _property_description;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_list_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> PropertyListId
        {
            get
            {
                return this._property_list_id;
            }
            set
            {
                this._property_list_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_id")]
        public System.Nullable<int> PropertyId
        {
            get
            {
                return this._property_id;
            }
            set
            {
                this._property_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_name")]
        public string PropertyName
        {
            get
            {
                return this._property_name;
            }
            set
            {
                this._property_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_set_guid")]
        public System.Nullable<System.Guid> PropertySetGuid
        {
            get
            {
                return this._property_set_guid;
            }
            set
            {
                this._property_set_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_int_id")]
        public System.Nullable<int> PropertyIntId
        {
            get
            {
                return this._property_int_id;
            }
            set
            {
                this._property_int_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_description")]
        public string PropertyDescription
        {
            get
            {
                return this._property_description;
            }
            set
            {
                this._property_description = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_registered_search_property_lists")]
    public partial class SysRegisteredSearchPropertyListCatalog
    {
        
        private System.Nullable<int> _property_list_id;
        
        private string _name;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<int> _principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("property_list_id")]
        public System.Nullable<int> PropertyListId
        {
            get
            {
                return this._property_list_id;
            }
            set
            {
                this._property_list_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_remote_service_bindings")]
    public partial class SysRemoteServiceBindingCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _remote_service_binding_id;
        
        private System.Nullable<int> _principal_id;
        
        private string _remote_service_name;
        
        private System.Nullable<int> _service_contract_id;
        
        private System.Nullable<int> _remote_principal_id;
        
        private System.Nullable<bool> _is_anonymous_on;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_service_binding_id")]
        public System.Nullable<int> RemoteServiceBindingId
        {
            get
            {
                return this._remote_service_binding_id;
            }
            set
            {
                this._remote_service_binding_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_service_name")]
        public string RemoteServiceName
        {
            get
            {
                return this._remote_service_name;
            }
            set
            {
                this._remote_service_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_contract_id")]
        public System.Nullable<int> ServiceContractId
        {
            get
            {
                return this._service_contract_id;
            }
            set
            {
                this._service_contract_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_principal_id")]
        public System.Nullable<int> RemotePrincipalId
        {
            get
            {
                return this._remote_principal_id;
            }
            set
            {
                this._remote_principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_anonymous_on")]
        public System.Nullable<bool> IsAnonymousOn
        {
            get
            {
                return this._is_anonymous_on;
            }
            set
            {
                this._is_anonymous_on = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_routes")]
    public partial class SysRouteCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _route_id;
        
        private System.Nullable<int> _principal_id;
        
        private string _remote_service_name;
        
        private string _broker_instance;
        
        private System.Nullable<System.DateTime> _lifetime;
        
        private string _address;
        
        private string _mirror_address;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("route_id")]
        public System.Nullable<int> RouteId
        {
            get
            {
                return this._route_id;
            }
            set
            {
                this._route_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("remote_service_name")]
        public string RemoteServiceName
        {
            get
            {
                return this._remote_service_name;
            }
            set
            {
                this._remote_service_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("broker_instance")]
        public string BrokerInstance
        {
            get
            {
                return this._broker_instance;
            }
            set
            {
                this._broker_instance = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lifetime")]
        public System.Nullable<System.DateTime> Lifetime
        {
            get
            {
                return this._lifetime;
            }
            set
            {
                this._lifetime = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("address")]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                this._address = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("mirror_address")]
        public string MirrorAddress
        {
            get
            {
                return this._mirror_address;
            }
            set
            {
                this._mirror_address = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_schemas")]
    public partial class SysSchemaCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_security_policies")]
    public partial class SysSecurityPolicyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_enabled;
        
        private System.Nullable<bool> _is_not_for_replication;
        
        private System.Nullable<bool> _uses_database_collation;
        
        private System.Nullable<bool> _is_schema_bound;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_enabled")]
        public System.Nullable<bool> IsEnabled
        {
            get
            {
                return this._is_enabled;
            }
            set
            {
                this._is_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_for_replication")]
        public System.Nullable<bool> IsNotForReplication
        {
            get
            {
                return this._is_not_for_replication;
            }
            set
            {
                this._is_not_for_replication = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_database_collation")]
        public System.Nullable<bool> UsesDatabaseCollation
        {
            get
            {
                return this._uses_database_collation;
            }
            set
            {
                this._uses_database_collation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_bound")]
        public System.Nullable<bool> IsSchemaBound
        {
            get
            {
                return this._is_schema_bound;
            }
            set
            {
                this._is_schema_bound = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_security_predicates")]
    public partial class SysSecurityPredicateCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _security_predicate_id;
        
        private System.Nullable<int> _target_object_id;
        
        private string _predicate_definition;
        
        private System.Nullable<int> _predicate_type;
        
        private string _predicate_type_desc;
        
        private System.Nullable<int> _operation;
        
        private string _operation_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("security_predicate_id")]
        public System.Nullable<int> SecurityPredicateId
        {
            get
            {
                return this._security_predicate_id;
            }
            set
            {
                this._security_predicate_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("target_object_id")]
        public System.Nullable<int> TargetObjectId
        {
            get
            {
                return this._target_object_id;
            }
            set
            {
                this._target_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("predicate_definition")]
        public string PredicateDefinition
        {
            get
            {
                return this._predicate_definition;
            }
            set
            {
                this._predicate_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("predicate_type")]
        public System.Nullable<int> PredicateType
        {
            get
            {
                return this._predicate_type;
            }
            set
            {
                this._predicate_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("predicate_type_desc")]
        public string PredicateTypeDesc
        {
            get
            {
                return this._predicate_type_desc;
            }
            set
            {
                this._predicate_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("operation")]
        public System.Nullable<int> Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                this._operation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("operation_desc")]
        public string OperationDesc
        {
            get
            {
                return this._operation_desc;
            }
            set
            {
                this._operation_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_selective_xml_index_namespaces")]
    public partial class SysSelectiveXmlIndexNamespaceCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<bool> _is_default_uri;
        
        private string _uri;
        
        private string _prefix;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_default_uri")]
        public System.Nullable<bool> IsDefaultUri
        {
            get
            {
                return this._is_default_uri;
            }
            set
            {
                this._is_default_uri = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uri")]
        public string Uri
        {
            get
            {
                return this._uri;
            }
            set
            {
                this._uri = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("prefix")]
        public string Prefix
        {
            get
            {
                return this._prefix;
            }
            set
            {
                this._prefix = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_selective_xml_index_paths")]
    public partial class SysSelectiveXmlIndexPathCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<int> _path_id;
        
        private string _path;
        
        private string _name;
        
        private System.Nullable<byte> _path_type;
        
        private string _path_type_desc;
        
        private System.Nullable<int> _xml_component_id;
        
        private string _xquery_type_description;
        
        private System.Nullable<bool> _is_xquery_type_inferred;
        
        private System.Nullable<int> _xquery_max_length;
        
        private System.Nullable<bool> _is_xquery_max_length_inferred;
        
        private System.Nullable<bool> _is_node;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<byte> _user_type_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_singleton;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path_id")]
        public System.Nullable<int> PathId
        {
            get
            {
                return this._path_id;
            }
            set
            {
                this._path_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path")]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path_type")]
        public System.Nullable<byte> PathType
        {
            get
            {
                return this._path_type;
            }
            set
            {
                this._path_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path_type_desc")]
        public string PathTypeDesc
        {
            get
            {
                return this._path_type_desc;
            }
            set
            {
                this._path_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_component_id")]
        public System.Nullable<int> XmlComponentId
        {
            get
            {
                return this._xml_component_id;
            }
            set
            {
                this._xml_component_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xquery_type_description")]
        public string XqueryTypeDescription
        {
            get
            {
                return this._xquery_type_description;
            }
            set
            {
                this._xquery_type_description = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xquery_type_inferred")]
        public System.Nullable<bool> IsXqueryTypeInferred
        {
            get
            {
                return this._is_xquery_type_inferred;
            }
            set
            {
                this._is_xquery_type_inferred = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xquery_max_length")]
        public System.Nullable<int> XqueryMaxLength
        {
            get
            {
                return this._xquery_max_length;
            }
            set
            {
                this._xquery_max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_xquery_max_length_inferred")]
        public System.Nullable<bool> IsXqueryMaxLengthInferred
        {
            get
            {
                return this._is_xquery_max_length_inferred;
            }
            set
            {
                this._is_xquery_max_length_inferred = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_node")]
        public System.Nullable<bool> IsNode
        {
            get
            {
                return this._is_node;
            }
            set
            {
                this._is_node = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<byte> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_singleton")]
        public System.Nullable<bool> IsSingleton
        {
            get
            {
                return this._is_singleton;
            }
            set
            {
                this._is_singleton = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_sequences")]
    public partial class SysSequenceCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private object _start_value;
        
        private object _increment;
        
        private object _minimum_value;
        
        private object _maximum_value;
        
        private System.Nullable<bool> _is_cycling;
        
        private System.Nullable<bool> _is_cached;
        
        private System.Nullable<int> _cache_size;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private object _current_value;
        
        private System.Nullable<bool> _is_exhausted;
        
        private object _last_used_value;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object StartValue
        {
            get
            {
                return this._start_value;
            }
            set
            {
                this._start_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object Increment
        {
            get
            {
                return this._increment;
            }
            set
            {
                this._increment = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object MinimumValue
        {
            get
            {
                return this._minimum_value;
            }
            set
            {
                this._minimum_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object MaximumValue
        {
            get
            {
                return this._maximum_value;
            }
            set
            {
                this._maximum_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cycling")]
        public System.Nullable<bool> IsCycling
        {
            get
            {
                return this._is_cycling;
            }
            set
            {
                this._is_cycling = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_cached")]
        public System.Nullable<bool> IsCached
        {
            get
            {
                return this._is_cached;
            }
            set
            {
                this._is_cached = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cache_size")]
        public System.Nullable<int> CacheSize
        {
            get
            {
                return this._cache_size;
            }
            set
            {
                this._cache_size = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object CurrentValue
        {
            get
            {
                return this._current_value;
            }
            set
            {
                this._current_value = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_exhausted")]
        public System.Nullable<bool> IsExhausted
        {
            get
            {
                return this._is_exhausted;
            }
            set
            {
                this._is_exhausted = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object LastUsedValue
        {
            get
            {
                return this._last_used_value;
            }
            set
            {
                this._last_used_value = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_service_contract_message_usages")]
    public partial class SysServiceContractMessageUsageCatalog
    {
        
        private System.Nullable<int> _service_contract_id;
        
        private System.Nullable<int> _message_type_id;
        
        private System.Nullable<bool> _is_sent_by_initiator;
        
        private System.Nullable<bool> _is_sent_by_target;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_contract_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ServiceContractId
        {
            get
            {
                return this._service_contract_id;
            }
            set
            {
                this._service_contract_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("message_type_id")]
        public System.Nullable<int> MessageTypeId
        {
            get
            {
                return this._message_type_id;
            }
            set
            {
                this._message_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sent_by_initiator")]
        public System.Nullable<bool> IsSentByInitiator
        {
            get
            {
                return this._is_sent_by_initiator;
            }
            set
            {
                this._is_sent_by_initiator = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sent_by_target")]
        public System.Nullable<bool> IsSentByTarget
        {
            get
            {
                return this._is_sent_by_target;
            }
            set
            {
                this._is_sent_by_target = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_service_contract_usages")]
    public partial class SysServiceContractUsageCatalog
    {
        
        private System.Nullable<int> _service_id;
        
        private System.Nullable<int> _service_contract_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ServiceId
        {
            get
            {
                return this._service_id;
            }
            set
            {
                this._service_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_contract_id")]
        public System.Nullable<int> ServiceContractId
        {
            get
            {
                return this._service_contract_id;
            }
            set
            {
                this._service_contract_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_service_contracts")]
    public partial class SysServiceContractCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _service_contract_id;
        
        private System.Nullable<int> _principal_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_contract_id")]
        public System.Nullable<int> ServiceContractId
        {
            get
            {
                return this._service_contract_id;
            }
            set
            {
                this._service_contract_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_service_message_types")]
    public partial class SysServiceMessageTypeCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _message_type_id;
        
        private System.Nullable<int> _principal_id;
        
        private string _validation;
        
        private string _validation_desc;
        
        private System.Nullable<int> _xml_collection_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("message_type_id")]
        public System.Nullable<int> MessageTypeId
        {
            get
            {
                return this._message_type_id;
            }
            set
            {
                this._message_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("validation")]
        public string Validation
        {
            get
            {
                return this._validation;
            }
            set
            {
                this._validation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("validation_desc")]
        public string ValidationDesc
        {
            get
            {
                return this._validation_desc;
            }
            set
            {
                this._validation_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_service_queues")]
    public partial class SysServiceQueueCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<short> _max_readers;
        
        private string _activation_procedure;
        
        private System.Nullable<int> _execute_as_principal_id;
        
        private System.Nullable<bool> _is_activation_enabled;
        
        private System.Nullable<bool> _is_receive_enabled;
        
        private System.Nullable<bool> _is_enqueue_enabled;
        
        private System.Nullable<bool> _is_retention_enabled;
        
        private System.Nullable<bool> _is_poison_message_handling_enabled;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_readers")]
        public System.Nullable<short> MaxReaders
        {
            get
            {
                return this._max_readers;
            }
            set
            {
                this._max_readers = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("activation_procedure")]
        public string ActivationProcedure
        {
            get
            {
                return this._activation_procedure;
            }
            set
            {
                this._activation_procedure = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("execute_as_principal_id")]
        public System.Nullable<int> ExecuteAsPrincipalId
        {
            get
            {
                return this._execute_as_principal_id;
            }
            set
            {
                this._execute_as_principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_activation_enabled")]
        public System.Nullable<bool> IsActivationEnabled
        {
            get
            {
                return this._is_activation_enabled;
            }
            set
            {
                this._is_activation_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_receive_enabled")]
        public System.Nullable<bool> IsReceiveEnabled
        {
            get
            {
                return this._is_receive_enabled;
            }
            set
            {
                this._is_receive_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_enqueue_enabled")]
        public System.Nullable<bool> IsEnqueueEnabled
        {
            get
            {
                return this._is_enqueue_enabled;
            }
            set
            {
                this._is_enqueue_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_retention_enabled")]
        public System.Nullable<bool> IsRetentionEnabled
        {
            get
            {
                return this._is_retention_enabled;
            }
            set
            {
                this._is_retention_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_poison_message_handling_enabled")]
        public System.Nullable<bool> IsPoisonMessageHandlingEnabled
        {
            get
            {
                return this._is_poison_message_handling_enabled;
            }
            set
            {
                this._is_poison_message_handling_enabled = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_services")]
    public partial class SysServiceCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _service_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _service_queue_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_id")]
        public System.Nullable<int> ServiceId
        {
            get
            {
                return this._service_id;
            }
            set
            {
                this._service_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("service_queue_id")]
        public System.Nullable<int> ServiceQueueId
        {
            get
            {
                return this._service_queue_id;
            }
            set
            {
                this._service_queue_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_spatial_index_tessellations")]
    public partial class SysSpatialIndexTessellationCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _index_id;
        
        private string _tessellation_scheme;
        
        private System.Nullable<double> _bounding_box_xmin;
        
        private System.Nullable<double> _bounding_box_ymin;
        
        private System.Nullable<double> _bounding_box_xmax;
        
        private System.Nullable<double> _bounding_box_ymax;
        
        private System.Nullable<short> _level_1_grid;
        
        private string _level_1_grid_desc;
        
        private System.Nullable<short> _level_2_grid;
        
        private string _level_2_grid_desc;
        
        private System.Nullable<short> _level_3_grid;
        
        private string _level_3_grid_desc;
        
        private System.Nullable<short> _level_4_grid;
        
        private string _level_4_grid_desc;
        
        private System.Nullable<int> _cells_per_object;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("tessellation_scheme")]
        public string TessellationScheme
        {
            get
            {
                return this._tessellation_scheme;
            }
            set
            {
                this._tessellation_scheme = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("bounding_box_xmin")]
        public System.Nullable<double> BoundingBoxXmin
        {
            get
            {
                return this._bounding_box_xmin;
            }
            set
            {
                this._bounding_box_xmin = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("bounding_box_ymin")]
        public System.Nullable<double> BoundingBoxYmin
        {
            get
            {
                return this._bounding_box_ymin;
            }
            set
            {
                this._bounding_box_ymin = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("bounding_box_xmax")]
        public System.Nullable<double> BoundingBoxXmax
        {
            get
            {
                return this._bounding_box_xmax;
            }
            set
            {
                this._bounding_box_xmax = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("bounding_box_ymax")]
        public System.Nullable<double> BoundingBoxYmax
        {
            get
            {
                return this._bounding_box_ymax;
            }
            set
            {
                this._bounding_box_ymax = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_1_grid")]
        public System.Nullable<short> Level1Grid
        {
            get
            {
                return this._level_1_grid;
            }
            set
            {
                this._level_1_grid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_1_grid_desc")]
        public string Level1GridDesc
        {
            get
            {
                return this._level_1_grid_desc;
            }
            set
            {
                this._level_1_grid_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_2_grid")]
        public System.Nullable<short> Level2Grid
        {
            get
            {
                return this._level_2_grid;
            }
            set
            {
                this._level_2_grid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_2_grid_desc")]
        public string Level2GridDesc
        {
            get
            {
                return this._level_2_grid_desc;
            }
            set
            {
                this._level_2_grid_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_3_grid")]
        public System.Nullable<short> Level3Grid
        {
            get
            {
                return this._level_3_grid;
            }
            set
            {
                this._level_3_grid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_3_grid_desc")]
        public string Level3GridDesc
        {
            get
            {
                return this._level_3_grid_desc;
            }
            set
            {
                this._level_3_grid_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_4_grid")]
        public System.Nullable<short> Level4Grid
        {
            get
            {
                return this._level_4_grid;
            }
            set
            {
                this._level_4_grid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("level_4_grid_desc")]
        public string Level4GridDesc
        {
            get
            {
                return this._level_4_grid_desc;
            }
            set
            {
                this._level_4_grid_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cells_per_object")]
        public System.Nullable<int> CellsPerObject
        {
            get
            {
                return this._cells_per_object;
            }
            set
            {
                this._cells_per_object = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_spatial_indexes")]
    public partial class SysSpatialIndexCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<byte> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_unique;
        
        private System.Nullable<int> _data_space_id;
        
        private System.Nullable<bool> _ignore_dup_key;
        
        private System.Nullable<bool> _is_primary_key;
        
        private System.Nullable<bool> _is_unique_constraint;
        
        private System.Nullable<byte> _fill_factor;
        
        private System.Nullable<bool> _is_padded;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_hypothetical;
        
        private System.Nullable<bool> _is_ignored_in_optimization;
        
        private System.Nullable<bool> _allow_row_locks;
        
        private System.Nullable<bool> _allow_page_locks;
        
        private System.Nullable<int> _spatial_index_type;
        
        private string _spatial_index_type_desc;
        
        private string _tessellation_scheme;
        
        private System.Nullable<bool> _has_filter;
        
        private string _filter_definition;
        
        private System.Nullable<bool> _auto_created;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique")]
        public System.Nullable<bool> IsUnique
        {
            get
            {
                return this._is_unique;
            }
            set
            {
                this._is_unique = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("ignore_dup_key")]
        public System.Nullable<bool> IgnoreDupKey
        {
            get
            {
                return this._ignore_dup_key;
            }
            set
            {
                this._ignore_dup_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_primary_key")]
        public System.Nullable<bool> IsPrimaryKey
        {
            get
            {
                return this._is_primary_key;
            }
            set
            {
                this._is_primary_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique_constraint")]
        public System.Nullable<bool> IsUniqueConstraint
        {
            get
            {
                return this._is_unique_constraint;
            }
            set
            {
                this._is_unique_constraint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fill_factor")]
        public System.Nullable<byte> FillFactor
        {
            get
            {
                return this._fill_factor;
            }
            set
            {
                this._fill_factor = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_padded")]
        public System.Nullable<bool> IsPadded
        {
            get
            {
                return this._is_padded;
            }
            set
            {
                this._is_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hypothetical")]
        public System.Nullable<bool> IsHypothetical
        {
            get
            {
                return this._is_hypothetical;
            }
            set
            {
                this._is_hypothetical = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ignored_in_optimization")]
        public System.Nullable<bool> IsIgnoredInOptimization
        {
            get
            {
                return this._is_ignored_in_optimization;
            }
            set
            {
                this._is_ignored_in_optimization = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_row_locks")]
        public System.Nullable<bool> AllowRowLocks
        {
            get
            {
                return this._allow_row_locks;
            }
            set
            {
                this._allow_row_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_page_locks")]
        public System.Nullable<bool> AllowPageLocks
        {
            get
            {
                return this._allow_page_locks;
            }
            set
            {
                this._allow_page_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("spatial_index_type")]
        public System.Nullable<int> SpatialIndexType
        {
            get
            {
                return this._spatial_index_type;
            }
            set
            {
                this._spatial_index_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("spatial_index_type_desc")]
        public string SpatialIndexTypeDesc
        {
            get
            {
                return this._spatial_index_type_desc;
            }
            set
            {
                this._spatial_index_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("tessellation_scheme")]
        public string TessellationScheme
        {
            get
            {
                return this._tessellation_scheme;
            }
            set
            {
                this._tessellation_scheme = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_filter")]
        public System.Nullable<bool> HasFilter
        {
            get
            {
                return this._has_filter;
            }
            set
            {
                this._has_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filter_definition")]
        public string FilterDefinition
        {
            get
            {
                return this._filter_definition;
            }
            set
            {
                this._filter_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("auto_created")]
        public System.Nullable<bool> AutoCreated
        {
            get
            {
                return this._auto_created;
            }
            set
            {
                this._auto_created = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_sql_modules")]
    public partial class SysSqlModuleCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _definition;
        
        private System.Nullable<bool> _uses_ansi_nulls;
        
        private System.Nullable<bool> _uses_quoted_identifier;
        
        private System.Nullable<bool> _is_schema_bound;
        
        private System.Nullable<bool> _uses_database_collation;
        
        private System.Nullable<bool> _is_recompiled;
        
        private System.Nullable<bool> _null_on_null_input;
        
        private System.Nullable<int> _execute_as_principal_id;
        
        private System.Nullable<bool> _uses_native_compilation;
        
        private System.Nullable<bool> _inline_type;
        
        private System.Nullable<bool> _is_inlineable;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("definition")]
        public string Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_ansi_nulls")]
        public System.Nullable<bool> UsesAnsiNulls
        {
            get
            {
                return this._uses_ansi_nulls;
            }
            set
            {
                this._uses_ansi_nulls = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_quoted_identifier")]
        public System.Nullable<bool> UsesQuotedIdentifier
        {
            get
            {
                return this._uses_quoted_identifier;
            }
            set
            {
                this._uses_quoted_identifier = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_bound")]
        public System.Nullable<bool> IsSchemaBound
        {
            get
            {
                return this._is_schema_bound;
            }
            set
            {
                this._is_schema_bound = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_database_collation")]
        public System.Nullable<bool> UsesDatabaseCollation
        {
            get
            {
                return this._uses_database_collation;
            }
            set
            {
                this._uses_database_collation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_recompiled")]
        public System.Nullable<bool> IsRecompiled
        {
            get
            {
                return this._is_recompiled;
            }
            set
            {
                this._is_recompiled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("null_on_null_input")]
        public System.Nullable<bool> NullOnNullInput
        {
            get
            {
                return this._null_on_null_input;
            }
            set
            {
                this._null_on_null_input = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("execute_as_principal_id")]
        public System.Nullable<int> ExecuteAsPrincipalId
        {
            get
            {
                return this._execute_as_principal_id;
            }
            set
            {
                this._execute_as_principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_native_compilation")]
        public System.Nullable<bool> UsesNativeCompilation
        {
            get
            {
                return this._uses_native_compilation;
            }
            set
            {
                this._uses_native_compilation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("inline_type")]
        public System.Nullable<bool> InlineType
        {
            get
            {
                return this._inline_type;
            }
            set
            {
                this._inline_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_inlineable")]
        public System.Nullable<bool> IsInlineable
        {
            get
            {
                return this._is_inlineable;
            }
            set
            {
                this._is_inlineable = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_stats")]
    public partial class SysStatCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _stats_id;
        
        private System.Nullable<bool> _auto_created;
        
        private System.Nullable<bool> _user_created;
        
        private System.Nullable<bool> _no_recompute;
        
        private System.Nullable<bool> _has_filter;
        
        private string _filter_definition;
        
        private System.Nullable<bool> _is_temporary;
        
        private System.Nullable<bool> _is_incremental;
        
        private System.Nullable<bool> _has_persisted_sample;
        
        private System.Nullable<int> _stats_generation_method;
        
        private string _stats_generation_method_desc;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stats_id")]
        public System.Nullable<int> StatsId
        {
            get
            {
                return this._stats_id;
            }
            set
            {
                this._stats_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("auto_created")]
        public System.Nullable<bool> AutoCreated
        {
            get
            {
                return this._auto_created;
            }
            set
            {
                this._auto_created = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_created")]
        public System.Nullable<bool> UserCreated
        {
            get
            {
                return this._user_created;
            }
            set
            {
                this._user_created = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("no_recompute")]
        public System.Nullable<bool> NoRecompute
        {
            get
            {
                return this._no_recompute;
            }
            set
            {
                this._no_recompute = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_filter")]
        public System.Nullable<bool> HasFilter
        {
            get
            {
                return this._has_filter;
            }
            set
            {
                this._has_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filter_definition")]
        public string FilterDefinition
        {
            get
            {
                return this._filter_definition;
            }
            set
            {
                this._filter_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_temporary")]
        public System.Nullable<bool> IsTemporary
        {
            get
            {
                return this._is_temporary;
            }
            set
            {
                this._is_temporary = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_incremental")]
        public System.Nullable<bool> IsIncremental
        {
            get
            {
                return this._is_incremental;
            }
            set
            {
                this._is_incremental = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_persisted_sample")]
        public System.Nullable<bool> HasPersistedSample
        {
            get
            {
                return this._has_persisted_sample;
            }
            set
            {
                this._has_persisted_sample = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stats_generation_method")]
        public System.Nullable<int> StatsGenerationMethod
        {
            get
            {
                return this._stats_generation_method;
            }
            set
            {
                this._stats_generation_method = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stats_generation_method_desc")]
        public string StatsGenerationMethodDesc
        {
            get
            {
                return this._stats_generation_method_desc;
            }
            set
            {
                this._stats_generation_method_desc = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_stats_columns")]
    public partial class SysStatColumnCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _stats_id;
        
        private System.Nullable<int> _stats_column_id;
        
        private System.Nullable<int> _column_id;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stats_id")]
        public System.Nullable<int> StatsId
        {
            get
            {
                return this._stats_id;
            }
            set
            {
                this._stats_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("stats_column_id")]
        public System.Nullable<int> StatsColumnId
        {
            get
            {
                return this._stats_column_id;
            }
            set
            {
                this._stats_column_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_id")]
        public System.Nullable<int> ColumnId
        {
            get
            {
                return this._column_id;
            }
            set
            {
                this._column_id = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_symmetric_keys")]
    public partial class SysSymmetricKeyCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _symmetric_key_id;
        
        private System.Nullable<int> _key_length;
        
        private string _key_algorithm;
        
        private string _algorithm_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<System.Guid> _key_guid;
        
        private object _key_thumbprint;
        
        private string _provider_type;
        
        private System.Nullable<System.Guid> _cryptographic_provider_guid;
        
        private object _cryptographic_provider_algid;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("symmetric_key_id")]
        public System.Nullable<int> SymmetricKeyId
        {
            get
            {
                return this._symmetric_key_id;
            }
            set
            {
                this._symmetric_key_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_length")]
        public System.Nullable<int> KeyLength
        {
            get
            {
                return this._key_length;
            }
            set
            {
                this._key_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_algorithm")]
        public string KeyAlgorithm
        {
            get
            {
                return this._key_algorithm;
            }
            set
            {
                this._key_algorithm = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("algorithm_desc")]
        public string AlgorithmDesc
        {
            get
            {
                return this._algorithm_desc;
            }
            set
            {
                this._algorithm_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_guid")]
        public System.Nullable<System.Guid> KeyGuid
        {
            get
            {
                return this._key_guid;
            }
            set
            {
                this._key_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object KeyThumbprint
        {
            get
            {
                return this._key_thumbprint;
            }
            set
            {
                this._key_thumbprint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("provider_type")]
        public string ProviderType
        {
            get
            {
                return this._provider_type;
            }
            set
            {
                this._provider_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("cryptographic_provider_guid")]
        public System.Nullable<System.Guid> CryptographicProviderGuid
        {
            get
            {
                return this._cryptographic_provider_guid;
            }
            set
            {
                this._cryptographic_provider_guid = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public object CryptographicProviderAlgid
        {
            get
            {
                return this._cryptographic_provider_algid;
            }
            set
            {
                this._cryptographic_provider_algid = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_synonyms")]
    public partial class SysSynonymCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private string _base_object_name;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("base_object_name")]
        public string BaseObjectName
        {
            get
            {
                return this._base_object_name;
            }
            set
            {
                this._base_object_name = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_table_types")]
    public partial class SysTableTypeCatalog
    {
        
        private string _name;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_user_defined;
        
        private System.Nullable<bool> _is_assembly_type;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private System.Nullable<bool> _is_table_type;
        
        private System.Nullable<int> _type_table_object_id;
        
        private System.Nullable<bool> _is_memory_optimized;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_user_defined")]
        public System.Nullable<bool> IsUserDefined
        {
            get
            {
                return this._is_user_defined;
            }
            set
            {
                this._is_user_defined = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_assembly_type")]
        public System.Nullable<bool> IsAssemblyType
        {
            get
            {
                return this._is_assembly_type;
            }
            set
            {
                this._is_assembly_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_table_type")]
        public System.Nullable<bool> IsTableType
        {
            get
            {
                return this._is_table_type;
            }
            set
            {
                this._is_table_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_table_object_id")]
        public System.Nullable<int> TypeTableObjectId
        {
            get
            {
                return this._type_table_object_id;
            }
            set
            {
                this._type_table_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_memory_optimized")]
        public System.Nullable<bool> IsMemoryOptimized
        {
            get
            {
                return this._is_memory_optimized;
            }
            set
            {
                this._is_memory_optimized = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_tables")]
    public partial class SysTableCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<int> _lob_data_space_id;
        
        private System.Nullable<int> _filestream_data_space_id;
        
        private System.Nullable<int> _max_column_id_used;
        
        private System.Nullable<bool> _lock_on_bulk_load;
        
        private System.Nullable<bool> _uses_ansi_nulls;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _has_replication_filter;
        
        private System.Nullable<bool> _is_merge_published;
        
        private System.Nullable<bool> _is_sync_tran_subscribed;
        
        private System.Nullable<bool> _has_unchecked_assembly_data;
        
        private System.Nullable<int> _text_in_row_limit;
        
        private System.Nullable<bool> _large_value_types_out_of_row;
        
        private System.Nullable<bool> _is_tracked_by_cdc;
        
        private System.Nullable<byte> _lock_escalation;
        
        private string _lock_escalation_desc;
        
        private System.Nullable<bool> _is_filetable;
        
        private System.Nullable<bool> _is_memory_optimized;
        
        private System.Nullable<byte> _durability;
        
        private string _durability_desc;
        
        private System.Nullable<byte> _temporal_type;
        
        private string _temporal_type_desc;
        
        private System.Nullable<int> _history_table_id;
        
        private System.Nullable<bool> _is_remote_data_archive_enabled;
        
        private System.Nullable<bool> _is_external;
        
        private System.Nullable<int> _history_retention_period;
        
        private System.Nullable<int> _history_retention_period_unit;
        
        private string _history_retention_period_unit_desc;
        
        private System.Nullable<bool> _is_node;
        
        private System.Nullable<bool> _is_edge;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lob_data_space_id")]
        public System.Nullable<int> LobDataSpaceId
        {
            get
            {
                return this._lob_data_space_id;
            }
            set
            {
                this._lob_data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filestream_data_space_id")]
        public System.Nullable<int> FilestreamDataSpaceId
        {
            get
            {
                return this._filestream_data_space_id;
            }
            set
            {
                this._filestream_data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_column_id_used")]
        public System.Nullable<int> MaxColumnIdUsed
        {
            get
            {
                return this._max_column_id_used;
            }
            set
            {
                this._max_column_id_used = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lock_on_bulk_load")]
        public System.Nullable<bool> LockOnBulkLoad
        {
            get
            {
                return this._lock_on_bulk_load;
            }
            set
            {
                this._lock_on_bulk_load = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("uses_ansi_nulls")]
        public System.Nullable<bool> UsesAnsiNulls
        {
            get
            {
                return this._uses_ansi_nulls;
            }
            set
            {
                this._uses_ansi_nulls = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_replication_filter")]
        public System.Nullable<bool> HasReplicationFilter
        {
            get
            {
                return this._has_replication_filter;
            }
            set
            {
                this._has_replication_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_merge_published")]
        public System.Nullable<bool> IsMergePublished
        {
            get
            {
                return this._is_merge_published;
            }
            set
            {
                this._is_merge_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_sync_tran_subscribed")]
        public System.Nullable<bool> IsSyncTranSubscribed
        {
            get
            {
                return this._is_sync_tran_subscribed;
            }
            set
            {
                this._is_sync_tran_subscribed = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_unchecked_assembly_data")]
        public System.Nullable<bool> HasUncheckedAssemblyData
        {
            get
            {
                return this._has_unchecked_assembly_data;
            }
            set
            {
                this._has_unchecked_assembly_data = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("text_in_row_limit")]
        public System.Nullable<int> TextInRowLimit
        {
            get
            {
                return this._text_in_row_limit;
            }
            set
            {
                this._text_in_row_limit = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("large_value_types_out_of_row")]
        public System.Nullable<bool> LargeValueTypesOutOfRow
        {
            get
            {
                return this._large_value_types_out_of_row;
            }
            set
            {
                this._large_value_types_out_of_row = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_tracked_by_cdc")]
        public System.Nullable<bool> IsTrackedByCdc
        {
            get
            {
                return this._is_tracked_by_cdc;
            }
            set
            {
                this._is_tracked_by_cdc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lock_escalation")]
        public System.Nullable<byte> LockEscalation
        {
            get
            {
                return this._lock_escalation;
            }
            set
            {
                this._lock_escalation = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("lock_escalation_desc")]
        public string LockEscalationDesc
        {
            get
            {
                return this._lock_escalation_desc;
            }
            set
            {
                this._lock_escalation_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_filetable")]
        public System.Nullable<bool> IsFiletable
        {
            get
            {
                return this._is_filetable;
            }
            set
            {
                this._is_filetable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_memory_optimized")]
        public System.Nullable<bool> IsMemoryOptimized
        {
            get
            {
                return this._is_memory_optimized;
            }
            set
            {
                this._is_memory_optimized = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("durability")]
        public System.Nullable<byte> Durability
        {
            get
            {
                return this._durability;
            }
            set
            {
                this._durability = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("durability_desc")]
        public string DurabilityDesc
        {
            get
            {
                return this._durability_desc;
            }
            set
            {
                this._durability_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("temporal_type")]
        public System.Nullable<byte> TemporalType
        {
            get
            {
                return this._temporal_type;
            }
            set
            {
                this._temporal_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("temporal_type_desc")]
        public string TemporalTypeDesc
        {
            get
            {
                return this._temporal_type_desc;
            }
            set
            {
                this._temporal_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("history_table_id")]
        public System.Nullable<int> HistoryTableId
        {
            get
            {
                return this._history_table_id;
            }
            set
            {
                this._history_table_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_remote_data_archive_enabled")]
        public System.Nullable<bool> IsRemoteDataArchiveEnabled
        {
            get
            {
                return this._is_remote_data_archive_enabled;
            }
            set
            {
                this._is_remote_data_archive_enabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_external")]
        public System.Nullable<bool> IsExternal
        {
            get
            {
                return this._is_external;
            }
            set
            {
                this._is_external = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("history_retention_period")]
        public System.Nullable<int> HistoryRetentionPeriod
        {
            get
            {
                return this._history_retention_period;
            }
            set
            {
                this._history_retention_period = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("history_retention_period_unit")]
        public System.Nullable<int> HistoryRetentionPeriodUnit
        {
            get
            {
                return this._history_retention_period_unit;
            }
            set
            {
                this._history_retention_period_unit = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("history_retention_period_unit_desc")]
        public string HistoryRetentionPeriodUnitDesc
        {
            get
            {
                return this._history_retention_period_unit_desc;
            }
            set
            {
                this._history_retention_period_unit_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_node")]
        public System.Nullable<bool> IsNode
        {
            get
            {
                return this._is_node;
            }
            set
            {
                this._is_node = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_edge")]
        public System.Nullable<bool> IsEdge
        {
            get
            {
                return this._is_edge;
            }
            set
            {
                this._is_edge = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_trigger_events")]
    public partial class SysTriggerEventCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_first;
        
        private System.Nullable<bool> _is_last;
        
        private System.Nullable<int> _event_group_type;
        
        private string _event_group_type_desc;
        
        private System.Nullable<bool> _is_trigger_event;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<int> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_first")]
        public System.Nullable<bool> IsFirst
        {
            get
            {
                return this._is_first;
            }
            set
            {
                this._is_first = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_last")]
        public System.Nullable<bool> IsLast
        {
            get
            {
                return this._is_last;
            }
            set
            {
                this._is_last = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("event_group_type")]
        public System.Nullable<int> EventGroupType
        {
            get
            {
                return this._event_group_type;
            }
            set
            {
                this._event_group_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("event_group_type_desc")]
        public string EventGroupTypeDesc
        {
            get
            {
                return this._event_group_type_desc;
            }
            set
            {
                this._event_group_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_trigger_event")]
        public System.Nullable<bool> IsTriggerEvent
        {
            get
            {
                return this._is_trigger_event;
            }
            set
            {
                this._is_trigger_event = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_triggers")]
    public partial class SysTriggerCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<byte> _parent_class;
        
        private string _parent_class_desc;
        
        private System.Nullable<int> _parent_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_not_for_replication;
        
        private System.Nullable<bool> _is_instead_of_trigger;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_class")]
        public System.Nullable<byte> ParentClass
        {
            get
            {
                return this._parent_class;
            }
            set
            {
                this._parent_class = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_class_desc")]
        public string ParentClassDesc
        {
            get
            {
                return this._parent_class_desc;
            }
            set
            {
                this._parent_class_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_id")]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._parent_id;
            }
            set
            {
                this._parent_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_not_for_replication")]
        public System.Nullable<bool> IsNotForReplication
        {
            get
            {
                return this._is_not_for_replication;
            }
            set
            {
                this._is_not_for_replication = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_instead_of_trigger")]
        public System.Nullable<bool> IsInsteadOfTrigger
        {
            get
            {
                return this._is_instead_of_trigger;
            }
            set
            {
                this._is_instead_of_trigger = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_types")]
    public partial class SysTypeCatalog
    {
        
        private string _name;
        
        private System.Nullable<byte> _system_type_id;
        
        private System.Nullable<int> _user_type_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<short> _max_length;
        
        private System.Nullable<byte> _precision;
        
        private System.Nullable<byte> _scale;
        
        private string _collation_name;
        
        private System.Nullable<bool> _is_nullable;
        
        private System.Nullable<bool> _is_user_defined;
        
        private System.Nullable<bool> _is_assembly_type;
        
        private System.Nullable<int> _default_object_id;
        
        private System.Nullable<int> _rule_object_id;
        
        private System.Nullable<bool> _is_table_type;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("system_type_id")]
        public System.Nullable<byte> SystemTypeId
        {
            get
            {
                return this._system_type_id;
            }
            set
            {
                this._system_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("user_type_id")]
        public System.Nullable<int> UserTypeId
        {
            get
            {
                return this._user_type_id;
            }
            set
            {
                this._user_type_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("max_length")]
        public System.Nullable<short> MaxLength
        {
            get
            {
                return this._max_length;
            }
            set
            {
                this._max_length = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("precision")]
        public System.Nullable<byte> Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                this._precision = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("scale")]
        public System.Nullable<byte> Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("collation_name")]
        public string CollationName
        {
            get
            {
                return this._collation_name;
            }
            set
            {
                this._collation_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_nullable")]
        public System.Nullable<bool> IsNullable
        {
            get
            {
                return this._is_nullable;
            }
            set
            {
                this._is_nullable = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_user_defined")]
        public System.Nullable<bool> IsUserDefined
        {
            get
            {
                return this._is_user_defined;
            }
            set
            {
                this._is_user_defined = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_assembly_type")]
        public System.Nullable<bool> IsAssemblyType
        {
            get
            {
                return this._is_assembly_type;
            }
            set
            {
                this._is_assembly_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("default_object_id")]
        public System.Nullable<int> DefaultObjectId
        {
            get
            {
                return this._default_object_id;
            }
            set
            {
                this._default_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("rule_object_id")]
        public System.Nullable<int> RuleObjectId
        {
            get
            {
                return this._rule_object_id;
            }
            set
            {
                this._rule_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_table_type")]
        public System.Nullable<bool> IsTableType
        {
            get
            {
                return this._is_table_type;
            }
            set
            {
                this._is_table_type = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_views")]
    public partial class SysViewCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _object_id;
        
        private System.Nullable<int> _principal_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _parent_object_id;
        
        private string _type;
        
        private string _type_desc;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private System.Nullable<bool> _is_ms_shipped;
        
        private System.Nullable<bool> _is_published;
        
        private System.Nullable<bool> _is_schema_published;
        
        private System.Nullable<bool> _is_replicated;
        
        private System.Nullable<bool> _has_replication_filter;
        
        private System.Nullable<bool> _has_opaque_metadata;
        
        private System.Nullable<bool> _has_unchecked_assembly_data;
        
        private System.Nullable<bool> _with_check_option;
        
        private System.Nullable<bool> _is_date_correlation_view;
        
        private System.Nullable<bool> _is_tracked_by_cdc;
        
        private System.Nullable<bool> _has_snapshot;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("parent_object_id")]
        public System.Nullable<int> ParentObjectId
        {
            get
            {
                return this._parent_object_id;
            }
            set
            {
                this._parent_object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ms_shipped")]
        public System.Nullable<bool> IsMsShipped
        {
            get
            {
                return this._is_ms_shipped;
            }
            set
            {
                this._is_ms_shipped = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_published")]
        public System.Nullable<bool> IsPublished
        {
            get
            {
                return this._is_published;
            }
            set
            {
                this._is_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_schema_published")]
        public System.Nullable<bool> IsSchemaPublished
        {
            get
            {
                return this._is_schema_published;
            }
            set
            {
                this._is_schema_published = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_replicated")]
        public System.Nullable<bool> IsReplicated
        {
            get
            {
                return this._is_replicated;
            }
            set
            {
                this._is_replicated = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_replication_filter")]
        public System.Nullable<bool> HasReplicationFilter
        {
            get
            {
                return this._has_replication_filter;
            }
            set
            {
                this._has_replication_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_opaque_metadata")]
        public System.Nullable<bool> HasOpaqueMetadata
        {
            get
            {
                return this._has_opaque_metadata;
            }
            set
            {
                this._has_opaque_metadata = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_unchecked_assembly_data")]
        public System.Nullable<bool> HasUncheckedAssemblyData
        {
            get
            {
                return this._has_unchecked_assembly_data;
            }
            set
            {
                this._has_unchecked_assembly_data = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("with_check_option")]
        public System.Nullable<bool> WithCheckOption
        {
            get
            {
                return this._with_check_option;
            }
            set
            {
                this._with_check_option = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_date_correlation_view")]
        public System.Nullable<bool> IsDateCorrelationView
        {
            get
            {
                return this._is_date_correlation_view;
            }
            set
            {
                this._is_date_correlation_view = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_tracked_by_cdc")]
        public System.Nullable<bool> IsTrackedByCdc
        {
            get
            {
                return this._is_tracked_by_cdc;
            }
            set
            {
                this._is_tracked_by_cdc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_snapshot")]
        public System.Nullable<bool> HasSnapshot
        {
            get
            {
                return this._has_snapshot;
            }
            set
            {
                this._has_snapshot = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_xml_indexes")]
    public partial class SysXmlIndexCatalog
    {
        
        private System.Nullable<int> _object_id;
        
        private string _name;
        
        private System.Nullable<int> _index_id;
        
        private System.Nullable<byte> _type;
        
        private string _type_desc;
        
        private System.Nullable<bool> _is_unique;
        
        private System.Nullable<int> _data_space_id;
        
        private System.Nullable<bool> _ignore_dup_key;
        
        private System.Nullable<bool> _is_primary_key;
        
        private System.Nullable<bool> _is_unique_constraint;
        
        private System.Nullable<byte> _fill_factor;
        
        private System.Nullable<bool> _is_padded;
        
        private System.Nullable<bool> _is_disabled;
        
        private System.Nullable<bool> _is_hypothetical;
        
        private System.Nullable<bool> _is_ignored_in_optimization;
        
        private System.Nullable<bool> _allow_row_locks;
        
        private System.Nullable<bool> _allow_page_locks;
        
        private System.Nullable<int> _using_xml_index_id;
        
        private string _secondary_type;
        
        private string _secondary_type_desc;
        
        private System.Nullable<bool> _has_filter;
        
        private string _filter_definition;
        
        private System.Nullable<byte> _xml_index_type;
        
        private string _xml_index_type_description;
        
        private System.Nullable<int> _path_id;
        
        private System.Nullable<bool> _auto_created;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("object_id")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public System.Nullable<int> ObjectId
        {
            get
            {
                return this._object_id;
            }
            set
            {
                this._object_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("index_id")]
        public System.Nullable<int> IndexId
        {
            get
            {
                return this._index_id;
            }
            set
            {
                this._index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type")]
        public System.Nullable<byte> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("type_desc")]
        public string TypeDesc
        {
            get
            {
                return this._type_desc;
            }
            set
            {
                this._type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique")]
        public System.Nullable<bool> IsUnique
        {
            get
            {
                return this._is_unique;
            }
            set
            {
                this._is_unique = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("data_space_id")]
        public System.Nullable<int> DataSpaceId
        {
            get
            {
                return this._data_space_id;
            }
            set
            {
                this._data_space_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("ignore_dup_key")]
        public System.Nullable<bool> IgnoreDupKey
        {
            get
            {
                return this._ignore_dup_key;
            }
            set
            {
                this._ignore_dup_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_primary_key")]
        public System.Nullable<bool> IsPrimaryKey
        {
            get
            {
                return this._is_primary_key;
            }
            set
            {
                this._is_primary_key = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_unique_constraint")]
        public System.Nullable<bool> IsUniqueConstraint
        {
            get
            {
                return this._is_unique_constraint;
            }
            set
            {
                this._is_unique_constraint = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("fill_factor")]
        public System.Nullable<byte> FillFactor
        {
            get
            {
                return this._fill_factor;
            }
            set
            {
                this._fill_factor = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_padded")]
        public System.Nullable<bool> IsPadded
        {
            get
            {
                return this._is_padded;
            }
            set
            {
                this._is_padded = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_disabled")]
        public System.Nullable<bool> IsDisabled
        {
            get
            {
                return this._is_disabled;
            }
            set
            {
                this._is_disabled = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_hypothetical")]
        public System.Nullable<bool> IsHypothetical
        {
            get
            {
                return this._is_hypothetical;
            }
            set
            {
                this._is_hypothetical = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("is_ignored_in_optimization")]
        public System.Nullable<bool> IsIgnoredInOptimization
        {
            get
            {
                return this._is_ignored_in_optimization;
            }
            set
            {
                this._is_ignored_in_optimization = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_row_locks")]
        public System.Nullable<bool> AllowRowLocks
        {
            get
            {
                return this._allow_row_locks;
            }
            set
            {
                this._allow_row_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("allow_page_locks")]
        public System.Nullable<bool> AllowPageLocks
        {
            get
            {
                return this._allow_page_locks;
            }
            set
            {
                this._allow_page_locks = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("using_xml_index_id")]
        public System.Nullable<int> UsingXmlIndexId
        {
            get
            {
                return this._using_xml_index_id;
            }
            set
            {
                this._using_xml_index_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("secondary_type")]
        public string SecondaryType
        {
            get
            {
                return this._secondary_type;
            }
            set
            {
                this._secondary_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("secondary_type_desc")]
        public string SecondaryTypeDesc
        {
            get
            {
                return this._secondary_type_desc;
            }
            set
            {
                this._secondary_type_desc = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("has_filter")]
        public System.Nullable<bool> HasFilter
        {
            get
            {
                return this._has_filter;
            }
            set
            {
                this._has_filter = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("filter_definition")]
        public string FilterDefinition
        {
            get
            {
                return this._filter_definition;
            }
            set
            {
                this._filter_definition = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_index_type")]
        public System.Nullable<byte> XmlIndexType
        {
            get
            {
                return this._xml_index_type;
            }
            set
            {
                this._xml_index_type = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_index_type_description")]
        public string XmlIndexTypeDescription
        {
            get
            {
                return this._xml_index_type_description;
            }
            set
            {
                this._xml_index_type_description = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("path_id")]
        public System.Nullable<int> PathId
        {
            get
            {
                return this._path_id;
            }
            set
            {
                this._path_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("auto_created")]
        public System.Nullable<bool> AutoCreated
        {
            get
            {
                return this._auto_created;
            }
            set
            {
                this._auto_created = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_xml_schema_collections")]
    public partial class SysXmlSchemaCollectionCatalog
    {
        
        private System.Nullable<int> _xml_collection_id;
        
        private System.Nullable<int> _schema_id;
        
        private System.Nullable<int> _principal_id;
        
        private string _name;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("xml_collection_id")]
        public System.Nullable<int> XmlCollectionId
        {
            get
            {
                return this._xml_collection_id;
            }
            set
            {
                this._xml_collection_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("schema_id")]
        public System.Nullable<int> SchemaId
        {
            get
            {
                return this._schema_id;
            }
            set
            {
                this._schema_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("principal_id")]
        public System.Nullable<int> PrincipalId
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                this._principal_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
    }
    
    [System.ComponentModel.DataAnnotations.Schema.TableAttribute("sys_column_master_key_definitions")]
    public partial class SysColumnMasterKeyDefinitionCatalog
    {
        
        private string _name;
        
        private System.Nullable<int> _column_master_key_definition_id;
        
        private System.Nullable<System.DateTime> _create_date;
        
        private System.Nullable<System.DateTime> _modify_date;
        
        private string _key_store_provider_name;
        
        private string _key_path;
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("name")]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("column_master_key_definition_id")]
        public System.Nullable<int> ColumnMasterKeyDefinitionId
        {
            get
            {
                return this._column_master_key_definition_id;
            }
            set
            {
                this._column_master_key_definition_id = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("create_date")]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._create_date;
            }
            set
            {
                this._create_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("modify_date")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._modify_date;
            }
            set
            {
                this._modify_date = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_store_provider_name")]
        public string KeyStoreProviderName
        {
            get
            {
                return this._key_store_provider_name;
            }
            set
            {
                this._key_store_provider_name = value;
            }
        }
        
        [System.ComponentModel.DataAnnotations.Schema.ColumnAttribute("key_path")]
        public string KeyPath
        {
            get
            {
                return this._key_path;
            }
            set
            {
                this._key_path = value;
            }
        }
    }
}
